import * as eases from "../ease";
import { EventEmitter, IKeyDownEvent, IKeyPressEvent, IKeyUpEvent, IPointClickEvent, IPointDownEvent, IPointEvent, IPointMoveEvent, IPointUpEvent, IValueChangeEvent } from "../events";
import { ISpriteLoadedEvent } from "../events/SpriteEvents";
import { CanvasMatrix2D } from "../matrix";
import { ISpriteSheet, ITextureMap } from "../spritesheet";
import { Cursor, IInteractionPoint, IKeyFrameEntry, ISize, ISpritePosition, SpriteType } from "../util";
import { IContainer } from "./Container";
import { IStage } from "./Stage";
export interface ISprite extends ISize {
    id: string;
    parent: ISprite;
    container: IContainer;
    readonly type: SpriteType;
    previousPosition: CanvasMatrix2D;
    inverse: CanvasMatrix2D;
    interpolatedAlpha: number;
    previousAlpha: number;
    z: number;
    parentHoverCheck: boolean;
    textures: ITextureMap;
    lastInterpolated: number;
    interpolatedPosition: CanvasMatrix2D;
    active: boolean;
    hover: boolean;
    down: boolean;
    focused: boolean;
    tabIndex: number;
    cursor: Cursor;
    loaded: Promise<void>;
    texture: string;
    pointUpEvent: EventEmitter<IPointUpEvent>;
    pointDownEvent: EventEmitter<IPointEvent>;
    pointClickEvent: EventEmitter<IPointClickEvent>;
    pointMoveEvent: EventEmitter<IPointMoveEvent>;
    keyDownEvent: EventEmitter<IKeyDownEvent>;
    keyUpEvent: EventEmitter<IKeyUpEvent>;
    keyPressEvent: EventEmitter<IKeyPressEvent>;
    loadedEvent: EventEmitter<ISpriteLoadedEvent>;
    textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;
    keyFrames: IKeyFrameEntry[];
    broadPhase(point: IInteractionPoint): boolean;
    narrowPhase(point: IInteractionPoint): ISprite;
    isHovering(point: IInteractionPoint, now: number): ISprite;
    isFocused(): ISprite;
    pointCollision(point: IInteractionPoint): boolean;
    pointClick(point: IInteractionPoint): void;
    setTexture(texture: string): this;
    setZ(z: number): this;
    visible(alpha: number): this;
    interpolate(now: number): void;
    skipAnimation(now: number): boolean;
    update(): void;
    render(ctx: CanvasRenderingContext2D): void;
    keyDown(event: IKeyDownEvent): void;
    keyUp(event: IKeyUpEvent): void;
    keyPress(event: IKeyPressEvent): void;
    wait(length: number): this;
    move(to: CanvasMatrix2D): this;
    over(animationLength: number): this;
    with(ease: eases.EaseFunc): this;
    movePosition(to: ISpritePosition): this;
    repeat(): this;
    clearAnimation(now: number): this;
    getStage(): IStage;
}
export interface ISpriteProps {
    id: string;
    position: CanvasMatrix2D;
    textures?: ITextureMap;
    alpha?: number;
    z?: number;
    source: Promise<ImageBitmap>;
    definition: Promise<ISpriteSheet>;
}
export declare class Sprite implements ISprite {
    id: string;
    type: SpriteType;
    previousPosition: CanvasMatrix2D;
    interpolatedPosition: CanvasMatrix2D;
    inverse: CanvasMatrix2D;
    interpolatedAlpha: number;
    previousAlpha: number;
    z: number;
    parent: ISprite;
    container: IContainer;
    lastInterpolated: number;
    cursor: Cursor;
    active: boolean;
    hover: boolean;
    down: boolean;
    textures: ITextureMap;
    texture: string;
    loaded: Promise<void>;
    focused: boolean;
    tabIndex: number;
    width: number;
    height: number;
    parentHoverCheck: boolean;
    pointDownEvent: EventEmitter<IPointDownEvent>;
    pointUpEvent: EventEmitter<IPointUpEvent>;
    pointMoveEvent: EventEmitter<IPointMoveEvent>;
    pointClickEvent: EventEmitter<IPointClickEvent>;
    keyDownEvent: EventEmitter<IKeyDownEvent>;
    keyUpEvent: EventEmitter<IKeyUpEvent>;
    keyPressEvent: EventEmitter<IKeyPressEvent>;
    loadedEvent: EventEmitter<ISpriteLoadedEvent>;
    textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;
    keyFrames: IKeyFrameEntry[];
    constructor(props: ISpriteProps);
    broadPhase(point: IInteractionPoint): boolean;
    narrowPhase(point: IInteractionPoint): ISprite;
    pointCollision(point: IInteractionPoint): boolean;
    pointClick(point: IInteractionPoint): void;
    isHovering(point: IInteractionPoint, now: number): ISprite;
    isFocused(): ISprite;
    wait(length: number): this;
    movePosition(position: ISpritePosition): this;
    move(position: CanvasMatrix2D): this;
    visible(alpha?: number): this;
    setZ(z: number): this;
    over(timespan: number): this;
    skipAnimation(now: number): boolean;
    update(): void;
    interpolate(now: number): void;
    setTexture(texture: string): this;
    render(ctx: CanvasRenderingContext2D): void;
    keyDown(event: IKeyDownEvent): void;
    keyUp(event: IKeyUpEvent): void;
    keyPress(event: IKeyPressEvent): void;
    with(ease: eases.EaseFunc): this;
    repeat(): this;
    clearAnimation(now: number): this;
    getStage(): IStage;
    private loadTexture;
    private createKeyFrame;
    private getLastKeyFrame;
}
