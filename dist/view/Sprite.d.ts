import * as eases from "../ease";
import { EventEmitter, IKeyDownEvent, IKeyUpEvent, IPointClickEvent, IPointDownEvent, IPointEvent, IPointMoveEvent, IPointUpEvent, IValueChangeEvent } from "../events";
import { ISpriteLoadedEvent } from "../events/SpriteEvents";
import { CanvasMatrix2D } from "../matrix";
import { ISpriteSheet, ITextureMap } from "../spritesheet";
import { Cursor, IInteractionPoint, ISize, ISpritePosition, SpriteType } from "../util";
import { IContainer } from "./Container";
export interface ISprite extends ISize {
    id: string;
    parent: ISprite;
    container: IContainer;
    readonly type: SpriteType;
    previousPosition: CanvasMatrix2D;
    position: CanvasMatrix2D;
    inverse: CanvasMatrix2D;
    alpha: number;
    interpolatedAlpha: number;
    previousAlpha: number;
    z: number;
    textures: ITextureMap;
    lastInterpolated: number;
    interpolatedPosition: CanvasMatrix2D;
    animationStart: number;
    animationLength: number;
    wait: number;
    active: boolean;
    hover: boolean;
    down: boolean;
    focused: boolean;
    tabIndex: number;
    cursor: Cursor;
    loaded: Promise<void>;
    texture: string;
    pointUpEvent: EventEmitter<IPointUpEvent>;
    pointDownEvent: EventEmitter<IPointEvent>;
    pointClickEvent: EventEmitter<IPointClickEvent>;
    pointMoveEvent: EventEmitter<IPointMoveEvent>;
    keyDownEvent: EventEmitter<IKeyDownEvent>;
    keyUpEvent: EventEmitter<IKeyUpEvent>;
    loadedEvent: EventEmitter<ISpriteLoadedEvent>;
    textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;
    ease(ratio: number): number;
    broadPhase(point: IInteractionPoint): boolean;
    narrowPhase(point: IInteractionPoint): ISprite;
    isHovering(point: IInteractionPoint, now: number): ISprite;
    isFocused(): ISprite;
    pointCollision(point: IInteractionPoint): boolean;
    setTexture(texture: string): this;
    over(timespan: number): this;
    waitFor(timespan: number): this;
    use(ease: eases.EaseFunc): this;
    movePosition(position: ISpritePosition): this;
    move(position: CanvasMatrix2D): this;
    setZ(z: number): this;
    visible(alpha: number): this;
    interpolate(now: number): void;
    skipAnimation(now: number): boolean;
    update(): void;
    render(ctx: CanvasRenderingContext2D): void;
    keyDown(event: IKeyDownEvent): void;
    keyUp(event: IKeyUpEvent): void;
}
export interface ISpriteProps {
    id: string;
    position: CanvasMatrix2D;
    textures?: ITextureMap;
    alpha?: number;
    z?: number;
    source: Promise<ImageBitmap>;
    definition: Promise<ISpriteSheet>;
}
export declare class Sprite implements ISprite {
    id: string;
    type: SpriteType;
    position: CanvasMatrix2D;
    previousPosition: CanvasMatrix2D;
    interpolatedPosition: CanvasMatrix2D;
    inverse: CanvasMatrix2D;
    alpha: number;
    interpolatedAlpha: number;
    previousAlpha: number;
    z: number;
    parent: ISprite;
    container: IContainer;
    wait: number;
    lastInterpolated: number;
    animationStart: number;
    ease: eases.EaseFunc;
    cursor: Cursor;
    animationLength: number;
    active: boolean;
    hover: boolean;
    down: boolean;
    textures: ITextureMap;
    texture: string;
    loaded: Promise<void>;
    focused: boolean;
    tabIndex: number;
    width: number;
    height: number;
    pointDownEvent: EventEmitter<IPointDownEvent>;
    pointUpEvent: EventEmitter<IPointUpEvent>;
    pointMoveEvent: EventEmitter<IPointMoveEvent>;
    pointClickEvent: EventEmitter<IPointClickEvent>;
    keyDownEvent: EventEmitter<IKeyDownEvent>;
    keyUpEvent: EventEmitter<IKeyUpEvent>;
    loadedEvent: EventEmitter<ISpriteLoadedEvent>;
    textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;
    constructor(props: ISpriteProps);
    broadPhase(point: IInteractionPoint): boolean;
    narrowPhase(point: IInteractionPoint): ISprite;
    pointCollision(point: IInteractionPoint): boolean;
    isHovering(point: IInteractionPoint, now: number): ISprite;
    isFocused(): ISprite;
    movePosition(position: ISpritePosition): this;
    move(position: CanvasMatrix2D): this;
    visible(alpha?: number): this;
    setZ(z: number): this;
    over(timespan: number): this;
    use(ease: eases.EaseFunc): this;
    run(): this;
    waitFor(timespan: number): this;
    skipAnimation(now: number): boolean;
    update(): void;
    interpolate(now: number): void;
    setTexture(texture: string): this;
    render(ctx: CanvasRenderingContext2D): void;
    keyDown(event: IKeyDownEvent): void;
    keyUp(event: IKeyUpEvent): void;
    private loadTexture;
}
