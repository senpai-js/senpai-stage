{"version":3,"file":"senpai-stage.js","sources":["../src/ease/consts.ts","../src/ease/index.ts","../src/matrix/index.ts","../src/spritesheet/index.ts","../src/util/index.ts","../src/view/TextInput.ts","../src/events/SenpaiEvent.ts","../src/view/Sprite.ts","../src/view/Button.ts","../src/view/Character.ts","../src/view/Checkbox.ts","../src/view/Close.ts","../src/view/Container.ts","../src/view/InteractionManager.ts","../src/view/Label.ts","../src/view/Panel.ts","../src/view/SFXSprite.ts","../src/view/Slider.ts","../src/view/Stage.ts","../src/view/Textbox.ts"],"sourcesContent":["export const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\n","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { PI, TAU } from \"./consts\";\r\n\r\nexport type EaseFunc = (ratio: number) => number;\r\n\r\nfunction inverse(inFunc: EaseFunc): EaseFunc {\r\n  return function outFunc(ratio: number): number {\r\n    return 1 - inFunc(1 - ratio);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: EaseFunc): EaseFunc {\r\n  const outFunc = inverse(inFunc);\r\n  return (ratio: number): number => ratio < 0.5\r\n    ? 0.5 * inFunc(ratio * 2)\r\n    : 0.5 + 0.5 * outFunc(2 * ratio - 1);\r\n}\r\n\r\nexport const easeLinear: EaseFunc = function linear(ratio: number): number {\r\n  return ratio;\r\n};\r\n\r\nexport const easeInQuad: EaseFunc = (ratio: number): number => ratio * ratio;\r\nexport const easeOutQuad: EaseFunc = inverse(easeInQuad);\r\nexport const easeInOutQuad: EaseFunc = inOut(easeInQuad);\r\n\r\nexport const easeInCub: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio;\r\nexport const easeOutCub: EaseFunc = inverse(easeInCub);\r\nexport const easeInOutCub: EaseFunc = inOut(easeInCub);\r\n\r\nexport const easeInQuart: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio;\r\nexport const easeOutQuart: EaseFunc = inverse(easeInQuart);\r\nexport const easeInOutQuart: EaseFunc = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: EaseFunc =\r\n  (ratio: number): number => ratio * ratio * ratio * ratio * ratio;\r\nexport const easeOutQuint: EaseFunc = inverse(easeInQuint);\r\nexport const easeInOutQuint: EaseFunc = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: EaseFunc =\r\n  (ratio: number): number => Math.sin(ratio * PI * 0.5);\r\nexport const easeInSin: EaseFunc = inverse(easeOutSin);\r\nexport const easeInOutSin: EaseFunc = inOut(easeInSin);\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: EaseFunc =\r\n  (ratio: number): number => Math.pow(2, -10 * ratio) * Math.sin((ratio - p / 4) * TAU / p) + 1;\r\nexport const easeInElastic: EaseFunc = inverse(easeOutElastic);\r\nexport const easeInOutElastic: EaseFunc = inOut(easeInElastic);\r\n","import { IInteractionPoint } from \"../util\";\r\nimport { ISprite } from \"../view/Sprite\";\r\nimport { IStage, Stage } from \"../view/Stage\";\r\n\r\nexport type CanvasMatrix2D = [number, number, number, number, number, number];\r\n\r\nexport class CanvasMatrix2DTransformAPI {\r\n  public value: CanvasMatrix2D = null;\r\n  constructor(input: CanvasMatrix2D) {\r\n    this.value = input;\r\n  }\r\n\r\n  public translate(x: number, y: number): this {\r\n    this.value[4] += this.value[0] * x + this.value[2] * y;\r\n    this.value[5] += this.value[1] * x + this.value[3] * y;\r\n    return this;\r\n  }\r\n\r\n  public scale(x: number, y: number): this {\r\n    this.value[0] *= x;\r\n    this.value[1] *= x;\r\n    this.value[2] *= y;\r\n    this.value[3] *= y;\r\n    return this;\r\n  }\r\n\r\n  public rotate(radians: number) {\r\n    const cos = Math.cos(radians);\r\n    const sin = Math.sin(radians);\r\n    const a = this.value[0];\r\n    const b = this.value[1];\r\n    const c = this.value[2];\r\n    const d = this.value[3];\r\n\r\n    this.value[0] = a * cos + c * sin;\r\n    this.value[1] = b * cos + d * sin;\r\n    this.value[2] = c * cos - a * sin;\r\n    this.value[3] = d * cos - b * sin;\r\n\r\n    return this;\r\n  }\r\n\r\n  public skewX(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[2] += this.value[0] * tan;\r\n    this.value[3] += this.value[1] * tan;\r\n    return this;\r\n  }\r\n\r\n  public skewY(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[0] += this.value[2] * tan;\r\n    this.value[1] += this.value[3] * tan;\r\n    return this;\r\n  }\r\n\r\n  public inverse(): this {\r\n    const a: number = this.value[0];\r\n    const b: number = this.value[1];\r\n    const c: number = this.value[2];\r\n    const d: number = this.value[3];\r\n    const e: number = this.value[4];\r\n    const f: number = this.value[5];\r\n    const det: number = 1 / (a * d - c * b);\r\n\r\n    this.value[0] = d * det;\r\n    this.value[1] = -b * det;\r\n    this.value[2] = -c * det;\r\n    this.value[3] = a * det;\r\n    this.value[4] = (c * f - e * d) * det;\r\n    this.value[5] = (e * b - a * f) * det;\r\n    return this;\r\n  }\r\n\r\n  public transform(props: CanvasMatrix2D): this {\r\n    // props values\r\n    const pa = props[0];\r\n    const pb = props[1];\r\n    const pc = props[2];\r\n    const pd = props[3];\r\n    const pe = props[4];\r\n    const pf = props[5];\r\n\r\n    // matrix values\r\n    const ma = this.value[0];\r\n    const mb = this.value[1];\r\n    const mc = this.value[2];\r\n    const md = this.value[3];\r\n    const me = this.value[4];\r\n    const mf = this.value[5];\r\n\r\n    this.value[0] = ma * pa + mc * pb;\r\n    this.value[1] = mb * pa + md * pb;\r\n    this.value[2] = ma * pc + mc * pd;\r\n    this.value[3] = mb * pc + md * pd;\r\n    this.value[4] = ma * pe + mc * pf + me;\r\n    this.value[5] = mb * pe + md * pf + mf;\r\n    return this;\r\n  }\r\n\r\n  public reset(): this {\r\n    this.value[0] = 1;\r\n    this.value[1] = 0;\r\n    this.value[2] = 0;\r\n    this.value[3] = 1;\r\n    this.value[4] = 0;\r\n    this.value[5] = 0;\r\n    return this;\r\n  }\r\n\r\n  public set(props: CanvasMatrix2D): this {\r\n    this.value[0] = props[0];\r\n    this.value[1] = props[1];\r\n    this.value[2] = props[2];\r\n    this.value[3] = props[3];\r\n    this.value[4] = props[4];\r\n    this.value[5] = props[5];\r\n    return this;\r\n  }\r\n\r\n  public setTo(target: CanvasMatrix2D): this {\r\n    target[0] = this.value[0];\r\n    target[1] = this.value[1];\r\n    target[2] = this.value[2];\r\n    target[3] = this.value[3];\r\n    target[4] = this.value[4];\r\n    target[5] = this.value[5];\r\n    return this;\r\n  }\r\n\r\n  public transformPoint(point: IInteractionPoint): this {\r\n    transformPoint(point, this.value);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport const Identity: CanvasMatrix2D = [1, 0, 0, 1, 0, 0];\r\n\r\nexport function copy(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return use([\r\n    input[0],\r\n    input[1],\r\n    input[2],\r\n    input[3],\r\n    input[4],\r\n    input[5],\r\n  ]);\r\n}\r\n\r\nexport function use(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return new CanvasMatrix2DTransformAPI(input);\r\n}\r\n\r\nexport function transformPoint(point: IInteractionPoint, matrix: CanvasMatrix2D): void {\r\n  point.tx = matrix[0] * point.x + matrix[2] * point.y + matrix[4];\r\n  point.ty = matrix[1] * point.x + matrix[3] * point.y + matrix[5];\r\n}\r\n\r\nconst radFactor: number = Math.PI / 180;\r\nexport function rads(degrees: number): number {\r\n  const normalized = normalize(degrees, 360);\r\n  return normalized * radFactor;\r\n}\r\n\r\nconst degFactor: number = 1 / radFactor;\r\nconst PI_2: number = Math.PI * 2;\r\nexport function degs(radians: number): number {\r\n  const normalized = normalize(radians, PI_2);\r\n  return normalized * degFactor;\r\n}\r\n\r\nfunction normalize(input: number, factor: number): number {\r\n  return ((input % factor) + factor) % factor;\r\n}\r\n\r\nexport enum StagePosition {\r\n  BottomCenter,\r\n  BottomCenterLeft,\r\n  BottomCenterRight,\r\n  BottomLeft,\r\n  BottomRight,\r\n  CenterLeft,\r\n  Center,\r\n  CenterRight,\r\n  Left,\r\n  Right,\r\n  TopCenter,\r\n  TopCenterLeft,\r\n  TopCenterRight,\r\n  TopLeft,\r\n  TopRight,\r\n}\r\n\r\nexport function align(sprite: ISprite, position: StagePosition) {\r\n  if (!sprite.container) {\r\n    throw new Error(\"Sprite cannot be aligned because it was not added to a stage.\");\r\n  }\r\n\r\n  const stage: IStage = sprite.container as any;\r\n\r\n  let widthFactor = 0;\r\n  switch (position) {\r\n    case StagePosition.BottomCenterLeft:\r\n    case StagePosition.CenterLeft:\r\n    case StagePosition.TopCenterLeft:\r\n      widthFactor = 0.25;\r\n      break;\r\n    case StagePosition.BottomCenter:\r\n    case StagePosition.Center:\r\n    case StagePosition.TopCenter:\r\n      widthFactor = 0.5;\r\n      break;\r\n    case StagePosition.BottomCenterRight:\r\n    case StagePosition.CenterRight:\r\n    case StagePosition.TopCenterRight:\r\n      widthFactor = 0.75;\r\n      break;\r\n    case StagePosition.BottomRight:\r\n    case StagePosition.Right:\r\n    case StagePosition.TopRight:\r\n      widthFactor = 1;\r\n      break;\r\n  }\r\n\r\n  let heightFactor = 0;\r\n  switch (position) {\r\n    case StagePosition.Center:\r\n    case StagePosition.CenterLeft:\r\n    case StagePosition.CenterRight:\r\n    case StagePosition.Left:\r\n    case StagePosition.Right:\r\n      heightFactor = 0.5;\r\n      break;\r\n    case StagePosition.BottomCenter:\r\n    case StagePosition.BottomCenterLeft:\r\n    case StagePosition.BottomCenterRight:\r\n    case StagePosition.BottomLeft:\r\n    case StagePosition.BottomRight:\r\n      heightFactor = 1;\r\n      break;\r\n  }\r\n\r\n  return copy(Identity)\r\n    .translate(stage.canvas.width * widthFactor, stage.canvas.height * heightFactor)\r\n    .translate(-sprite.width * widthFactor, -sprite.height * heightFactor);\r\n}\r\n","export interface ISpriteSheet {\r\n  kind: SpriteSheetKind;\r\n}\r\n\r\nexport enum SpriteSheetKind {\r\n  JSON,\r\n  JSON_TP_Hash,\r\n  JSON_TP_Array,\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetSizeShort {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSizeShort;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetJSONHash extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Hash;\r\n  frames: {\r\n    [frame: string]: {\r\n      frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      rotated: boolean;\r\n      trimmed: boolean;\r\n      spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      sourceSize: ISpriteSheetSizeShort;\r\n    };\r\n  };\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFileName {\r\n  filename: string;\r\n}\r\n\r\nexport interface ISpriteSheetJSONArray extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Array;\r\n  frames: Array<{\r\n    filename: string;\r\n    frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    rotated: boolean;\r\n    trimmed: boolean;\r\n    spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    sourceSize: ISpriteSheetSizeShort;\r\n  }>;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport type ISpriteSheetJSON = Array<{\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}> & {\r\n  kind: SpriteSheetKind.JSON;\r\n};\r\n\r\nexport async function loadSpriteSheet(url: string | Request, opts?: RequestInit): Promise<ISpriteSheet> {\r\n  const resp = await fetch(url, opts);\r\n  const definition = await resp.json();\r\n  return createSpriteSheet(definition);\r\n}\r\n\r\nexport function createSpriteSheet(definition: any): ISpriteSheet {\r\n  if (Array.isArray(definition)) {\r\n    const result: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n    result.kind = SpriteSheetKind.JSON;\r\n    return result;\r\n  }\r\n  if (!definition.frames) {\r\n    throw new Error(\"Invalid spritesheet format.\");\r\n  }\r\n  if (Array.isArray(definition.frames)) {\r\n    const result: ISpriteSheetJSONArray = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Array,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  } else {\r\n    const result: ISpriteSheetJSONHash = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Hash,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ITextureMap {\r\n  [texture: string]: ImageBitmap;\r\n}\r\n\r\nexport async function createTextureMap(definitionPromise: Promise<ISpriteSheet>, imgPromise: Promise<ImageBitmap>) {\r\n  const textures: ITextureMap = {};\r\n  const definition = await definitionPromise;\r\n  const img = await imgPromise;\r\n  switch (definition.kind) {\r\n    case SpriteSheetKind.JSON:\r\n      const jsonKind: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n      for (const frame of jsonKind) {\r\n        textures[frame.name] = await createImageBitmap(\r\n          img,\r\n          frame.x,\r\n          frame.y,\r\n          frame.width,\r\n          frame.height,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Array:\r\n      const spritesheetArrayKind: ISpriteSheetJSONArray = definition as ISpriteSheetJSONArray;\r\n      for (const arrayFrame of spritesheetArrayKind.frames) {\r\n        textures[arrayFrame.filename] = await createImageBitmap(\r\n          img,\r\n          arrayFrame.frame.x,\r\n          arrayFrame.frame.y,\r\n          arrayFrame.frame.w,\r\n          arrayFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Hash:\r\n      const spritesheetHashKind: ISpriteSheetJSONHash = definition as ISpriteSheetJSONHash;\r\n      for (const frame of Object.keys(spritesheetHashKind.frames)) {\r\n        const spriteFrame = spritesheetHashKind.frames[frame];\r\n        textures[frame] = await createImageBitmap(\r\n          img,\r\n          spriteFrame.frame.x,\r\n          spriteFrame.frame.y,\r\n          spriteFrame.frame.w,\r\n          spriteFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n  }\r\n  return textures;\r\n}\r\n\r\nexport async function loadImage(url: string | Request, opts?: RequestInit): Promise<ImageBitmap> {\r\n  const res = await fetch(url, opts);\r\n  const blob = await res.blob();\r\n  return createImageBitmap(blob);\r\n}\r\n","import { ISprite } from \"../view/Sprite\";\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrameMap {\r\n  [frame: string]: ISpriteSheetFrame;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSize;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPoint & ISpriteSheetSize;\r\n  rotated: boolean;\r\n  trimmed: boolean;\r\n  spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSize;\r\n  sourceSize: ISpriteSheetSize;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IInteractionPoint extends IPoint {\r\n  id: string;\r\n  type: \"Touch\" | \"Mouse\";\r\n  down: boolean;\r\n  clicked: boolean;\r\n  captured: boolean;\r\n  active: ISprite;\r\n  hover: ISprite;\r\n  firstDown: boolean;\r\n  tx: number;\r\n  ty: number;\r\n}\r\n\r\nexport interface IPlayable {\r\n  id: string;\r\n  started: number; // timestamp when the media last began playing\r\n  length: number; // media play length timespan\r\n  start: number; // media start time\r\n  end: number; // media end time\r\n  loop: boolean; // does this media loop?\r\n  state: PlayState; // self explainatory\r\n  loaded: Promise<void>; // this should be a promise that resolves once the audio has loaded\r\n  play(): this;\r\n  pause(): this;\r\n  stop(): this;\r\n  setVolume(volume: number); // accepts number [0. 1]\r\n}\r\n\r\nexport interface IAudio extends IPlayable {\r\n  gain: GainNode; // controls volume\r\n  source: AudioBuffer; // is null until the audioBuffer is loaded\r\n  destination: AudioNode;\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n}\r\n\r\nexport interface ISoundSpriteSheet {\r\n  resources: string[];\r\n  spritemap: {\r\n    [name: string]: ISoundSpriteSheetTexture;\r\n  };\r\n}\r\n\r\nexport interface ISoundSpriteSheetTexture {\r\n  start: number;\r\n  end: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport interface IAudioProps extends IPlayableProps {\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n  name: string; // determines the name of the audio clip\r\n}\r\n\r\nexport interface IPlayableProps {\r\n  id: string;\r\n  source: Promise<Response>;\r\n  texture: string; // this should be name of the texture in the spritesheet\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IPadding {\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  bottom: number;\r\n}\r\n\r\n/**\r\n * Sort by z level in ascending order.\r\n */\r\nexport function zSort(left: ISprite, right: ISprite): number {\r\n  return left.z - right.z;\r\n}\r\n\r\nexport enum TextAlign {\r\n  \"left\" = \"left\",\r\n  \"right\" = \"right\",\r\n  \"center\" = \"center\",\r\n  \"start\" = \"start\",\r\n  \"end\" = \"end\",\r\n}\r\n\r\nexport enum TextBaseline {\r\n  \"top\" = \"top\",\r\n  \"hanging\" = \"hanging\",\r\n  \"middle\" = \"middle\",\r\n  \"alphabetic\" = \"alphabetic\",\r\n  \"ideographic\" = \"ideographic\",\r\n  \"bottom\" = \"bottom\",\r\n}\r\n\r\nexport enum PlayState {\r\n  Playing,\r\n    Paused,\r\n    Stopped,\r\n}\r\n\r\nexport enum Cursor {\r\n  \"auto\" = \"auto\",\r\n \"default\" = \"default\",\r\n  \"none\" = \"none\",\r\n  \"context-menu\" = \"context-menu\",\r\n  \"help\" = \"help\",\r\n  \"pointer\" = \"pointer\",\r\n  \"progress\" = \"progress\",\r\n  \"wait\" = \"wait\",\r\n  \"cell\" = \"cell\",\r\n  \"crosshair\" = \"crosshair\",\r\n  \"text\" = \"text\",\r\n  \"vertical-text\" = \"vertical-text\",\r\n  \"alias\" = \"alias\",\r\n  \"copy\" = \"copy\",\r\n  \"move\" = \"move\",\r\n  \"no-drop\" = \"no-drop\",\r\n  \"not-allowed\" = \"not-allowed\",\r\n  \"e-resize\" = \"e-resize\",\r\n  \"n-resize\" = \"n-resize\",\r\n  \"ne-resize\" = \"ne-resize\",\r\n  \"nw-resize\" = \"nw-resize\",\r\n  \"s-resize\" = \"s-resize\",\r\n  \"se-resize\" = \"se-resize\",\r\n  \"sw-resize\" = \"sw-resize\",\r\n  \"w-resize\" = \"w-resize\",\r\n  \"ew-resize\" = \"ew-resize\",\r\n  \"ns-resize\" = \"ns-resize\",\r\n  \"nesw-resize\" = \"nesw-resize\",\r\n  \"nwse-resize\" = \"nwse-resize\",\r\n  \"col-resize\" = \"col-resize\",\r\n  \"row-resize\" = \"row-resize\",\r\n  \"all-scroll\" = \"all-scroll\",\r\n  \"zoom-in\" = \"zoom-in\",\r\n  \"zoom-out\" = \"zoom-out\",\r\n  \"grab\" = \"grab\",\r\n  \"grabbing\" = \"grabbing\",\r\n}\r\n\r\nexport interface ISpritePosition {\r\n  x?: number;\r\n  y?: number;\r\n  s?: number;\r\n  sx?: number;\r\n  sy?: number;\r\n  r?: number;\r\n  cx?: number;\r\n  cy?: number;\r\n}\r\n\r\nexport enum SpriteType {\r\n  Button,\r\n  Character,\r\n  Checkbox,\r\n  Close,\r\n  Label,\r\n  Panel,\r\n  Slider,\r\n  Textbox,\r\n  TextInput,\r\n  Sprite,\r\n}\r\n\r\nexport interface IKeyable {\r\n  key: string;\r\n}\r\n","import { IKeyDownEvent } from \"../events\";\r\nimport { IPadding, SpriteType, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport enum SelectionState {\r\n  Selection,\r\n  Caret,\r\n}\r\n\r\nexport interface ITextInput extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  selectionState: SelectionState;\r\n  caretIndex: number;\r\n  selectionEnd: number;\r\n  caretX: number;\r\n  padding: IPadding;\r\n  frameCount: number;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ITextInputProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class TextInput extends Sprite implements ITextInput {\r\n  public readonly type: SpriteType = SpriteType.TextInput;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public caretIndex: number = 0;\r\n  public caretX: number = 0;\r\n  public textScroll: number = 0;\r\n  public selectionState: SelectionState = SelectionState.Caret;\r\n  public padding: IPadding = {\r\n    bottom: 2,\r\n    left: 2,\r\n    right: 2,\r\n    top: 2,\r\n  };\r\n  public selectionEnd: number = -1;\r\n  public frameCount: number = 0;\r\n  private showCaret: boolean = true;\r\n  private activeMidPattern: CanvasPattern = null;\r\n  private inactiveMidPattern: CanvasPattern = null;\r\n\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.width = props.width || this.width;\r\n    this.height = props.height || this.height;\r\n  }\r\n\r\n  public update(): void {\r\n    // noOp\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    const left = this.active ? this.textures.Active_Left : this.textures.Inactive_Left;\r\n    const right = this.active ? this.textures.Active_Right : this.textures.Inactive_Right;\r\n    const pattern = this.active ? this.textures.Active_Mid : this.textures.Inactive_Mid;\r\n    ctx.drawImage(this.textures.Left_Cap_Active, 0, 0);\r\n    ctx.drawImage(left, 0, 0);\r\n    ctx.drawImage(right, this.width - right.width, 0);\r\n    ctx.fillStyle = this.active ? this.activeMidPattern : this.inactiveMidPattern;\r\n    ctx.fillRect(\r\n      left.width,\r\n      0,\r\n      this.width - left.width - right.width,\r\n      pattern.height,\r\n    );\r\n\r\n    // clip\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.top,\r\n      this.width - this.padding.right - this.padding.left,\r\n      this.width - this.padding.bottom,\r\n    );\r\n    ctx.clip();\r\n\r\n    // draw text\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textBaseline = TextBaseline.top;\r\n    ctx.fillText(this.text, this.textScroll + this.padding.left, 0);\r\n\r\n    if (this.showCaret) {\r\n      const caretX = this.textScroll + this.padding.left + this.caretIndex;\r\n      ctx.beginPath();\r\n      ctx.moveTo(caretX, this.padding.top);\r\n      ctx.lineTo(caretX, this.height - this.padding.bottom);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n\r\n  public keyDown(e: IKeyDownEvent) {\r\n    const isSelection = this.selectionState === SelectionState.Selection;\r\n    const end = isSelection ? this.selectionEnd : this.caretIndex;\r\n    if (e.key.codePointAt(1) === void 0) {\r\n      this.text = this.text.slice(0, this.caretIndex) + e.key + this.text.slice(end);\r\n      this.selectionState = SelectionState.Caret;\r\n      super.keyDown(e);\r\n      return;\r\n    }\r\n\r\n    switch (e.key) {\r\n      case \"Backspace\":\r\n        this.text = isSelection\r\n          ? this.text.slice(0, this.caretIndex) + this.text.slice(end)\r\n          : this.text.slice(0, this.caretIndex - 1) + this.text.slice(this.caretIndex);\r\n    }\r\n    super.keyDown(e);\r\n  }\r\n}\r\n","import { IContainer } from \"../view/Container\";\r\nimport { IInteractionManager } from \"../view/InteractionManager\";\r\nimport { ISprite } from \"../view/Sprite\";\r\n\r\nexport type EventCallback<T> = (events: T) => void;\r\n\r\nexport interface ISenpaiEvent {\r\n  eventType: string;\r\n  stage: IContainer;\r\n  source: ISprite | IInteractionManager;\r\n}\r\n\r\nexport interface IValueChangeEvent<T> extends ISenpaiEvent {\r\n  eventType: \"ValueChange\";\r\n  property: string;\r\n  value: T;\r\n  previousValue: T;\r\n}\r\n\r\nexport interface IDisposer {\r\n  dispose: () => void;\r\n}\r\n\r\nexport class EventEmitter<T extends ISenpaiEvent> {\r\n  public callbacks: Array<EventCallback<T>> = [];\r\n  public clear() {\r\n    this.callbacks = [];\r\n  }\r\n  public listen(callback: EventCallback<T>): IDisposer {\r\n    this.callbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        if (this.callbacks.includes(callback)) {\r\n          this.callbacks.splice(\r\n            this.callbacks.indexOf(callback),\r\n            1,\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n  public promise(): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const disposer = this.listen((event) => {\r\n        disposer.dispose();\r\n        resolve(event);\r\n      });\r\n    });\r\n  }\r\n  public once(callback: EventCallback<T>): IDisposer {\r\n    const disposer = this.listen((events: T) => {\r\n      callback(events);\r\n      disposer.dispose();\r\n    });\r\n    return disposer;\r\n  }\r\n\r\n  public emit(events: T): void {\r\n    for (const callback of this.callbacks.slice()) {\r\n      callback(events);\r\n    }\r\n  }\r\n}\r\n","import * as eases from \"../ease\";\r\nimport {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n  IPointClickEvent,\r\n  IPointDownEvent,\r\n  IPointEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  IValueChangeEvent,\r\n} from \"../events\";\r\nimport { ISpriteLoadedEvent } from \"../events/SpriteEvents\";\r\nimport { CanvasMatrix2D, copy, Identity, transformPoint, use } from \"../matrix\";\r\nimport { createTextureMap, ISpriteSheet, ITextureMap, loadImage, loadSpriteSheet } from \"../spritesheet\";\r\nimport { Cursor, IInteractionPoint, ISize, ISpritePosition, SpriteType } from \"../util\";\r\nimport { IContainer } from \"./Container\";\r\n\r\n// import { IStage } from \"./Stage\";\r\n\r\nexport interface ISprite extends ISize {\r\n  id: string;\r\n  parent: ISprite;\r\n  container: IContainer;\r\n  readonly type: SpriteType;\r\n\r\n  // position\r\n  previousPosition: CanvasMatrix2D;\r\n  position: CanvasMatrix2D;\r\n  inverse: CanvasMatrix2D;\r\n  alpha: number;\r\n  interpolatedAlpha: number;\r\n  previousAlpha: number;\r\n  z: number;\r\n\r\n  // animation\r\n  textures: ITextureMap;\r\n  lastInterpolated: number;\r\n  interpolatedPosition: CanvasMatrix2D;\r\n  animationStart: number;\r\n  animationLength: number;\r\n  wait: number;\r\n  // stage properties\r\n\r\n  active: boolean;\r\n  hover: boolean;\r\n  down: boolean;\r\n  focused: boolean;\r\n  tabIndex: number;\r\n\r\n  cursor: Cursor;\r\n  loaded: Promise<void>;\r\n\r\n  texture: string;\r\n\r\n  // events\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointDownEvent: EventEmitter<IPointEvent>;\r\n  pointClickEvent: EventEmitter<IPointClickEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n  loadedEvent: EventEmitter<ISpriteLoadedEvent>;\r\n\r\n  textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;\r\n\r\n  // this is set by the over function\r\n  ease(ratio: number): number;\r\n\r\n  broadPhase(point: IInteractionPoint): boolean;\r\n  narrowPhase(point: IInteractionPoint): ISprite;\r\n  isHovering(point: IInteractionPoint, now: number): ISprite;\r\n  isFocused(): ISprite;\r\n  pointCollision(point: IInteractionPoint): boolean;\r\n  setTexture(texture: string): this;\r\n  over(timespan: number): this;\r\n  waitFor(timespan: number): this;\r\n  use(ease: eases.EaseFunc): this;\r\n  movePosition(position: ISpritePosition): this;\r\n  move(position: CanvasMatrix2D): this;\r\n  setZ(z: number): this;\r\n  visible(alpha: number): this;\r\n  interpolate(now: number): void;\r\n  skipAnimation(now: number): boolean;\r\n  update(): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n  keyDown(event: IKeyDownEvent): void;\r\n  keyUp(event: IKeyUpEvent): void;\r\n}\r\n\r\nexport interface ISpriteProps {\r\n  id: string;\r\n  position: CanvasMatrix2D;\r\n  textures?: ITextureMap;\r\n  alpha?: number;\r\n  z?: number;\r\n  source: Promise<ImageBitmap>;\r\n  definition: Promise<ISpriteSheet>;\r\n}\r\n\r\nexport class Sprite implements ISprite {\r\n  public id: string = \"\";\r\n  public type: SpriteType = SpriteType.Sprite;\r\n  public position: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public previousPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public interpolatedPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public inverse: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public alpha: number = 1;\r\n  public interpolatedAlpha: number = 1;\r\n  public previousAlpha: number = 1;\r\n  public z: number = 0;\r\n  public parent: ISprite = null;\r\n  public container: IContainer = null;\r\n  public wait: number = 0;\r\n\r\n  public lastInterpolated: number = 0;\r\n  public animationStart: number = 0;\r\n  public ease = eases.easeLinear;\r\n  public cursor: Cursor = Cursor.auto;\r\n  public animationLength: number = 0;\r\n  public active: boolean = false;\r\n  public hover: boolean = false;\r\n  public down: boolean = false;\r\n  public textures: ITextureMap = {};\r\n  public texture: string;\r\n  public loaded: Promise<void> = null;\r\n  public focused: boolean = false;\r\n  public tabIndex: number = 0;\r\n\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n  public pointClickEvent: EventEmitter<IPointClickEvent> = new EventEmitter<IPointClickEvent>();\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n  public loadedEvent: EventEmitter<ISpriteLoadedEvent> = new EventEmitter<ISpriteLoadedEvent>();\r\n\r\n  public textureChangeEvent: EventEmitter<IValueChangeEvent<string>> = new EventEmitter<IValueChangeEvent<string>>();\r\n\r\n  constructor(props: ISpriteProps) {\r\n    this.id = props.id;\r\n    const position: CanvasMatrix2D = props.position || Identity.slice() as CanvasMatrix2D;\r\n    this.textures = props.textures ? props.textures : this.textures;\r\n    use(position)\r\n      .setTo(this.position)\r\n      .setTo(this.previousPosition)\r\n      .setTo(this.interpolatedPosition);\r\n\r\n    if (props.hasOwnProperty(\"alpha\")) {\r\n      this.previousAlpha = this.alpha = this.interpolatedAlpha = props.alpha;\r\n    }\r\n    if (props.hasOwnProperty(\"z\")) {\r\n      this.z = props.z;\r\n    }\r\n    if (props.source && props.definition) {\r\n      this.loadTexture(\r\n        props.definition,\r\n        props.source,\r\n      );\r\n    }\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    return point.tx >= 0 && point.tx <= this.width && point.ty >= 0 && point.ty <= this.height;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    return true;\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    this.interpolate(now);\r\n\r\n    transformPoint(point, this.inverse);\r\n    if (this.broadPhase(point)) {\r\n      return this.narrowPhase(point);\r\n    }\r\n  }\r\n\r\n  public isFocused(): ISprite {\r\n    return this.focused ? this : null;\r\n  }\r\n\r\n  public movePosition(position: ISpritePosition): this {\r\n\r\n    use(this.previousPosition).set(this.interpolatedPosition);\r\n    const sx = position.sx || position.sx === 0 ? position.sx : position.s;\r\n    const sy = position.sy || position.sy === 0 ? position.sy : position.s;\r\n    use(this.position)\r\n      .set(Identity)\r\n      .translate(position.x || 0, position.y || 0)\r\n      .rotate(position.r || 0)\r\n      .scale(sx === 0 ? 0 : sx || 1, sy === 0 ? 0 : sy || 1)\r\n      .translate(position.cx ? -position.cx : 0, position.cy ? -position.cy : 0);\r\n    return this;\r\n  }\r\n\r\n  public move(position: CanvasMatrix2D): this {\r\n    for (let i = 0; i < 6; i++) {\r\n      if (!Number.isFinite(position[i])) {\r\n        throw new Error(`Invalid Canvas Matrix for sprite ${this.id}, property ${i} is not a finite value.`);\r\n      }\r\n    }\r\n    use(this.previousPosition).set(this.interpolatedPosition);\r\n    use(this.position).set(position);\r\n    return this;\r\n  }\r\n\r\n  public visible(alpha: number = 1): this {\r\n    if (!Number.isFinite(alpha)) {\r\n      throw new Error(\r\n        `Cannot set alpha value on sprite ${this.id}: ${alpha} is not finite. This results in undefined behavior.`,\r\n      );\r\n    }\r\n    if (alpha < 0 || alpha > 1) {\r\n      throw new Error(\r\n        `Cannot set alpha value on sprite ${this.id}: ${alpha} is not within range [0, 1].`,\r\n      );\r\n    }\r\n    this.previousAlpha = this.interpolatedAlpha;\r\n    this.alpha = alpha;\r\n    return this;\r\n  }\r\n\r\n  public setZ(z: number): this {\r\n    if (!Number.isFinite(z)) {\r\n      throw new Error(\r\n        `Cannot set Z value on sprite ${this.id}: ${z} is not finite. This results in undefined behavior.`,\r\n      );\r\n    }\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  public over(timespan: number): this {\r\n    if (!Number.isFinite(timespan)) {\r\n      throw new Error(`Timespan is not finite: received value ${timespan}`);\r\n    }\r\n    this.animationLength = timespan;\r\n    this.wait = 0;\r\n    return this;\r\n  }\r\n\r\n  public use(ease: eases.EaseFunc): this {\r\n    if (typeof ease !== \"function\") {\r\n      throw new Error(`Ease is not a function: received value ${ease}`);\r\n    }\r\n    this.ease = ease;\r\n    return this;\r\n  }\r\n\r\n  public run(): this {\r\n    this.animationStart = Date.now();\r\n    return this;\r\n  }\r\n\r\n  public waitFor(timespan: number): this {\r\n    this.wait = timespan;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = now < this.animationLength + this.animationStart;\r\n    this.animationStart = now - this.animationLength;\r\n    return result;\r\n  }\r\n\r\n  public update(): void {\r\n    // No op\r\n  }\r\n  public interpolate(now: number): void {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    this.lastInterpolated = now;\r\n\r\n    const progress = now - (this.animationStart + this.wait);\r\n\r\n    const ratio = (progress >= this.animationLength)\r\n        ? 1\r\n        : (progress <= 0 ? 0 : this.ease(progress / this.animationLength));\r\n\r\n    if (ratio === 1) {\r\n      this.interpolatedPosition[0] = this.position[0];\r\n      this.interpolatedPosition[1] = this.position[1];\r\n      this.interpolatedPosition[2] = this.position[2];\r\n      this.interpolatedPosition[3] = this.position[3];\r\n      this.interpolatedPosition[4] = this.position[4];\r\n      this.interpolatedPosition[5] = this.position[5];\r\n      this.interpolatedAlpha = this.alpha;\r\n    } else if (ratio === 0) {\r\n      this.interpolatedPosition[0] = this.previousPosition[0];\r\n      this.interpolatedPosition[1] = this.previousPosition[1];\r\n      this.interpolatedPosition[2] = this.previousPosition[2];\r\n      this.interpolatedPosition[3] = this.previousPosition[3];\r\n      this.interpolatedPosition[4] = this.previousPosition[4];\r\n      this.interpolatedPosition[5] = this.previousPosition[5];\r\n      this.interpolatedAlpha = this.previousAlpha;\r\n    } else {\r\n      for (let j = 0; j < 6; j++) {\r\n        this.interpolatedPosition[j] = this.previousPosition[j]\r\n          + ratio * (this.position[j] - this.previousPosition[j]);\r\n      }\r\n      this.interpolatedAlpha = this.previousAlpha + ratio * (this.alpha - this.previousAlpha);\r\n    }\r\n\r\n    copy(this.interpolatedPosition)\r\n      .inverse()\r\n      .setTo(this.inverse);\r\n\r\n    if (this.parent) {\r\n      // assert the parent is properly moved\r\n      this.parent.interpolate(now);\r\n\r\n      copy(this.parent.inverse)\r\n        .transform(this.inverse)\r\n        .setTo(this.inverse);\r\n    }\r\n  }\r\n  public setTexture(texture: string): this {\r\n    const oldTexture = this.texture;\r\n    this.texture = texture;\r\n    this.width = this.textures[this.texture].width;\r\n    this.height = this.textures[this.texture].height;\r\n\r\n    if (oldTexture !== this.texture) {\r\n      // this.emit(\"texture-change\", this.texture); // TODO\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures[this.texture], 0, 0);\r\n  }\r\n\r\n  public keyDown(event: IKeyDownEvent): void {\r\n    this.keyDownEvent.emit(event);\r\n  }\r\n\r\n  public keyUp(event: IKeyUpEvent): void {\r\n    this.keyUpEvent.emit(event);\r\n  }\r\n\r\n  private async loadTexture(defintion: Promise<ISpriteSheet>, source: Promise<ImageBitmap>): Promise<void> {\r\n    this.textures = await createTextureMap(defintion, source);\r\n    this.loadedEvent.emit({\r\n      definition: await defintion,\r\n      eventType: \"SpriteLoaded\",\r\n      source: this,\r\n      spriteSource: await source,\r\n      stage: this.container,\r\n    });\r\n  }\r\n}\r\n","import { Cursor, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IButton extends ISprite {\r\n  selected: boolean;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  text: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface IButtonProps extends ISpriteProps {\r\n  selected?: boolean;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  text?: string;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Button extends Sprite implements IButton {\r\n  public readonly type: SpriteType = SpriteType.Button;\r\n  public selected: boolean = false;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public text: string =  \"\";\r\n  public textAlign: TextAlign = TextAlign.center;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public cursor: Cursor = Cursor.pointer;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props);\r\n    this.selected = props.selected || false;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.text = props.text || this.text;\r\n    this.textAlign = props.textAlign;\r\n    this.textBaseline = props.textBaseline;\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const selected = this.selected ? \"Selected\" : \"Unselected\";\r\n    this.setTexture(`${active}_${hover}_${selected}`);\r\n\r\n    super.update();\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    ctx.textAlign = TextAlign.center;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICharacterProps extends ISpriteProps {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport interface ICharacter extends ISprite {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport class Character extends Sprite implements ICharacter {\r\n  public readonly type: SpriteType = SpriteType.Character;\r\n  public name: string = \"\";\r\n  public displayName: string = \"\";\r\n  public color: string = \"\";\r\n  constructor(props: ICharacterProps) {\r\n    super(props);\r\n    this.displayName = props.displayName;\r\n    this.color = props.color;\r\n  }\r\n}\r\n","\r\nimport { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport {\r\n\r\n  Cursor,\r\n  IInteractionPoint,\r\n  SpriteType,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICheckbox extends ISprite {\r\n  checked: boolean;\r\n  text: string;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>>;\r\n\r\n  setText(text: string): this;\r\n  toggle(): this;\r\n}\r\n\r\nexport interface ICheckboxProps extends ISpriteProps {\r\n  checked?: boolean;\r\n  text?: string;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Checkbox extends Sprite implements ICheckbox {\r\n  public readonly type: SpriteType = SpriteType.Checkbox;\r\n  public checked: boolean = false;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>> = new EventEmitter<IValueChangeEvent<boolean>>();\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n    this.checked = Boolean(props.checked) || false;\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n  }\r\n\r\n  public toggle(): this {\r\n    const previousValue = this.checked;\r\n    this.checked = !this.checked;\r\n    this.checkedChangeEvent.emit({\r\n      eventType: \"ValueChange\",\r\n      previousValue,\r\n      property: \"checked\",\r\n      source: this,\r\n      stage: this.container,\r\n      value: this.checked,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    if (point.clicked && point.active === this) {\r\n      this.toggle();\r\n    }\r\n    return super.pointCollision(point);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.width * 1.1, this.height / 2);\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const checked = this.checked ? \"Checked\" : \"Unchecked\";\r\n    this.setTexture(`${active}_${hover}_${checked}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { Cursor, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IClose extends ISprite {\r\n\r\n}\r\n\r\nexport interface ICloseProps extends ISpriteProps {\r\n\r\n}\r\n\r\nexport class Close extends Sprite implements IClose {\r\n  public readonly type: SpriteType = SpriteType.Close;\r\n\r\n  constructor(props: ICloseProps) {\r\n    super(props);\r\n  }\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    this.setTexture(`${active}_${hover}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n}\r\n","import { IInteractionPoint, IPlayable } from \"../util\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IContainer {\r\n  sprites: ISprite[];\r\n  playables: IPlayable[];\r\n  points: IInteractionPoint[];\r\n  audioContext: AudioContext;\r\n\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  addPlayable(sprite: IPlayable): this;\r\n  removePlayable(sprite: IPlayable): this;\r\n  addPoint(point: IInteractionPoint): this;\r\n  removePoint(point: IInteractionPoint): this;\r\n  getSpriteByID(id: string): ISprite | null;\r\n  getPlayableByID(id: string): IPlayable | null;\r\n  getPointByID(id: string): IInteractionPoint | null;\r\n}\r\n\r\nexport interface IContainerProps {\r\n  audioContext: AudioContext;\r\n}\r\n\r\nexport class Container implements IContainer {\r\n\r\n  public sprites: ISprite[] = [];\r\n  public playables: IPlayable[] = [];\r\n  public points: IInteractionPoint[] = [];\r\n  public audioContext: AudioContext = null;\r\n\r\n  constructor(props: IContainerProps) {\r\n    this.audioContext = props.audioContext;\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    if (!this.sprites.includes(sprite)) {\r\n      this.sprites.push(sprite);\r\n      sprite.container = this;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.container = null;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPlayable(sprite: IPlayable): this {\r\n    if (!this.playables.includes(sprite)) {\r\n      this.playables.push(sprite);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.connect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePlayable(sprite: IPlayable): this {\r\n    if (this.playables.includes(sprite)) {\r\n      this.playables.splice(this.playables.indexOf(sprite), 1);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.disconnect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPoint(point: IInteractionPoint): this {\r\n    if (!this.points.includes(point)) {\r\n      this.points.push(point);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePoint(point: IInteractionPoint): this {\r\n    if (this.points.includes(point)) {\r\n      this.points.splice(this.points.indexOf(point), 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public getSpriteByID(id: string): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPointByID(id: string): IInteractionPoint {\r\n    for (const sprite of this.points) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPlayableByID(id: string): IPlayable {\r\n    for (const sprite of this.playables) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyUpEvent,\r\n  IMouseDownEvent,\r\n  IMouseMoveEvent,\r\n  IMouseUpEvent,\r\n  IPointDownEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  ITouchCancelEvent,\r\n  ITouchEndEvent,\r\n  ITouchMoveEvent,\r\n  ITouchStartEvent,\r\n} from \"../events\";\r\nimport { IInteractionPoint, IKeyable, SpriteType, zSort } from \"../util\";\r\nimport { Container, IContainer, IContainerProps } from \"./Container\";\r\nimport { IPanel } from \"./Panel\";\r\nimport { ISprite, Sprite } from \"./Sprite\";\r\n\r\ninterface IInteractionPointIndex {\r\n  [id: number]: IInteractionPoint;\r\n}\r\n\r\ninterface IKeyIndex {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport interface IInteractionManager extends IContainer {\r\n  canvas: HTMLCanvasElement;\r\n  mousePoint: IInteractionPoint;\r\n  touchPointIndex: IInteractionPointIndex;\r\n  keyIndex: IKeyIndex;\r\n\r\n  pointDownEvent: EventEmitter<IPointDownEvent>;\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n\r\n  mouseDownEvent: EventEmitter<IMouseDownEvent>;\r\n  mouseUpEvent: EventEmitter<IMouseUpEvent>;\r\n  mouseMoveEvent: EventEmitter<IMouseMoveEvent>;\r\n\r\n  touchCancelEvent: EventEmitter<ITouchCancelEvent>;\r\n  touchEndEvent: EventEmitter<ITouchEndEvent>;\r\n  touchMoveEvent: EventEmitter<ITouchMoveEvent>;\r\n  touchStartEvent: EventEmitter<ITouchStartEvent>;\r\n\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n\r\n  hookEvents(): void;\r\n  dispose(): void;\r\n  createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint;\r\n  addTouchPoint(touch: Touch): IInteractionPoint;\r\n  removeTouchPoint(touch: Touch): void;\r\n  pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n\r\n  // high level events\r\n  mouseDown(event: MouseEvent): void;\r\n  mouseUp(event: MouseEvent): void;\r\n  mouseMove(event: MouseEvent): void;\r\n  touchStart(event: TouchEvent): void;\r\n  touchEnd(event: TouchEvent): void;\r\n  touchMove(event: TouchEvent): void;\r\n  touchCancel(event: TouchEvent): void;\r\n\r\n  keyDown(event: KeyboardEvent | IKeyable): void;\r\n  keyUp(event: KeyboardEvent | IKeyable): void;\r\n\r\n  setFocus(target: ISprite): void;\r\n  getFocusedSprite(): void;\r\n}\r\n\r\ninterface IInteractionPointEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: MouseEvent | TouchEvent) => void;\r\n}\r\ninterface IKeyboardEvent {\r\n  target: HTMLElement;\r\n  event: string;\r\n  listener: (e: KeyboardEvent) => void;\r\n}\r\n\r\nexport interface IInteractionManagerProps extends IContainerProps {\r\n  canvas: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class InteractionManager extends Container implements IInteractionManager {\r\n  public canvas: HTMLCanvasElement = null;\r\n  public ctx: CanvasRenderingContext2D = null;\r\n  public touchPointIndex: IInteractionPointIndex = {};\r\n  public keyIndex: IKeyIndex = {};\r\n  public mousePoint: IInteractionPoint = {\r\n    active: null,\r\n    captured: false,\r\n    clicked: false,\r\n    down: false,\r\n    firstDown: false,\r\n    hover: null,\r\n    id: \"mouse\",\r\n    tx: 0,\r\n    ty: 0,\r\n    type: \"Mouse\",\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n\r\n  public mouseDownEvent: EventEmitter<IMouseDownEvent> = new EventEmitter<IMouseDownEvent>();\r\n  public mouseUpEvent: EventEmitter<IMouseUpEvent> = new EventEmitter<IMouseUpEvent>();\r\n  public mouseMoveEvent: EventEmitter<IMouseMoveEvent> = new EventEmitter<IMouseMoveEvent>();\r\n\r\n  public touchCancelEvent: EventEmitter<ITouchCancelEvent> = new EventEmitter<ITouchCancelEvent>();\r\n  public touchEndEvent: EventEmitter<ITouchEndEvent> = new EventEmitter<ITouchEndEvent>();\r\n  public touchMoveEvent: EventEmitter<ITouchMoveEvent> = new EventEmitter<ITouchMoveEvent>();\r\n  public touchStartEvent: EventEmitter<ITouchStartEvent> = new EventEmitter<ITouchStartEvent>();\r\n\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n\r\n  private events: IInteractionPointEvent[] = [\r\n    { target: null, event: \"mousedown\", listener: e => this.mouseDown(e as MouseEvent) },\r\n    { target: document.body, event: \"mouseup\", listener: e => this.mouseUp(e as MouseEvent) },\r\n    { target: null, event: \"mousemove\", listener: e => this.mouseMove(e as MouseEvent) },\r\n    { target: null, event: \"touchstart\", listener: e => this.touchStart(e as TouchEvent) },\r\n    { target: document.body, event: \"touchend\", listener: e => this.touchEnd(e as TouchEvent) },\r\n    { target: null, event: \"touchmove\", listener: e => this.touchMove(e as TouchEvent) },\r\n    { target: document.body, event: \"touchcancel\", listener: e => this.touchCancel(e as TouchEvent) },\r\n  ];\r\n  private keyboardEvents: IKeyboardEvent[] = [\r\n    { target: document.body, event: \"keydown\", listener: e => this.keyDown(e as KeyboardEvent) },\r\n    { target: document.body, event: \"keyup\", listener: e => this.keyUp(e as KeyboardEvent) },\r\n  ];\r\n\r\n  constructor(props: IInteractionManagerProps) {\r\n    super(props);\r\n    this.canvas = props.canvas;\r\n    if (!this.canvas) {\r\n      this.canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n    this.canvas.width = props.width;\r\n    this.canvas.height = props.height;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.hookEvents();\r\n    this.addPoint(this.mousePoint);\r\n  }\r\n\r\n  public hookEvents(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n    this.keyboardEvents.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .removeEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public mouseDown(event: MouseEvent): void {\r\n    this.mouseDownEvent.emit({\r\n      down: true,\r\n      eventType: \"MouseDown\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n    return this.pointDown(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseUp(event: MouseEvent): void {\r\n    return this.pointUp(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseMove(event: MouseEvent): void {\r\n    return this.pointMove(this.mousePoint, event);\r\n  }\r\n\r\n  public touchStart(event: TouchEvent): void {\r\n    let touch: Touch;\r\n    let point: IInteractionPoint;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchStartEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchStart\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.addTouchPoint(touch);\r\n      this.pointDown(point, touch);\r\n    }\r\n  }\r\n\r\n  public touchEnd(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchEndEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchEnd\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointUp(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchCancel(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchCancelEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchCancel\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: null,\r\n        y: null,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointCancel(point, touch);\r\n      this.removeTouchPoint(touch);\r\n    }\r\n  }\r\n\r\n  public touchMove(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchMoveEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchMove\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.touchPointIndex[touch.identifier];\r\n      this.pointMove(point, touch);\r\n    }\r\n  }\r\n  public pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const alreadyDown = point.down;\r\n    if (!alreadyDown) {\r\n      point.down = true;\r\n      point.firstDown = true;\r\n    }\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    this.pointMove(point, position);\r\n    if (alreadyDown) {\r\n      return;\r\n    }\r\n    if (point.hover) {\r\n      point.active = point.hover;\r\n      point.active.down = true;\r\n      point.active.active = true;\r\n      this.setFocus(point.hover);\r\n      point.active.pointDownEvent.emit({\r\n        down: true,\r\n        eventType: \"PointDown\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.y,\r\n      });\r\n    }\r\n    this.pointDownEvent.emit({\r\n      down: true,\r\n      eventType: \"PointDown\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: point.active,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n    point.firstDown = false; // after this point, the point will not be considered \"just recently pressed\"\r\n  }\r\n\r\n  public pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    let source: ISprite = null;\r\n    this.pointMove(point, position);\r\n    if (!point.down) {\r\n      return;\r\n    }\r\n    point.down = false;\r\n    if (point.active) {\r\n      point.active.down = false;\r\n      point.active.active = false;\r\n      point.active.pointUpEvent.emit({\r\n        down: false,\r\n        eventType: \"PointUp\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.x,\r\n      });\r\n\r\n      if (point.hover === point.active) {\r\n        point.active.pointClickEvent.emit({\r\n          down: false,\r\n          eventType: \"PointClick\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: point.active,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.x,\r\n        });\r\n      }\r\n      source = point.active;\r\n      point.active = null;\r\n    }\r\n\r\n    this.pointUpEvent.emit({\r\n      down: false,\r\n      eventType: \"PointUp\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: source || this,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.x,\r\n    });\r\n}\r\n\r\n  public pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const now = Date.now();\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    point.x = position.clientX - rect.left;\r\n    point.y = position.clientY - rect.top;\r\n\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n    // sprites sorted by ascending z level\r\n    // REASON: Higher z levels are drawn last, so forward-iterating through the\r\n    // array and drawing the sprites will yield the correct result.\r\n    this.sprites.sort(zSort);\r\n\r\n    // find the highest z level sprite the point collides with\r\n    // loop is reversed due to z levels being sorted ascendingly\r\n    let sprite: ISprite;\r\n    let hoveringSprite: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n      hoveringSprite = sprite.isHovering(point, now);\r\n\r\n      if (hoveringSprite) {\r\n        hoveringSprite.hover = true;\r\n        point.hover = hoveringSprite; // this can later be used by pointDown and pointUp\r\n        hoveringSprite.pointCollision(point);\r\n        hoveringSprite.pointMoveEvent.emit({\r\n          down: point.down,\r\n          eventType: \"PointMove\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: sprite,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.y,\r\n        });\r\n        break; // we've found the highest z level sprite the point collides with\r\n      }\r\n    }\r\n    this.pointMoveEvent.emit({\r\n      down: point.down,\r\n      eventType: \"PointMove\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: sprite,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n  }\r\n\r\n  public pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    if (point.active) {\r\n      point.active.active = false;\r\n      point.active = null;\r\n    }\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n  }\r\n\r\n  public createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint {\r\n    const point: IInteractionPoint = {\r\n      active: null,\r\n      captured: false,\r\n      clicked: false,\r\n      down: false,\r\n      firstDown: false,\r\n      hover: null,\r\n      id,\r\n      tx: 0,\r\n      ty: 0,\r\n      type,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    return point;\r\n  }\r\n\r\n  public addTouchPoint(touch: Touch): IInteractionPoint {\r\n    const point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n    this.addPoint(point);\r\n    this.touchPointIndex[touch.identifier] = point;\r\n    return point;\r\n  }\r\n\r\n  public removeTouchPoint(touch: Touch): void {\r\n    const point: IInteractionPoint = this.touchPointIndex[touch.identifier];\r\n    delete this.touchPointIndex[touch.identifier];\r\n    this.removePoint(point);\r\n  }\r\n\r\n  public hoverCheck(now: number): void {\r\n    let point: IInteractionPoint;\r\n    let sprite: ISprite;\r\n\r\n    for (point of this.points) {\r\n      if (point.hover) {\r\n        point.hover.hover = false;\r\n        point.hover = null;\r\n      }\r\n\r\n      for (sprite of this.sprites) {\r\n        if (sprite.isHovering(point, now)) {\r\n          sprite.pointCollision(point);\r\n          point.hover = sprite;\r\n          sprite.hover = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public keyUp(e: KeyboardEvent | IKeyable): void {\r\n    this.keyIndex[e.key] = false;\r\n    const focusedSprite: ISprite = this.getFocusedSprite();\r\n    if (focusedSprite) {\r\n      focusedSprite.keyUp({\r\n        down: false,\r\n        eventType: \"KeyUp\",\r\n        key: e.key,\r\n        source: focusedSprite,\r\n        stage: this,\r\n      });\r\n    }\r\n    this.keyUpEvent.emit({\r\n      down: false,\r\n      eventType: \"KeyUp\",\r\n      key: e.key,\r\n      source: focusedSprite || this,\r\n      stage: this,\r\n    });\r\n  }\r\n\r\n  public keyDown(e: KeyboardEvent | IKeyable): void {\r\n    this.keyIndex[e.key] = false;\r\n    const focusedSprite: ISprite = this.getFocusedSprite();\r\n    if (focusedSprite) {\r\n      focusedSprite.keyDown({\r\n        down: true,\r\n        eventType: \"KeyDown\",\r\n        key: e.key,\r\n        source: focusedSprite,\r\n        stage: this,\r\n      });\r\n    }\r\n    this.keyDownEvent.emit({\r\n      down: true,\r\n      eventType: \"KeyDown\",\r\n      key: e.key,\r\n      source: focusedSprite || this,\r\n      stage: this,\r\n    });\r\n  }\r\n\r\n  public setFocus(target: ISprite): void {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getFocusedSprite(): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      const s: ISprite = sprite.isFocused();\r\n      if (s) {\r\n        return s;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ILabel extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ILabelProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class Label extends Sprite implements ILabel {\r\n  public readonly type: SpriteType = SpriteType.Label;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public textAlign: TextAlign = TextAlign.start;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n\r\n  constructor(props: ILabelProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n  }\r\n\r\n  public update(): void {\r\n    this.height = this.fontSize;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    this.width = tempctx.measureText(this.text).width;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { transformPoint } from \"../matrix\";\r\nimport { IInteractionPoint, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst sortZ = (a: ISprite, b: ISprite): number => a.z - b.z;\r\n\r\nexport interface IPanel extends ISprite {\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  focus(sprite: ISprite): void;\r\n}\r\n\r\nexport interface IPanelProps extends ISpriteProps {}\r\n\r\nexport class Panel extends Sprite implements IPanel {\r\n  public readonly type: SpriteType = SpriteType.Panel;\r\n  private sprites: ISprite[] = [];\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    sprite.parent = this;\r\n    this.sprites.push(sprite);\r\n    return this;\r\n  }\r\n\r\n  public interpolate(now: number) {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    super.interpolate(now);\r\n    for (const sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.parent = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    this.sprites.sort(sortZ);\r\n\r\n    for (const sprite of this.sprites) {\r\n      sprite.down = false;\r\n      sprite.hover = false;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    let sprite: ISprite = null;\r\n    let collision: ISprite = null;\r\n\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n\r\n      // the sprites inverse has already been calculated relative to the parent\r\n      transformPoint(point, sprite.inverse);\r\n\r\n      if (!sprite.broadPhase(point)) {\r\n        continue;\r\n      }\r\n\r\n      collision = sprite.narrowPhase(point);\r\n      if (collision) {\r\n        return collision;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public update(): void {\r\n    this.hover = false;\r\n    for (const sprite of this.sprites) {\r\n      sprite.update();\r\n\r\n      if (sprite.hover) {\r\n        this.hover = sprite.hover;\r\n        this.cursor = sprite.cursor;\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(0, 0, this.width, this.height);\r\n    ctx.clip();\r\n\r\n    for (const sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.transform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha *= sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  public focus(target: ISprite) {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n\r\n  public isFocused(): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.isFocused()) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return super.isFocused();\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    let result: boolean = super.skipAnimation(now);\r\n    for (const sprite of this.sprites) {\r\n      result = sprite.skipAnimation(now) || result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { IAudio, IAudioProps, ISoundSpriteSheet, PlayState } from \"../util\";\r\n\r\nexport interface ISFX extends IAudio {\r\n  loop: false; // it will always be false\r\n}\r\n\r\nexport interface ISFXProps extends IAudioProps {\r\n}\r\n\r\nexport interface ILoadSFXProps {\r\n  name: string;\r\n  texture: string;\r\n}\r\n\r\nexport class SFXSprite implements ISFX {\r\n  public id: string = \"\";\r\n  // fields from IPlayable\r\n  public started: number = 0;\r\n  public length: number = 0;\r\n  public start: number = 0;\r\n  public end: number = 0;\r\n  public loop: false = false;\r\n  public state: PlayState = PlayState.Stopped; // unused\r\n  public loaded: Promise<void>;\r\n\r\n  // fields from IAudio\r\n  public gain: GainNode;\r\n  public source: AudioBuffer;\r\n  public destination: AudioNode;\r\n  public definition: ISoundSpriteSheet;\r\n  public context: AudioContext;\r\n  /**\r\n   * 1. sets all relevant metadata properties from spritesheet\r\n   * 2. creates gain node from context\r\n   * 3. set this.loaded to result of createSource(props.source, props.context);\r\n   * 4. set this.destination\r\n   */\r\n  constructor(props: ISFXProps) {\r\n    this.id = props.id;\r\n    // TODO: 1\r\n    this.context = props.context;\r\n    this.definition = props.definition;\r\n    this.start = this.definition.spritemap[props.texture].start;\r\n    this.end = this.definition.spritemap[props.texture].end;\r\n    this.length = this.end - this.start;\r\n    this.gain = props.context.createGain();\r\n    this.loaded = this.createSource(props.source, props.context);\r\n    this.destination = props.context.destination;\r\n  }\r\n\r\n  // calls this.loaded.then(e => this.createPlayInstance());\r\n  public play(): this {\r\n    this.loaded.then(e => this.createPlayInstance());\r\n    return this;\r\n  }\r\n\r\n  // no ops\r\n  public stop(): this {\r\n    return this;\r\n  }\r\n  public pause(): this {\r\n    return this;\r\n  }\r\n\r\n  // sets the gainNode.gain.value property\r\n  // accepts [0..1]\r\n  public setVolume(volume: number): this {\r\n    if (volume < 0 || volume > 1) {\r\n      throw new Error(`setVolume() accepts a number between 0 and 1; got ${volume}.`);\r\n    }\r\n    this.gain.gain.value = volume;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 1. resolves response to arrayBuffer\r\n   * 2. creates audioBuffer\r\n   * 3. creates AudioBufferSourceNode\r\n   * 4. sets source property\r\n   */\r\n  private async createSource(res: Promise<Response>, context: AudioContext): Promise<void> {\r\n    const resp: Response = await res;\r\n    const buffer = await resp.arrayBuffer();\r\n    this.source = await context.decodeAudioData(buffer);\r\n  }\r\n\r\n  /**\r\n   * 1. creates new AudioBufferSourceNode\r\n   * 2. set node.buffer = this.source\r\n   * 3. set source metadata\r\n   * 4. connect node to destination\r\n   * 5. call start(0, offset, duration)\r\n   * 6. listen to ended event (look up the event)\r\n   * 7. clean up audio source node and disconnect it from the destination\r\n   */\r\n  private createPlayInstance(): void {\r\n    const node = this.context.createBufferSource();\r\n    node.buffer = this.source;\r\n    node.loop = this.loop; // false\r\n    // TODO: 3\r\n    node.connect(this.gain);\r\n\r\n    const now = Date.now();\r\n    node.start(0, this.start, this.length);\r\n\r\n    const gain = this.gain; // must be accessed inside of named function\r\n    node.addEventListener(\"ended\", function callback(e) {\r\n      node.disconnect(gain);\r\n      node.removeEventListener(\"ended\", callback);\r\n    });\r\n  }\r\n}\r\n","import { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport { Cursor, IInteractionPoint, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ISlider extends ISprite {\r\n  value: number;\r\n  max: number;\r\n  min: number;\r\n  width: number;\r\n\r\n  valueChangeEvent: EventEmitter<IValueChangeEvent<number>>;\r\n}\r\n\r\nexport interface ISliderProps extends ISpriteProps {\r\n  value?: number;\r\n  max?: number;\r\n  min?: number;\r\n  width: number;\r\n}\r\n\r\nexport class Slider extends Sprite implements ISlider {\r\n  public readonly type: SpriteType = SpriteType.Slider;\r\n  public value: number = 0;\r\n  public max: number = 1;\r\n  public min: number = 0;\r\n  public width: number = 100;\r\n\r\n  public valueChangeEvent: EventEmitter<IValueChangeEvent<number>> = new EventEmitter<IValueChangeEvent<number>>();\r\n\r\n  private sliderPattern: CanvasPattern = null;\r\n  private pillTexture: ImageBitmap = null;\r\n\r\n  constructor(props: ISliderProps) {\r\n    super(props);\r\n\r\n    this.height = props.textures.Pill_Hover.height;\r\n    this.width = props.width;\r\n    this.max = props.max || this.max;\r\n    this.min = props.min || this.min;\r\n    this.value = props.value || this.value;\r\n\r\n    this.sliderPattern = document\r\n      .createElement(\"canvas\")\r\n      .getContext(\"2d\")\r\n      // @ts-ignore: Dom Spec Outdated. ImageBitmap is acceptable parameter for createPattern.\r\n      .createPattern(props.textures.Line, \"repeat-x\");\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active || point.firstDown) {\r\n      return this;\r\n    }\r\n\r\n    /*\r\n     * NOTE: this checks if the cursor is strictly hovering over the pill\r\n     */\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    if (point.ty <= this.textures.Pill_Hover.height\r\n        && point.ty >= 0\r\n        && point.tx >= valueX\r\n        && point.tx <= valueX + this.textures.Pill_Hover.width) {\r\n        return this;\r\n      }\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    super.pointCollision(point);\r\n\r\n    if (this.active && point.active === this) {\r\n      const previousValue = this.value;\r\n      const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n      const trueTX = point.tx - this.textures.Pill_Hover.width * 0.5;\r\n      const clampedTX = Math.max(0, Math.min(trueTX, sliderDistance));\r\n      const range = this.max - this.min;\r\n\r\n      this.value = this.min + range * clampedTX / sliderDistance;\r\n      if (this.value !== previousValue) {\r\n        this.valueChangeEvent.emit({\r\n          eventType: \"ValueChange\",\r\n          previousValue,\r\n          property: \"value\",\r\n          source: this,\r\n          stage: this.container,\r\n          value: this.value,\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public update(): void {\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    this.pillTexture = this.active\r\n      ? this.textures.Pill_Active\r\n      : (this.hover ? this.textures.Pill_Hover : this.textures.Pill);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures.Line_Cap_Left, 0, 0);\r\n    ctx.drawImage(\r\n      this.textures.Line_Cap_Right,\r\n      this.width - this.textures.Line_Cap_Right.width,\r\n      0,\r\n    );\r\n    ctx.fillStyle = this.sliderPattern;\r\n    ctx.fillRect(\r\n      this.textures.Line_Cap_Left.width,\r\n      0,\r\n      this.width - this.textures.Line_Cap_Left.width - this.textures.Line_Cap_Right.width,\r\n      this.textures.Line.height,\r\n    );\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    ctx.drawImage(this.pillTexture, valueX, 0);\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IPostHoverCheckEvent,\r\n  IPostInterpolateEvent,\r\n  IPostRenderEvent,\r\n  IPostUpdateEvent,\r\n  IPreHoverCheckEvent,\r\n  IPreInterpolateEvent,\r\n  IPreRenderEvent,\r\n  IPreUpdateEvent,\r\n} from \"../events\";\r\nimport { Cursor } from \"../util\";\r\nimport { IInteractionManager, IInteractionManagerProps, InteractionManager } from \"./InteractionManager\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IStageProps extends IInteractionManagerProps {\r\n\r\n}\r\n\r\nexport interface IStage extends IInteractionManager {\r\n  postInterpolateEvent: EventEmitter<IPostInterpolateEvent>;\r\n  preInterpolateEvent: EventEmitter<IPreInterpolateEvent>;\r\n  preUpdateEvent: EventEmitter<IPreUpdateEvent>;\r\n  postUpdateEvent: EventEmitter<IPostUpdateEvent>;\r\n  preRenderEvent: EventEmitter<IPreRenderEvent>;\r\n  postRenderEvent: EventEmitter<IPostRenderEvent>;\r\n  update(): this;\r\n  render(): this;\r\n  skipAnimations(): boolean;\r\n}\r\n\r\nexport class Stage extends InteractionManager implements IStage {\r\n  public postInterpolateEvent: EventEmitter<IPostInterpolateEvent> = new EventEmitter<IPostInterpolateEvent>();\r\n  public preInterpolateEvent: EventEmitter<IPreInterpolateEvent> = new EventEmitter<IPreInterpolateEvent>();\r\n  public preHoverCheckEvent: EventEmitter<IPreHoverCheckEvent> = new EventEmitter<IPreHoverCheckEvent>();\r\n  public postHoverCheckEvent: EventEmitter<IPostHoverCheckEvent> = new EventEmitter<IPostHoverCheckEvent>();\r\n  public preUpdateEvent: EventEmitter<IPreUpdateEvent> = new EventEmitter<IPreUpdateEvent>();\r\n  public postUpdateEvent: EventEmitter<IPostUpdateEvent> = new EventEmitter<IPostUpdateEvent>();\r\n  public preRenderEvent: EventEmitter<IPreRenderEvent> = new EventEmitter<IPreRenderEvent>();\r\n  public postRenderEvent: EventEmitter<IPostRenderEvent> = new EventEmitter<IPostRenderEvent>();\r\n\r\n  constructor(props: IStageProps) {\r\n    super(props);\r\n  }\r\n  public update(): this {\r\n    const now = Date.now();\r\n    let sprite: ISprite;\r\n\r\n    this.preInterpolateEvent.emit({\r\n      eventType: \"PreInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n    this.postInterpolateEvent.emit({\r\n      eventType: \"PostInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preHoverCheckEvent.emit({\r\n      eventType: \"PreHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.hoverCheck(now);\r\n    this.postHoverCheckEvent.emit({\r\n      eventType: \"PostHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preUpdateEvent.emit({\r\n      eventType: \"PreUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    for (sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n\r\n    this.postUpdateEvent.emit({\r\n      eventType: \"PostUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(): this {\r\n    this.preRenderEvent.emit({\r\n      eventType: \"PreRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    let sprite: ISprite;\r\n    let pointer: Cursor = Cursor.auto;\r\n    const ctx = this.ctx;\r\n\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.setTransform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha = sprite.interpolatedPosition[6];\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n      pointer = (sprite.hover && sprite.cursor) || pointer;\r\n    }\r\n\r\n    this.canvas.style.cursor = pointer;\r\n\r\n    this.postRenderEvent.emit({\r\n      eventType: \"PostRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public skipAnimations(): boolean {\r\n    const now = Date.now();\r\n    let result = false;\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.skipAnimation(now)) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","\r\nimport { IPadding, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ITextbox extends ISprite {\r\n  text: string;\r\n  textSpeed: number;\r\n  textIndex: number;\r\n  padding: IPadding;\r\n  fontSize: number;\r\n  font: string;\r\n  fontColor: string;\r\n  lineHeight: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  setText(text: string): this;\r\n  appendText(text: string): this;\r\n}\r\n\r\nexport interface ITextboxProps extends ISpriteProps {\r\n  text?: string;\r\n  textSpeed?: number;\r\n  textIndex?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n  padding?: IPadding;\r\n  fontSize?: number;\r\n  font?: string;\r\n  fontColor?: string;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport class Textbox extends Sprite implements ITextbox {\r\n  private static regex: RegExp = /\\r\\n|\\r|\\n|[^\\t ]*[\\t ]?/g;\r\n  public readonly type: SpriteType = SpriteType.Textbox;\r\n\r\n  public text: string = \"\";\r\n  public textSpeed: number = 1;\r\n  public textIndex: number = 0;\r\n  public padding: IPadding = {\r\n    bottom: 5,\r\n    left: 5,\r\n    right: 5,\r\n    top: 5,\r\n  };\r\n  public fontSize: number = 12;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public lineHeight: number = 16;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n  private interpolatedText: string[] = [\"\"];\r\n\r\n  constructor(props: ITextboxProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.textSpeed = props.textSpeed || this.textSpeed;\r\n    if (props.hasOwnProperty(\"textIndex\")) {\r\n      this.textIndex = props.textIndex;\r\n    }\r\n    this.padding = props.padding || this.padding;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.lineHeight = props.lineHeight || this.lineHeight;\r\n\r\n    this.setTexture(\"Texture\");\r\n  }\r\n\r\n  public update() {\r\n    const maxWidth = this.textures[this.texture].width - this.padding.left - this.padding.right;\r\n    this.textIndex = Math.min(this.text.length, this.textIndex + this.textSpeed);\r\n    const words = this.text.match(Textbox.regex);\r\n    this.interpolatedText = [\"\"];\r\n    const maxLines = (this.textures[this.texture].height - this.padding.top - this.padding.bottom) / this.lineHeight;\r\n    let line: string = \"\";\r\n    let lineIndex: number = 0;\r\n    let measurement: TextMetrics;\r\n    let leftOver: number = this.textIndex;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    for (const word of words) {\r\n\r\n      // If the next character is a newline, push a new line\r\n      if (word === \"\\n\" || word === \"\\r\\n\" || word === \"\\r\") {\r\n        this.interpolatedText.push(\"\");\r\n        leftOver -= word.length;\r\n        lineIndex += 1;\r\n        continue;\r\n      }\r\n\r\n      line = this.interpolatedText[lineIndex];\r\n\r\n      // If there are no more characters to push, break\r\n      if (leftOver === 0) {\r\n        break;\r\n      }\r\n\r\n      // If the line count is greater than the maximum number of lines, break\r\n      if ((lineIndex + 1) > maxLines) {\r\n        break;\r\n      }\r\n\r\n      // Test the word length\r\n      line += word;\r\n      measurement = tempctx.measureText(line);\r\n\r\n      // If the line overflows\r\n      if (measurement.width > maxWidth) {\r\n        lineIndex = this.interpolatedText.push(\"\") - 1;\r\n      }\r\n\r\n      this.interpolatedText[lineIndex] += word;\r\n      // Add the text to the screen\r\n\r\n      leftOver -= word.length;\r\n\r\n      if (leftOver < 0) {\r\n        this.interpolatedText[lineIndex] = this.interpolatedText[lineIndex].slice(0, leftOver);\r\n        break;\r\n      }\r\n      // Check to see if the word overFlows the animation\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n    super.render(ctx);\r\n    const maxHeight = this.textures[this.texture].height - this.padding.top;\r\n    let currentHeight = this.padding.top;\r\n\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.bottom,\r\n      this.width - this.padding.right,\r\n      this.height - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n    for (const line of this.interpolatedText) {\r\n      if (currentHeight + this.fontSize > maxHeight) {\r\n        break;\r\n      }\r\n\r\n      ctx.fillText(line, this.padding.left, currentHeight);\r\n      currentHeight += this.lineHeight;\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    if (text.startsWith(this.text)) {\r\n      this.text = text;\r\n      return this;\r\n    }\r\n\r\n    this.text = text;\r\n    this.interpolatedText = [\"\"];\r\n    this.textIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  public appendText(text: string): this {\r\n    this.text += text;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = super.skipAnimation(now) && this.textIndex < this.text.length;\r\n    this.textIndex = this.text.length;\r\n    return result;\r\n  }\r\n}\r\n"],"names":["PI","Math","TAU","inFunc","ratio","outFunc","inverse","easeLinear","easeInQuad","easeOutQuad","easeInOutQuad","inOut","easeInCub","easeOutCub","easeInOutCub","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutSin","sin","easeInSin","easeInOutSin","easeOutElastic","pow","p","easeInElastic","easeInOutElastic","input","this","value","CanvasMatrix2DTransformAPI","x","y","radians","cos","a","b","c","d","tan","e","f","det","props","pa","pb","pc","pd","pe","pf","ma","mb","mc","md","me","mf","target","point","transformPoint","Identity","use","matrix","tx","ty","radFactor","StagePosition","degFactor","PI_2","factor","SpriteSheetKind","degrees","normalize","sprite","position","container","Error","stage","widthFactor","BottomCenterLeft","CenterLeft","TopCenterLeft","BottomCenter","Center","TopCenter","BottomCenterRight","CenterRight","TopCenterRight","BottomRight","Right","TopRight","heightFactor","Left","BottomLeft","copy","translate","canvas","width","height","definition","result","Array","isArray","kind","JSON","frames","JSON_TP_Array","meta","JSON_TP_Hash","definitionPromise","imgPromise","textures","_q","img","jsonKind","jsonKind_1","tslib_1.__values","_e","_f","frame","name","createImageBitmap","spritesheetArrayKind","_g","_j","_k","arrayFrame","filename","w","h","spritesheetHashKind","_l","Object","keys","spriteFrame","_o","_p","TextAlign","TextBaseline","PlayState","Cursor","SpriteType","url","opts","fetch","_a","json","createSpriteSheet","blob","left","right","z","SelectionState","EventEmitter","callbacks","callback","push","dispose","_this","includes","splice","indexOf","Promise","resolve","reject","disposer","listen","event","events","_b","slice","Sprite","eases.easeLinear","auto","id","setTo","previousPosition","interpolatedPosition","hasOwnProperty","previousAlpha","alpha","interpolatedAlpha","source","loadTexture","now","interpolate","broadPhase","narrowPhase","focused","set","sx","s","sy","rotate","r","scale","cx","cy","i","Number","isFinite","timespan","animationLength","wait","ease","animationStart","Date","lastInterpolated","progress","j","parent","transform","texture","ctx","drawImage","keyDownEvent","emit","keyUpEvent","defintion","createTextureMap","_c","loadedEvent","_d","_super","Button","center","middle","pointer","selected","font","fontColor","fontSize","text","textAlign","textBaseline","tslib_1.__extends","setTexture","active","hover","update","render","fillStyle","fillText","Character","displayName","color","Checkbox","checked","Boolean","previousValue","checkedChangeEvent","eventType","property","clicked","toggle","pointCollision","cursor","Close","audioContext","Container","sprites","playables","points","captured","down","firstDown","type","listener","mouseDown","document","body","mouseUp","mouseMove","touchStart","touchEnd","touchMove","touchCancel","keyDown","keyUp","createElement","appendChild","getContext","hookEvents","addPoint","mousePoint","InteractionManager","forEach","addEventListener","keyboardEvents","removeEventListener","mouseDownEvent","rawEvent","clientX","clientY","pointDown","pointUp","pointMove","touch","changedTouches","length","touchStartEvent","addTouchPoint","touchEndEvent","touchPointIndex","identifier","removeTouchPoint","touchCancelEvent","pointCancel","touchMoveEvent","alreadyDown","previousX","previousY","setFocus","pointDownEvent","pointUpEvent","pointClickEvent","hoveringSprite","rect","getBoundingClientRect","top","sort","zSort","isHovering","pointMoveEvent","createInteractionPoint","toString","removePoint","keyIndex","key","focusedSprite","getFocusedSprite","Panel","focus","isFocused","tempctx","Label","start","hanging","measureText","sortZ","collision","beginPath","clip","save","globalAlpha","restore","skipAnimation","Stopped","context","spritemap","end","gain","createGain","loaded","createSource","destination","SFXSprite","then","createPlayInstance","volume","res","arrayBuffer","buffer","decodeAudioData","node","createBufferSource","loop","connect","disconnect","Slider","Pill_Hover","max","min","sliderPattern","createPattern","Line","valueX","sliderDistance","clampedTX","valueChangeEvent","pillTexture","Pill_Active","Pill","Line_Cap_Left","Line_Cap_Right","fillRect","Stage","preInterpolateEvent","postInterpolateEvent","preHoverCheckEvent","hoverCheck","postHoverCheckEvent","preUpdateEvent","postUpdateEvent","preRenderEvent","clearRect","setTransform","style","postRenderEvent","Textbox","bottom","textSpeed","textIndex","padding","lineHeight","maxWidth","words","match","regex","interpolatedText","maxLines","line","lineIndex","leftOver","words_1","word","maxHeight","currentHeight","startsWith","TextInput","Caret","Active_Left","Inactive_Left","Active_Right","Inactive_Right","pattern","Active_Mid","Inactive_Mid","Left_Cap_Active","activeMidPattern","inactiveMidPattern","textScroll","showCaret","caretX","caretIndex","moveTo","lineTo","stroke","isSelection","selectionState","Selection","selectionEnd","codePointAt"],"mappings":"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"}