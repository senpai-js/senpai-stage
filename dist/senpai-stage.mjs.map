{"version":3,"file":"senpai-stage.mjs","sources":["../src/ease/consts.ts","../src/ease/index.ts","../src/matrix/index.ts","../src/spritesheet/index.ts","../src/util/index.ts","../src/view/TextInput.ts","../src/events/SenpaiEvent.ts","../src/view/Sprite.ts","../src/view/Button.ts","../src/view/Character.ts","../src/view/Checkbox.ts","../src/view/Close.ts","../src/view/Container.ts","../src/view/InteractionManager.ts","../src/view/Label.ts","../src/view/Panel.ts","../src/view/SFXSprite.ts","../src/view/Slider.ts","../src/view/Stage.ts","../src/view/Textbox.ts"],"sourcesContent":["export const PI = Math.PI;\r\nexport const TAU = 2 * PI;\r\n","/****\r\n * Custom ease functions, designed with functional programming concepts.\r\n */\r\nimport { PI, TAU } from \"./consts\";\r\n\r\nexport type EaseFunc = (ratio: number) => number;\r\n\r\nfunction inverse(inFunc: EaseFunc): EaseFunc {\r\n  return function outFunc(ratio: number): number {\r\n    return 1 - inFunc(1 - ratio);\r\n  };\r\n}\r\n\r\nfunction inOut(inFunc: EaseFunc): EaseFunc {\r\n  const outFunc = inverse(inFunc);\r\n  return (ratio: number): number => ratio < 0.5\r\n    ? 0.5 * inFunc(ratio * 2)\r\n    : 0.5 + 0.5 * outFunc(2 * ratio - 1);\r\n}\r\n\r\nexport const easeLinear: EaseFunc = function linear(ratio: number): number {\r\n  return ratio;\r\n};\r\n\r\nexport const easeInQuad: EaseFunc = (ratio: number): number => Math.pow(ratio, 2);\r\nexport const easeOutQuad: EaseFunc = inverse(easeInQuad);\r\nexport const easeInOutQuad: EaseFunc = inOut(easeInQuad);\r\n\r\nexport const easeInCub: EaseFunc = (ratio: number): number => Math.pow(ratio, 3);\r\nexport const easeOutCub: EaseFunc = inverse(easeInCub);\r\nexport const easeInOutCub: EaseFunc = inOut(easeInCub);\r\n\r\nexport const easeInQuart: EaseFunc =\r\n  (ratio: number): number => Math.pow(ratio, 4);\r\nexport const easeOutQuart: EaseFunc = inverse(easeInQuart);\r\nexport const easeInOutQuart: EaseFunc = inOut(easeInQuart);\r\n\r\nexport const easeInQuint: EaseFunc =\r\n  (ratio: number): number => Math.pow(ratio, 5);\r\nexport const easeOutQuint: EaseFunc = inverse(easeInQuint);\r\nexport const easeInOutQuint: EaseFunc = inOut(easeInQuint);\r\n\r\nexport const easeOutSin: EaseFunc =\r\n  (ratio: number): number => Math.sin(ratio * PI * 0.5);\r\nexport const easeInSin: EaseFunc = inverse(easeOutSin);\r\nexport const easeInOutSin: EaseFunc = inOut(easeInSin);\r\n\r\nconst p = 0.3;\r\nexport const easeOutElastic: EaseFunc =\r\n  (ratio: number): number => Math.pow(2, -10 * ratio) * Math.sin((ratio - p / 4) * TAU / p) + 1;\r\nexport const easeInElastic: EaseFunc = inverse(easeOutElastic);\r\nexport const easeInOutElastic: EaseFunc = inOut(easeInElastic);\r\n","import { IInteractionPoint } from \"../util\";\r\nimport { ISprite } from \"../view/Sprite\";\r\nimport { IStage, Stage } from \"../view/Stage\";\r\n\r\nexport type CanvasMatrix2D = [number, number, number, number, number, number];\r\n\r\nexport class CanvasMatrix2DTransformAPI {\r\n  public value: CanvasMatrix2D = null;\r\n  constructor(input: CanvasMatrix2D) {\r\n    this.value = input;\r\n  }\r\n\r\n  public translate(x: number, y: number): this {\r\n    this.value[4] += this.value[0] * x + this.value[2] * y;\r\n    this.value[5] += this.value[1] * x + this.value[3] * y;\r\n    return this;\r\n  }\r\n\r\n  public scale(x: number, y: number): this {\r\n    this.value[0] *= x;\r\n    this.value[1] *= x;\r\n    this.value[2] *= y;\r\n    this.value[3] *= y;\r\n    return this;\r\n  }\r\n\r\n  public rotate(radians: number) {\r\n    const cos: number = Math.cos(radians);\r\n    const sin: number = Math.sin(radians);\r\n    const a: number = this.value[0];\r\n    const b: number = this.value[1];\r\n    const c: number = this.value[2];\r\n    const d: number = this.value[3];\r\n\r\n    this.value[0] = a * cos + c * sin;\r\n    this.value[1] = b * cos + d * sin;\r\n    this.value[2] = c * cos - a * sin;\r\n    this.value[3] = d * cos - b * sin;\r\n\r\n    return this;\r\n  }\r\n\r\n  public skewX(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[2] += this.value[0] * tan;\r\n    this.value[3] += this.value[1] * tan;\r\n    return this;\r\n  }\r\n\r\n  public skewY(radians: number): this {\r\n    const tan = Math.tan(radians);\r\n    this.value[0] += this.value[2] * tan;\r\n    this.value[1] += this.value[3] * tan;\r\n    return this;\r\n  }\r\n\r\n  public inverse(): this {\r\n    const a: number = this.value[0];\r\n    const b: number = this.value[1];\r\n    const c: number = this.value[2];\r\n    const d: number = this.value[3];\r\n    const e: number = this.value[4];\r\n    const f: number = this.value[5];\r\n    const det: number = 1 / (a * d - c * b);\r\n\r\n    this.value[0] = d * det;\r\n    this.value[1] = -b * det;\r\n    this.value[2] = -c * det;\r\n    this.value[3] = a * det;\r\n    this.value[4] = (c * f - e * d) * det;\r\n    this.value[5] = (e * b - a * f) * det;\r\n    return this;\r\n  }\r\n\r\n  public transform(props: CanvasMatrix2D): this {\r\n    // props values\r\n    const pa: number = props[0];\r\n    const pb: number = props[1];\r\n    const pc: number = props[2];\r\n    const pd: number = props[3];\r\n    const pe: number = props[4];\r\n    const pf: number = props[5];\r\n\r\n    // matrix values\r\n    const ma: number = this.value[0];\r\n    const mb: number = this.value[1];\r\n    const mc: number = this.value[2];\r\n    const md: number = this.value[3];\r\n    const me: number = this.value[4];\r\n    const mf: number = this.value[5];\r\n\r\n    this.value[0] = ma * pa + mc * pb;\r\n    this.value[1] = mb * pa + md * pb;\r\n    this.value[2] = ma * pc + mc * pd;\r\n    this.value[3] = mb * pc + md * pd;\r\n    this.value[4] = ma * pe + mc * pf + me;\r\n    this.value[5] = mb * pe + md * pf + mf;\r\n    return this;\r\n  }\r\n\r\n  public reset(): this {\r\n    this.value[0] = 1;\r\n    this.value[1] = 0;\r\n    this.value[2] = 0;\r\n    this.value[3] = 1;\r\n    this.value[4] = 0;\r\n    this.value[5] = 0;\r\n    return this;\r\n  }\r\n\r\n  public set(props: CanvasMatrix2D): this {\r\n    this.value[0] = props[0];\r\n    this.value[1] = props[1];\r\n    this.value[2] = props[2];\r\n    this.value[3] = props[3];\r\n    this.value[4] = props[4];\r\n    this.value[5] = props[5];\r\n    return this;\r\n  }\r\n\r\n  public setTo(target: CanvasMatrix2D): this {\r\n    target[0] = this.value[0];\r\n    target[1] = this.value[1];\r\n    target[2] = this.value[2];\r\n    target[3] = this.value[3];\r\n    target[4] = this.value[4];\r\n    target[5] = this.value[5];\r\n    return this;\r\n  }\r\n\r\n  public transformPoint(point: IInteractionPoint): this {\r\n    transformPoint(point, this.value);\r\n    return this;\r\n  }\r\n}\r\n\r\nexport const Identity: CanvasMatrix2D = [1, 0, 0, 1, 0, 0];\r\n\r\nexport function copy(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return use([\r\n    input[0],\r\n    input[1],\r\n    input[2],\r\n    input[3],\r\n    input[4],\r\n    input[5],\r\n  ]);\r\n}\r\n\r\nexport function use(input: CanvasMatrix2D): CanvasMatrix2DTransformAPI {\r\n  return new CanvasMatrix2DTransformAPI(input);\r\n}\r\n\r\nexport function transformPoint(point: IInteractionPoint, matrix: CanvasMatrix2D): void {\r\n  point.tx = matrix[0] * point.x + matrix[2] * point.y + matrix[4];\r\n  point.ty = matrix[1] * point.x + matrix[3] * point.y + matrix[5];\r\n}\r\n\r\nconst radFactor: number = Math.PI / 180;\r\nexport function rads(degrees: number): number {\r\n  const normalized = normalize(degrees, 360);\r\n  return normalized * radFactor;\r\n}\r\n\r\nconst degFactor: number = 1 / radFactor;\r\nconst PI_2: number = Math.PI * 2;\r\nexport function degs(radians: number): number {\r\n  return normalize(radians, PI_2) * degFactor;\r\n}\r\n\r\nfunction normalize(input: number, factor: number): number {\r\n  return ((input % factor) + factor) % factor;\r\n}\r\n\r\nexport enum StagePosition {\r\n  BottomCenter,\r\n  BottomCenterLeft,\r\n  BottomCenterRight,\r\n  BottomLeft,\r\n  BottomRight,\r\n  CenterLeft,\r\n  Center,\r\n  CenterRight,\r\n  Left,\r\n  Right,\r\n  TopCenter,\r\n  TopCenterLeft,\r\n  TopCenterRight,\r\n  TopLeft,\r\n  TopRight,\r\n}\r\n\r\nexport function align(sprite: ISprite, position: StagePosition) {\r\n  if (!sprite.container) {\r\n    throw new Error(\"Sprite cannot be aligned because it was not added to a stage.\");\r\n  }\r\n\r\n  const stage: IStage = sprite.container as any;\r\n\r\n  let widthFactor = 0;\r\n  switch (position) {\r\n    case StagePosition.BottomCenterLeft:\r\n    case StagePosition.CenterLeft:\r\n    case StagePosition.TopCenterLeft:\r\n      widthFactor = 0.25;\r\n      break;\r\n    case StagePosition.BottomCenter:\r\n    case StagePosition.Center:\r\n    case StagePosition.TopCenter:\r\n      widthFactor = 0.5;\r\n      break;\r\n    case StagePosition.BottomCenterRight:\r\n    case StagePosition.CenterRight:\r\n    case StagePosition.TopCenterRight:\r\n      widthFactor = 0.75;\r\n      break;\r\n    case StagePosition.BottomRight:\r\n    case StagePosition.Right:\r\n    case StagePosition.TopRight:\r\n      widthFactor = 1;\r\n      break;\r\n  }\r\n\r\n  let heightFactor = 0;\r\n  switch (position) {\r\n    case StagePosition.Center:\r\n    case StagePosition.CenterLeft:\r\n    case StagePosition.CenterRight:\r\n    case StagePosition.Left:\r\n    case StagePosition.Right:\r\n      heightFactor = 0.5;\r\n      break;\r\n    case StagePosition.BottomCenter:\r\n    case StagePosition.BottomCenterLeft:\r\n    case StagePosition.BottomCenterRight:\r\n    case StagePosition.BottomLeft:\r\n    case StagePosition.BottomRight:\r\n      heightFactor = 1;\r\n      break;\r\n  }\r\n\r\n  return copy(Identity)\r\n    .translate(stage.canvas.width * widthFactor, stage.canvas.height * heightFactor)\r\n    .translate(-sprite.width * widthFactor, -sprite.height * heightFactor);\r\n}\r\n","export interface ISpriteSheet {\r\n  kind: SpriteSheetKind;\r\n}\r\n\r\nexport enum SpriteSheetKind {\r\n  JSON,\r\n  JSON_TP_Hash,\r\n  JSON_TP_Array,\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetSizeShort {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSizeShort;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetJSONHash extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Hash;\r\n  frames: {\r\n    [frame: string]: {\r\n      frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      rotated: boolean;\r\n      trimmed: boolean;\r\n      spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n      sourceSize: ISpriteSheetSizeShort;\r\n    };\r\n  };\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport interface ISpriteSheetFileName {\r\n  filename: string;\r\n}\r\n\r\nexport interface ISpriteSheetJSONArray extends ISpriteSheet {\r\n  kind: SpriteSheetKind.JSON_TP_Array;\r\n  frames: Array<{\r\n    filename: string;\r\n    frame: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    rotated: boolean;\r\n    trimmed: boolean;\r\n    spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSizeShort;\r\n    sourceSize: ISpriteSheetSizeShort;\r\n  }>;\r\n  meta: ISpriteSheetMeta;\r\n}\r\n\r\nexport type ISpriteSheetJSON = Array<{\r\n  name: string;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}> & {\r\n  kind: SpriteSheetKind.JSON;\r\n};\r\n\r\nexport async function loadSpriteSheet(url: string | Request, opts?: RequestInit): Promise<ISpriteSheet> {\r\n  const resp = await fetch(url, opts);\r\n  const definition = await resp.json();\r\n  return createSpriteSheet(definition);\r\n}\r\n\r\nexport function createSpriteSheet(definition: any): ISpriteSheet {\r\n  if (Array.isArray(definition)) {\r\n    const result: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n    result.kind = SpriteSheetKind.JSON;\r\n    return result;\r\n  }\r\n  if (!definition.frames) {\r\n    throw new Error(\"Invalid spritesheet format.\");\r\n  }\r\n  if (Array.isArray(definition.frames)) {\r\n    const result: ISpriteSheetJSONArray = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Array,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  } else {\r\n    const result: ISpriteSheetJSONHash = {\r\n      frames: definition.frames,\r\n      kind: SpriteSheetKind.JSON_TP_Hash,\r\n      meta: definition.meta,\r\n    };\r\n    return result;\r\n  }\r\n}\r\n\r\nexport interface ITextureMap {\r\n  [texture: string]: ImageBitmap;\r\n}\r\n\r\nexport async function createTextureMap(definitionPromise: Promise<ISpriteSheet>, imgPromise: Promise<ImageBitmap>) {\r\n  const textures: ITextureMap = {};\r\n  const definition = await definitionPromise;\r\n  const img = await imgPromise;\r\n  const spritesheet = await createSpriteSheet(definition);\r\n  switch (spritesheet.kind) {\r\n    case SpriteSheetKind.JSON:\r\n      const jsonKind: ISpriteSheetJSON = definition as ISpriteSheetJSON;\r\n      for (const frame of jsonKind) {\r\n        textures[frame.name] = await createImageBitmap(\r\n          img,\r\n          frame.x,\r\n          frame.y,\r\n          frame.width,\r\n          frame.height,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Array:\r\n      const spritesheetArrayKind: ISpriteSheetJSONArray = definition as ISpriteSheetJSONArray;\r\n      for (const arrayFrame of spritesheetArrayKind.frames) {\r\n        textures[arrayFrame.filename] = await createImageBitmap(\r\n          img,\r\n          arrayFrame.frame.x,\r\n          arrayFrame.frame.y,\r\n          arrayFrame.frame.w,\r\n          arrayFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n    case SpriteSheetKind.JSON_TP_Hash:\r\n      const spritesheetHashKind: ISpriteSheetJSONHash = definition as ISpriteSheetJSONHash;\r\n      for (const frame of Object.keys(spritesheetHashKind.frames)) {\r\n        const spriteFrame = spritesheetHashKind.frames[frame];\r\n        textures[frame] = await createImageBitmap(\r\n          img,\r\n          spriteFrame.frame.x,\r\n          spriteFrame.frame.y,\r\n          spriteFrame.frame.w,\r\n          spriteFrame.frame.h,\r\n        );\r\n      }\r\n      break;\r\n  }\r\n  return textures;\r\n}\r\n\r\nexport async function loadImage(url: string | Request, opts?: RequestInit): Promise<ImageBitmap> {\r\n  const res = await fetch(url, opts);\r\n  const blob = await res.blob();\r\n  return createImageBitmap(blob);\r\n}\r\n","import { EaseFunc } from \"../ease\";\r\nimport { CanvasMatrix2D } from \"../matrix\";\r\nimport { ISprite } from \"../view/Sprite\";\r\n\r\nexport interface IPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrameMap {\r\n  [frame: string]: ISpriteSheetFrame;\r\n}\r\n\r\nexport interface ISpriteSheetMeta {\r\n  app: string;\r\n  version: string;\r\n  image: string;\r\n  size: ISpriteSheetSize;\r\n  scale: number;\r\n}\r\n\r\nexport interface ISpriteSheetFrame {\r\n  frame: ISpriteSheetPoint & ISpriteSheetSize;\r\n  rotated: boolean;\r\n  trimmed: boolean;\r\n  spriteSourceSize: ISpriteSheetPoint & ISpriteSheetSize;\r\n  sourceSize: ISpriteSheetSize;\r\n}\r\n\r\nexport interface ISpriteSheetSize {\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport interface ISpriteSheetPoint {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport interface IInteractionPoint extends IPoint {\r\n  id: string;\r\n  type: \"Touch\" | \"Mouse\";\r\n  down: boolean;\r\n  clicked: boolean;\r\n  captured: boolean;\r\n  active: ISprite;\r\n  hover: ISprite;\r\n  firstDown: boolean;\r\n  tx: number;\r\n  ty: number;\r\n}\r\n\r\nexport interface IPlayable {\r\n  id: string;\r\n  started: number; // timestamp when the media last began playing\r\n  length: number; // media play length timespan\r\n  start: number; // media start time\r\n  end: number; // media end time\r\n  loop: boolean; // does this media loop?\r\n  state: PlayState; // self explainatory\r\n  loaded: Promise<void>; // this should be a promise that resolves once the audio has loaded\r\n  play(): this;\r\n  pause(): this;\r\n  stop(): this;\r\n  setVolume(volume: number); // accepts number [0. 1]\r\n}\r\n\r\nexport interface IAudio extends IPlayable {\r\n  gain: GainNode; // controls volume\r\n  source: AudioBuffer; // is null until the audioBuffer is loaded\r\n  destination: AudioNode;\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n}\r\n\r\nexport interface ISoundSpriteSheet {\r\n  resources: string[];\r\n  spritemap: {\r\n    [name: string]: ISoundSpriteSheetTexture;\r\n  };\r\n}\r\n\r\nexport interface ISoundSpriteSheetTexture {\r\n  start: number;\r\n  end: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport interface IAudioProps extends IPlayableProps {\r\n  definition: ISoundSpriteSheet; // this will be the provided sound sprite sheet\r\n  context: AudioContext; // provided audio context for creating the sound sprite\r\n  name: string; // determines the name of the audio clip\r\n}\r\n\r\nexport interface IPlayableProps {\r\n  id: string;\r\n  source: Promise<Response>;\r\n  texture: string; // this should be name of the texture in the spritesheet\r\n}\r\n\r\nexport interface ISize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IPadding {\r\n  left: number;\r\n  right: number;\r\n  top: number;\r\n  bottom: number;\r\n}\r\n\r\n/**\r\n * Sort by z level in ascending order.\r\n */\r\nexport function zSort(left: ISprite, right: ISprite): number {\r\n  return left.z - right.z;\r\n}\r\n\r\nexport enum TextAlign {\r\n  \"left\" = \"left\",\r\n  \"right\" = \"right\",\r\n  \"center\" = \"center\",\r\n  \"start\" = \"start\",\r\n  \"end\" = \"end\",\r\n}\r\n\r\nexport enum TextBaseline {\r\n  \"top\" = \"top\",\r\n  \"hanging\" = \"hanging\",\r\n  \"middle\" = \"middle\",\r\n  \"alphabetic\" = \"alphabetic\",\r\n  \"ideographic\" = \"ideographic\",\r\n  \"bottom\" = \"bottom\",\r\n}\r\n\r\nexport enum PlayState {\r\n  Playing,\r\n    Paused,\r\n    Stopped,\r\n}\r\n\r\nexport enum Cursor {\r\n  \"auto\" = \"auto\",\r\n \"default\" = \"default\",\r\n  \"none\" = \"none\",\r\n  \"context-menu\" = \"context-menu\",\r\n  \"help\" = \"help\",\r\n  \"pointer\" = \"pointer\",\r\n  \"progress\" = \"progress\",\r\n  \"wait\" = \"wait\",\r\n  \"cell\" = \"cell\",\r\n  \"crosshair\" = \"crosshair\",\r\n  \"text\" = \"text\",\r\n  \"vertical-text\" = \"vertical-text\",\r\n  \"alias\" = \"alias\",\r\n  \"copy\" = \"copy\",\r\n  \"move\" = \"move\",\r\n  \"no-drop\" = \"no-drop\",\r\n  \"not-allowed\" = \"not-allowed\",\r\n  \"e-resize\" = \"e-resize\",\r\n  \"n-resize\" = \"n-resize\",\r\n  \"ne-resize\" = \"ne-resize\",\r\n  \"nw-resize\" = \"nw-resize\",\r\n  \"s-resize\" = \"s-resize\",\r\n  \"se-resize\" = \"se-resize\",\r\n  \"sw-resize\" = \"sw-resize\",\r\n  \"w-resize\" = \"w-resize\",\r\n  \"ew-resize\" = \"ew-resize\",\r\n  \"ns-resize\" = \"ns-resize\",\r\n  \"nesw-resize\" = \"nesw-resize\",\r\n  \"nwse-resize\" = \"nwse-resize\",\r\n  \"col-resize\" = \"col-resize\",\r\n  \"row-resize\" = \"row-resize\",\r\n  \"all-scroll\" = \"all-scroll\",\r\n  \"zoom-in\" = \"zoom-in\",\r\n  \"zoom-out\" = \"zoom-out\",\r\n  \"grab\" = \"grab\",\r\n  \"grabbing\" = \"grabbing\",\r\n}\r\n\r\nexport interface ISpritePosition {\r\n  x?: number;\r\n  y?: number;\r\n  s?: number;\r\n  sx?: number;\r\n  sy?: number;\r\n  r?: number;\r\n  cx?: number;\r\n  cy?: number;\r\n}\r\n\r\nexport enum SpriteType {\r\n  Button,\r\n  Character,\r\n  Checkbox,\r\n  Close,\r\n  Label,\r\n  Panel,\r\n  Slider,\r\n  Textbox,\r\n  TextInput,\r\n  Sprite,\r\n}\r\n\r\nexport interface IKeyable {\r\n  altKey: boolean;\r\n  ctrlKey: boolean;\r\n  key: string;\r\n  shiftKey: boolean;\r\n}\r\n\r\nexport enum KeyFrameEntryType {\r\n  Wait,\r\n  Move,\r\n  Repeat,\r\n}\r\n\r\nexport interface IKeyFrameEntry {\r\n  previousAlpha: number;\r\n  alpha: number;\r\n  ease: EaseFunc;\r\n  type: KeyFrameEntryType;\r\n  from: CanvasMatrix2D;\r\n  to: CanvasMatrix2D;\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\nexport interface IWaitKeyFrame extends IKeyFrameEntry {\r\n  type: KeyFrameEntryType.Wait;\r\n}\r\n\r\nexport interface IMoveKeyFrame extends IKeyFrameEntry {\r\n  type: KeyFrameEntryType.Move;\r\n}\r\n\r\nexport interface IRepeatKeyFrame extends IKeyFrameEntry {\r\n  type: KeyFrameEntryType.Repeat;\r\n}\r\n","import { IKeyDownEvent, IKeyPressEvent } from \"../events\";\r\nimport { transformPoint } from \"../matrix\";\r\nimport { Cursor, IInteractionPoint, IPadding, SpriteType, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\nimport { IStage } from \"./Stage\";\r\n\r\nconst unicodeCharacterTest = /^.$/u;\r\nexport enum SelectionState {\r\n  Selection,\r\n  Caret,\r\n}\r\n\r\nexport interface ITextInput extends ISprite {\r\n  text: string[];\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  selectedFontColor: string;\r\n  selectedFontBackgroundColor: string;\r\n  selectionState: SelectionState;\r\n  caretIndex: number;\r\n  selectionStart: number;\r\n  selectionEnd: number;\r\n  caretX: number;\r\n  padding: IPadding;\r\n  frameCount: number;\r\n  textScroll: number;\r\n  showCaret: boolean;\r\n  setText(text: string): this;\r\n  select(begin: number, end: number): this;\r\n}\r\n\r\nexport interface ITextInputProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  selectedFontColor?: string;\r\n  selectedFontBackgroundColor?: string;\r\n  width: number;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class TextInput extends Sprite implements ITextInput {\r\n  public readonly type: SpriteType = SpriteType.TextInput;\r\n  public text: string[] = [];\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public selectedFontColor = \"white\";\r\n  public selectedFontBackgroundColor = \"blue\";\r\n  public caretIndex: number = 0;\r\n  public caretX: number = 0;\r\n  public textScroll: number = 0;\r\n  public selectionState: SelectionState = SelectionState.Caret;\r\n  public padding: IPadding = {\r\n    bottom: 6,\r\n    left: 6,\r\n    right: 6,\r\n    top: 6,\r\n  };\r\n  public selectionEnd: number = -1;\r\n  public selectionStart: number = -1;\r\n  public frameCount: number = 0;\r\n  public cursor: Cursor = Cursor.text;\r\n  public parentHoverCheck: boolean = false;\r\n  public showCaret: boolean = true;\r\n  private focusedMidPattern: CanvasPattern = null;\r\n  private unfocusedMidPattern: CanvasPattern = null;\r\n\r\n  constructor(props: ITextInputProps) {\r\n    super(props);\r\n    this.text = props.text ? props.text.split(\"\") : this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.selectedFontBackgroundColor = props.selectedFontBackgroundColor || this.selectedFontBackgroundColor;\r\n    this.selectedFontColor = props.selectedFontColor || this.selectedFontColor;\r\n    this.width = props.width || this.width;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active) {\r\n      return this;\r\n    }\r\n    return point.tx > this.padding.left\r\n      && point.ty > this.padding.top\r\n      && point.tx < (this.width - this.padding.right)\r\n      && point.ty < (this.height - this.padding.bottom)\r\n      ? this\r\n      : null;\r\n  }\r\n\r\n  public update(): void {\r\n    if (!this.focused) {\r\n      this.selectionState = SelectionState.Caret;\r\n    }\r\n\r\n    if (!this.focusedMidPattern && this.textures.Focused_Mid) {\r\n      this.focusedMidPattern = tempctx.createPattern(this.textures.Focused_Mid as any, \"repeat-x\");\r\n    }\r\n\r\n    if (!this.unfocusedMidPattern && this.textures.Unfocused_Mid) {\r\n      this.unfocusedMidPattern = tempctx.createPattern(this.textures.Unfocused_Mid as any, \"repeat-x\");\r\n    }\r\n\r\n    this.height = this.textures.Focused_Left.height;\r\n    // count 30 frames, then flash the cursor\r\n    this.frameCount += 1;\r\n    if (this.frameCount >= 30) {\r\n      this.showCaret = !this.showCaret;\r\n      this.frameCount -= 30;\r\n    }\r\n\r\n    // set the relative caretX from the start of the text\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    if (this.selectionState === SelectionState.Caret) {\r\n      this.caretX = tempctx.measureText(this.text.slice(0, this.caretIndex).join(\"\")).width;\r\n    } else {\r\n      const selectionTarget = this.caretIndex === this.selectionStart\r\n        ? this.selectionEnd\r\n        : this.selectionStart;\r\n      this.caretX = tempctx.measureText(this.text.slice(0, selectionTarget).join(\"\")).width;\r\n    }\r\n\r\n    // measure current caretX relative to the start of the TextInput padding\r\n    const relativeCaretX = this.textScroll + this.caretX;\r\n    const fullTextWidth = tempctx.measureText(this.text.join(\"\")).width;\r\n    const visibleTextWidth = this.width - this.padding.left - this.padding.right;\r\n    const targetCharacter = this.selectionState === SelectionState.Caret\r\n      ? this.caretIndex\r\n      : (this.selectionEnd === this.caretIndex ? this.selectionStart : this.selectionEnd);\r\n    if (fullTextWidth < visibleTextWidth) {\r\n      this.textScroll = 0;\r\n    } else if (relativeCaretX > visibleTextWidth - 5) {\r\n      const charWidth = targetCharacter >= this.text.length\r\n        ? 0\r\n        : tempctx.measureText(this.text[targetCharacter]).width;\r\n      this.textScroll = visibleTextWidth - this.caretX - charWidth;\r\n    } else if (relativeCaretX < 5) {\r\n      const charWidth = targetCharacter <= 0\r\n        ? 0\r\n        : tempctx.measureText(this.text[targetCharacter - 1]).width;\r\n      this.textScroll = -this.caretX + charWidth;\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    const stage = this.getStage();\r\n    const left = this.focused ? this.textures.Focused_Left : this.textures.Unfocused_Left;\r\n    const right = this.focused ? this.textures.Focused_Right : this.textures.Unfocused_Right;\r\n    const pattern = this.focused ? this.textures.Focused_Mid : this.textures.Unfocused_Mid;\r\n    ctx.drawImage(left, 0, 0);\r\n    ctx.drawImage(right, this.width - right.width, 0);\r\n    ctx.fillStyle = this.focused ? this.focusedMidPattern : this.unfocusedMidPattern;\r\n    ctx.fillRect(\r\n      left.width,\r\n      0,\r\n      this.width - left.width - right.width,\r\n      pattern.height,\r\n    );\r\n\r\n    // clip\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.top,\r\n      this.width - this.padding.right - this.padding.left,\r\n      this.height - this.padding.bottom - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n\r\n    if (this.selectionState === SelectionState.Selection) {\r\n      this.renderSelection(ctx);\r\n    } else if (this.selectionState === SelectionState.Caret && stage.insertMode) {\r\n      this.renderCaretInsert(ctx);\r\n    } else if (this.selectionState === SelectionState.Caret) {\r\n      this.renderCaret(ctx);\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text.split(\"\");\r\n    return this;\r\n  }\r\n\r\n  public keyDown(e: IKeyDownEvent): void {\r\n    const stage = this.getStage();\r\n    if (this.selectionState === SelectionState.Selection) {\r\n      this.keyDownSelection(e);\r\n    } else if (stage && stage.insertMode && this.selectionState === SelectionState.Caret) {\r\n      this.keyDownCaretInsert(e);\r\n    } else if (this.selectionState === SelectionState.Caret) {\r\n      this.keyDownCaret(e);\r\n    }\r\n\r\n    return super.keyDown(e);\r\n  }\r\n\r\n  public keyPress(e: IKeyPressEvent): void {\r\n    const stage = this.getStage();\r\n    if (this.selectionState === SelectionState.Selection) {\r\n      this.keyPressSelection(e);\r\n    } else if (stage && stage.insertMode && this.selectionState === SelectionState.Caret) {\r\n      this.keyPressCaretInsert(e);\r\n    } else if (this.selectionState === SelectionState.Caret) {\r\n      this.keyPressCaret(e);\r\n    }\r\n\r\n    return super.keyPress(e);\r\n  }\r\n  public select(begin: number, end: number): this {\r\n    if (!Number.isFinite(begin)) {\r\n      throw new Error(`Cannot select text on sprite ${this.id}: begin is not finite`);\r\n    }\r\n    if (!Number.isFinite(end)) {\r\n      throw new Error(`Cannot select text on sprite ${this.id}: end is not finite`);\r\n    }\r\n    begin = Math.floor(begin);\r\n    if (this.text.length < begin || begin < 0) {\r\n      throw new Error(`Cannot select text on sprite ${this.id}: begin is not in range`);\r\n    }\r\n    end = Math.floor(end);\r\n    if (this.text.length < begin || begin < 0) {\r\n      throw new Error(`Cannot select text on sprite ${this.id}: end is not in range`);\r\n    }\r\n    if (begin > end) {\r\n      throw new Error(`Cannot select text on sprite ${this.id}: begin is greater than end`);\r\n    }\r\n\r\n    this.selectionState = SelectionState.Selection;\r\n    this.selectionStart = begin;\r\n    this.selectionEnd = end;\r\n    this.caretIndex = Math.min(Math.max(begin, this.caretIndex), end);\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    const str = \"\";\r\n    if (point.firstDown) {\r\n      this.caretIndex = this.getCaretIndex(point.tx);\r\n    } else if (this.active) {\r\n      const idx = this.getCaretIndex(point.tx);\r\n      if (idx !== this.caretIndex) {\r\n        this.select(\r\n          Math.min(idx, this.caretIndex),\r\n          Math.max(idx, this.caretIndex),\r\n        );\r\n      } else {\r\n        this.selectionState = SelectionState.Caret;\r\n      }\r\n    }\r\n    return super.pointCollision(point);\r\n  }\r\n\r\n  private keyPressCaret(e: IKeyPressEvent) {\r\n    if (unicodeCharacterTest.test(e.key)) {\r\n      this.text.splice(this.caretIndex, 0, e.key);\r\n      this.moveCaretRight();\r\n      return;\r\n    }\r\n  }\r\n  private keyDownCaret(e: IKeyDownEvent): void {\r\n    switch (e.key) {\r\n      case \"Backspace\":\r\n        this.text.splice(this.caretIndex - 1, 1);\r\n        this.moveCaretLeft();\r\n        break;\r\n      case \"Delete\":\r\n        this.text.splice(this.caretIndex, 1);\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (e.shift) {\r\n          const end = this.caretIndex - 1;\r\n          if (end < 0) {\r\n            break;\r\n          }\r\n          this.select(end, this.caretIndex);\r\n          break;\r\n        }\r\n        this.moveCaretLeft();\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (e.shift) {\r\n          const end = this.caretIndex + 1;\r\n          if (end > this.text.length) {\r\n            break;\r\n          }\r\n          this.select(this.caretIndex, end);\r\n          break;\r\n        }\r\n        this.moveCaretRight();\r\n        break;\r\n      case \"End\":\r\n        if (e.shift) {\r\n          const end = this.text.length;\r\n          if (end !== this.caretIndex) {\r\n            this.select(this.caretIndex, end);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = this.text.length;\r\n        break;\r\n      case \"Home\":\r\n        if (e.shift) {\r\n          if (this.caretIndex !== 0) {\r\n            this.select(0, this.caretIndex);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = 0;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private keyPressCaretInsert(e: IKeyPressEvent): void {\r\n    if (unicodeCharacterTest.test(e.key)) {\r\n      this.text.splice(this.caretIndex, 1, e.key);\r\n      this.moveCaretRight();\r\n      return;\r\n    }\r\n  }\r\n  private keyDownCaretInsert(e: IKeyDownEvent): void {\r\n    switch (e.key) {\r\n      case \"Backspace\":\r\n        this.text.splice(this.caretIndex - 1, 1);\r\n        this.moveCaretLeft();\r\n        break;\r\n      case \"Delete\":\r\n        this.text.splice(this.caretIndex, 1);\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (e.shift) {\r\n          const end = this.caretIndex - 1;\r\n          if (end < 0) {\r\n            break;\r\n          }\r\n          this.select(end, this.caretIndex);\r\n          break;\r\n        }\r\n        this.moveCaretLeft();\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (e.shift) {\r\n          const end = this.caretIndex + 1;\r\n          if (end > this.text.length) {\r\n            break;\r\n          }\r\n          this.select(this.caretIndex, end);\r\n          break;\r\n        }\r\n        this.moveCaretRight();\r\n        break;\r\n      case \"End\":\r\n        if (e.shift) {\r\n          const end = this.text.length;\r\n          if (end !== this.caretIndex) {\r\n            this.select(this.caretIndex, end);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = this.text.length;\r\n        break;\r\n      case \"Home\":\r\n        if (e.shift) {\r\n          if (this.caretIndex !== 0) {\r\n            this.select(0, this.caretIndex);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = 0;\r\n        break;\r\n    }\r\n  }\r\n  private keyPressSelection(e: IKeyPressEvent): void {\r\n    if (unicodeCharacterTest.test(e.key)) {\r\n      this.text.splice(this.selectionStart, this.selectionEnd - this.selectionStart, e.key);\r\n      this.caretIndex = this.selectionStart + 1;\r\n      this.selectionState = SelectionState.Caret;\r\n      this.selectionStart = -1;\r\n      this.selectionEnd = -1;\r\n      return;\r\n    }\r\n  }\r\n  private keyDownSelection(e: IKeyDownEvent): void {\r\n\r\n    switch (e.key) {\r\n      case \"Delete\":\r\n      case \"Backspace\":\r\n        this.text.splice(this.selectionStart, this.selectionEnd - this.selectionStart);\r\n        this.caretIndex = this.selectionStart;\r\n        this.selectionState = SelectionState.Caret;\r\n        break;\r\n      case \"ArrowLeft\":\r\n        if (e.shift) {\r\n          const start = this.caretIndex;\r\n          const end = (this.selectionStart === this.caretIndex ? this.selectionEnd : this.selectionStart) - 1;\r\n          if (end < 0) {\r\n            break;\r\n          }\r\n          if (start === end) {\r\n            this.selectionState = SelectionState.Caret;\r\n            break;\r\n          }\r\n          this.select(\r\n            Math.min(start, end),\r\n            Math.max(start, end),\r\n          );\r\n          break;\r\n        }\r\n        this.caretIndex = this.selectionStart;\r\n        this.selectionState = SelectionState.Caret;\r\n        break;\r\n      case \"ArrowRight\":\r\n        if (e.shift) {\r\n          const start = this.caretIndex;\r\n          const end = (this.selectionStart === this.caretIndex ? this.selectionEnd : this.selectionStart) + 1;\r\n          if (end > this.text.length) {\r\n            break;\r\n          }\r\n          if (start === end) {\r\n            this.selectionState = SelectionState.Caret;\r\n            break;\r\n          }\r\n          this.select(\r\n            Math.min(start, end),\r\n            Math.max(start, end),\r\n          );\r\n          break;\r\n        }\r\n        this.caretIndex = this.selectionEnd;\r\n        this.selectionState = SelectionState.Caret;\r\n        break;\r\n        case \"End\":\r\n        if (e.shift) {\r\n          const end = this.text.length;\r\n          if (end !== this.caretIndex) {\r\n            this.select(this.caretIndex, end);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = this.text.length;\r\n        this.selectionState = SelectionState.Caret;\r\n        break;\r\n      case \"Home\":\r\n        if (e.shift) {\r\n          if (this.caretIndex !== 0) {\r\n            this.select(0, this.caretIndex);\r\n          }\r\n          break;\r\n        }\r\n        this.caretIndex = 0;\r\n        this.selectionState = SelectionState.Caret;\r\n        break;\r\n    }\r\n  }\r\n\r\n  private renderCaret(ctx: CanvasRenderingContext2D): void {\r\n    const text = this.text.join(\"\");\r\n\r\n    ctx.translate(\r\n      this.padding.left + this.textScroll,\r\n      this.padding.top,\r\n    );\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    const midline = (this.height - this.padding.top - this.padding.bottom) * 0.5;\r\n    ctx.fillText(text, 0, midline);\r\n\r\n    if (this.showCaret && this.focused) {\r\n      ctx.beginPath();\r\n      ctx.moveTo(this.caretX, 0);\r\n      ctx.lineTo(this.caretX, this.height - this.padding.top - this.padding.bottom);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  private renderSelection(ctx: CanvasRenderingContext2D): void {\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    const firstText = this.text.slice(0, this.selectionStart).join(\"\");\r\n    const secondText = this.text.slice(this.selectionStart, this.selectionEnd).join(\"\");\r\n    const thirdText = this.text.slice(this.selectionEnd).join(\"\");\r\n    const firstMeasure = ctx.measureText(firstText).width;\r\n    const secondMeasure = ctx.measureText(secondText).width;\r\n\r\n    // pre-selected text\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    const midline = (this.height - this.padding.top - this.padding.bottom) * 0.5;\r\n    ctx.translate(\r\n      this.padding.left + this.textScroll,\r\n      this.padding.top + midline,\r\n    );\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(firstText, 0, 0);\r\n\r\n    // selected text\r\n    ctx.translate(firstMeasure, 0);\r\n    ctx.fillStyle = this.selectedFontBackgroundColor;\r\n    ctx.fillRect(0, -midline, secondMeasure, this.height - this.padding.top - this.padding.bottom);\r\n    ctx.fillStyle = this.selectedFontColor;\r\n    ctx.fillText(secondText, 0, 0);\r\n\r\n    // post-selected text\r\n    ctx.translate(secondMeasure, 0);\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(thirdText, 0, 0);\r\n  }\r\n\r\n  private renderCaretInsert(ctx: CanvasRenderingContext2D): void {\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    const firstText = this.text.slice(0, this.caretIndex).join(\"\");\r\n    const secondText = this.text[this.caretIndex];\r\n    const thirdText = this.text.slice(this.caretIndex + 1).join(\"\");\r\n    const firstMeasure = ctx.measureText(firstText).width;\r\n    const secondMeasure = ctx.measureText(secondText).width;\r\n\r\n    // pre-selected text\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    const midline = (this.height - this.padding.top - this.padding.bottom) * 0.5;\r\n    ctx.translate(\r\n      this.padding.left + this.textScroll,\r\n      this.padding.top + midline,\r\n    );\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(firstText, 0, 0);\r\n\r\n    if (!secondText) {\r\n      if (this.showCaret && this.focused) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.caretX, -midline);\r\n        ctx.lineTo(this.caretX, this.height - this.padding.top - this.padding.bottom - midline);\r\n        ctx.stroke();\r\n      }\r\n      return;\r\n    }\r\n    // selected text\r\n    ctx.translate(firstMeasure, 0);\r\n    ctx.fillStyle = this.selectedFontBackgroundColor;\r\n    ctx.fillRect(0, -midline, secondMeasure, this.height - this.padding.top - this.padding.bottom);\r\n    ctx.fillStyle = this.selectedFontColor;\r\n    ctx.fillText(secondText, 0, 0);\r\n\r\n    if (!thirdText) {\r\n      return;\r\n    }\r\n    // post-selected text\r\n    ctx.translate(secondMeasure, 0);\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(thirdText, 0, 0);\r\n  }\r\n\r\n  private moveCaretLeft() {\r\n    this.caretIndex -= 1;\r\n    this.frameCount = 0;\r\n    this.showCaret = true;\r\n    if (this.caretIndex < 0) {\r\n      this.caretIndex = 0;\r\n    }\r\n  }\r\n\r\n  private moveCaretRight() {\r\n    this.caretIndex += 1;\r\n    this.frameCount = 0;\r\n    this.showCaret = true;\r\n    if (this.caretIndex > this.text.length) {\r\n      this.caretIndex = this.text.length;\r\n    }\r\n  }\r\n\r\n  private getCaretIndex(relativeX: number): number {\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    let idx = 0;\r\n    let str = \"\";\r\n    // tslint:disable:prefer-for-of\r\n    for (let i = 0; i < this.text.length; i++) {\r\n      str += this.text[i];\r\n      if ((tempctx.measureText(str).width + this.textScroll) > relativeX) {\r\n        return idx;\r\n      }\r\n      idx += 1;\r\n    }\r\n    return this.text.length;\r\n  }\r\n}\r\n","import { IContainer } from \"../view/Container\";\r\nimport { IInteractionManager } from \"../view/InteractionManager\";\r\nimport { ISprite } from \"../view/Sprite\";\r\n\r\nexport type EventCallback<T> = (events: T) => void;\r\n\r\nexport interface ISenpaiEvent {\r\n  eventType: string;\r\n  stage: IContainer;\r\n  source: ISprite | IInteractionManager;\r\n}\r\n\r\nexport interface IValueChangeEvent<T> extends ISenpaiEvent {\r\n  eventType: \"ValueChange\";\r\n  property: string;\r\n  value: T;\r\n  previousValue: T;\r\n}\r\n\r\nexport interface IDisposer {\r\n  dispose: () => void;\r\n}\r\n\r\nexport class EventEmitter<T extends ISenpaiEvent> {\r\n  public callbacks: Array<EventCallback<T>> = [];\r\n  public clear() {\r\n    this.callbacks = [];\r\n  }\r\n  public listen(callback: EventCallback<T>): IDisposer {\r\n    this.callbacks.push(callback);\r\n    return {\r\n      dispose: () => {\r\n        if (this.callbacks.includes(callback)) {\r\n          this.callbacks.splice(\r\n            this.callbacks.indexOf(callback),\r\n            1,\r\n          );\r\n        }\r\n      },\r\n    };\r\n  }\r\n  public promise(): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      const disposer = this.listen((event) => {\r\n        disposer.dispose();\r\n        resolve(event);\r\n      });\r\n    });\r\n  }\r\n  public once(callback: EventCallback<T>): IDisposer {\r\n    const disposer = this.listen((events: T) => {\r\n      callback(events);\r\n      disposer.dispose();\r\n    });\r\n    return disposer;\r\n  }\r\n\r\n  public emit(events: T): void {\r\n    for (const callback of this.callbacks.slice()) {\r\n      callback(events);\r\n    }\r\n  }\r\n}\r\n","import * as eases from \"../ease\";\r\nimport {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyPressEvent,\r\n  IKeyUpEvent,\r\n  IPointClickEvent,\r\n  IPointDownEvent,\r\n  IPointEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  IValueChangeEvent,\r\n} from \"../events\";\r\nimport { ISpriteLoadedEvent } from \"../events/SpriteEvents\";\r\nimport { CanvasMatrix2D, copy, Identity, transformPoint, use } from \"../matrix\";\r\nimport { createTextureMap, ISpriteSheet, ITextureMap, loadImage, loadSpriteSheet } from \"../spritesheet\";\r\nimport {\r\n  Cursor,\r\n  IInteractionPoint,\r\n  IKeyFrameEntry,\r\n  ISize,\r\n  ISpritePosition,\r\n  KeyFrameEntryType,\r\n  SpriteType,\r\n} from \"../util\";\r\nimport { IContainer } from \"./Container\";\r\nimport { IPanel } from \"./Panel\";\r\nimport { IStage } from \"./Stage\";\r\n\r\n// import { IStage } from \"./Stage\";\r\n\r\nexport interface ISprite extends ISize {\r\n  id: string;\r\n  parent: ISprite;\r\n  container: IContainer;\r\n  readonly type: SpriteType;\r\n\r\n  // position\r\n  previousPosition: CanvasMatrix2D;\r\n\r\n  inverse: CanvasMatrix2D;\r\n  interpolatedAlpha: number;\r\n  previousAlpha: number;\r\n  z: number;\r\n  parentHoverCheck: boolean;\r\n\r\n  // animation\r\n  textures: ITextureMap;\r\n  lastInterpolated: number;\r\n  interpolatedPosition: CanvasMatrix2D;\r\n\r\n  // stage properties\r\n  active: boolean;\r\n  hover: boolean;\r\n  down: boolean;\r\n  focused: boolean;\r\n  tabIndex: number;\r\n  cursor: Cursor;\r\n  loaded: Promise<void>;\r\n  texture: string;\r\n\r\n  // events\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointDownEvent: EventEmitter<IPointEvent>;\r\n  pointClickEvent: EventEmitter<IPointClickEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n  keyPressEvent: EventEmitter<IKeyPressEvent>;\r\n  loadedEvent: EventEmitter<ISpriteLoadedEvent>;\r\n\r\n  textureChangeEvent: EventEmitter<IValueChangeEvent<string>>;\r\n\r\n  // animation properties\r\n  keyFrames: IKeyFrameEntry[];\r\n\r\n  broadPhase(point: IInteractionPoint): boolean;\r\n  narrowPhase(point: IInteractionPoint): ISprite;\r\n  isHovering(point: IInteractionPoint, now: number): ISprite;\r\n  isFocused(): ISprite;\r\n  pointCollision(point: IInteractionPoint): boolean;\r\n  pointClick(point: IInteractionPoint): void;\r\n  setTexture(texture: string): this;\r\n  setZ(z: number): this;\r\n  visible(alpha: number): this;\r\n  interpolate(now: number): void;\r\n  skipAnimation(now: number): boolean;\r\n  update(): void;\r\n  render(ctx: CanvasRenderingContext2D): void;\r\n  keyDown(event: IKeyDownEvent): void;\r\n  keyUp(event: IKeyUpEvent): void;\r\n  keyPress(event: IKeyPressEvent): void;\r\n\r\n  // animation functions and properties\r\n  wait(length: number): this;\r\n  move(to: CanvasMatrix2D): this;\r\n  over(animationLength: number): this;\r\n  with(ease: eases.EaseFunc): this;\r\n  movePosition(to: ISpritePosition): this;\r\n  repeat(): this;\r\n  clearAnimation(now: number): this;\r\n  getStage(): IStage;\r\n}\r\n\r\nexport interface ISpriteProps {\r\n  id: string;\r\n  position: CanvasMatrix2D;\r\n  textures?: ITextureMap;\r\n  alpha?: number;\r\n  z?: number;\r\n  source: Promise<ImageBitmap>;\r\n  definition: Promise<ISpriteSheet>;\r\n}\r\n\r\nexport class Sprite implements ISprite {\r\n  public id: string = \"\";\r\n  public type: SpriteType = SpriteType.Sprite;\r\n  public previousPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public interpolatedPosition: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public inverse: CanvasMatrix2D = Identity.slice() as CanvasMatrix2D;\r\n  public interpolatedAlpha: number = 1;\r\n  public previousAlpha: number = 1;\r\n  public z: number = 0;\r\n  public parent: ISprite = null;\r\n  public container: IContainer = null;\r\n  public lastInterpolated: number = 0;\r\n  public cursor: Cursor = Cursor.auto;\r\n  public active: boolean = false;\r\n  public hover: boolean = false;\r\n  public down: boolean = false;\r\n  public textures: ITextureMap = {};\r\n  public texture: string;\r\n  public loaded: Promise<void> = null;\r\n  public focused: boolean = false;\r\n  public tabIndex: number = 0;\r\n  public width: number = 0;\r\n  public height: number = 0;\r\n  public parentHoverCheck: boolean = true;\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n  public pointClickEvent: EventEmitter<IPointClickEvent> = new EventEmitter<IPointClickEvent>();\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n  public keyPressEvent: EventEmitter<IKeyPressEvent> = new EventEmitter<IKeyPressEvent>();\r\n  public loadedEvent: EventEmitter<ISpriteLoadedEvent> = new EventEmitter<ISpriteLoadedEvent>();\r\n  public textureChangeEvent: EventEmitter<IValueChangeEvent<string>> = new EventEmitter<IValueChangeEvent<string>>();\r\n  public keyFrames: IKeyFrameEntry[] = [];\r\n\r\n  constructor(props: ISpriteProps) {\r\n    this.id = props.id;\r\n    const position: CanvasMatrix2D = props.position || Identity.slice() as CanvasMatrix2D;\r\n    this.textures = props.textures ? props.textures : this.textures;\r\n    use(position)\r\n      .setTo(this.previousPosition)\r\n      .setTo(this.interpolatedPosition);\r\n\r\n    if (props.hasOwnProperty(\"alpha\")) {\r\n      this.previousAlpha = this.interpolatedAlpha = props.alpha;\r\n    }\r\n    if (props.hasOwnProperty(\"z\")) {\r\n      this.z = props.z;\r\n    }\r\n    if (props.source && props.definition) {\r\n      this.loadTexture(\r\n        props.definition,\r\n        props.source,\r\n      );\r\n    }\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    return point.tx >= 0 && point.tx <= this.width && point.ty >= 0 && point.ty <= this.height;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    return this;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    return true;\r\n  }\r\n\r\n  public pointClick(point: IInteractionPoint): void {\r\n    // no op\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    this.interpolate(now);\r\n    if (this.parentHoverCheck) {\r\n      let parent: ISprite = this.parent;\r\n      while (parent) {\r\n        transformPoint(point, parent.inverse);\r\n        if (parent.broadPhase(point) && parent.narrowPhase(point)) {\r\n          parent = parent.parent;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    transformPoint(point, this.inverse);\r\n    if (this.broadPhase(point)) {\r\n      return this.narrowPhase(point);\r\n    }\r\n  }\r\n\r\n  public isFocused(): ISprite {\r\n    return this.focused ? this : null;\r\n  }\r\n\r\n  public wait(length: number): this {\r\n    if (!Number.isFinite(length)) {\r\n      throw new Error(`Cannot create wait keyframe: wait time is not finite (received: ${length})`);\r\n    }\r\n    if (length < 0) {\r\n      throw new Error(`Cannot create wait keyframe: wait time is not positive (received: ${length})`);\r\n    }\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (lastKeyFrame && lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(`Cannot move sprite after an animation repeats. (Did you call repeat before sprite.wait?)`);\r\n    }\r\n    const kf = this.createKeyFrame();\r\n    kf.type = KeyFrameEntryType.Wait;\r\n    kf.end = kf.start + length;\r\n    this.keyFrames.push(kf);\r\n    return this;\r\n  }\r\n  public movePosition(position: ISpritePosition): this {\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (lastKeyFrame && lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(\r\n        `Cannot move sprite after an animation repeats. (Did you call repeat before sprite.movePosition?)`,\r\n      );\r\n    }\r\n\r\n    const sx = position.sx || position.sx === 0 ? position.sx : position.s;\r\n    const sy = position.sy || position.sy === 0 ? position.sy : position.s;\r\n    const kf = this.createKeyFrame();\r\n\r\n    const { value } = copy(Identity)\r\n      .translate(position.x || 0, position.y || 0)\r\n      .rotate(position.r || 0)\r\n      .scale(sx === 0 ? 0 : sx || 1, sy === 0 ? 0 : sy || 1)\r\n      .translate(position.cx ? -position.cx : 0, position.cy ? -position.cy : 0);\r\n    kf.to = value;\r\n\r\n    this.keyFrames.push(kf);\r\n    return this;\r\n  }\r\n\r\n  public move(position: CanvasMatrix2D): this {\r\n    for (let i = 0; i < 6; i++) {\r\n      if (!Number.isFinite(position[i])) {\r\n        throw new Error(`Invalid Canvas Matrix for sprite ${this.id}, property ${i} is not a finite value.`);\r\n      }\r\n    }\r\n\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (lastKeyFrame && lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(`Cannot move sprite after an animation repeats. (Did you call repeat before sprite.move?)`);\r\n    }\r\n\r\n    const kf = this.createKeyFrame();\r\n    kf.to = copy(position).value;\r\n    this.keyFrames.push(kf);\r\n\r\n    return this;\r\n  }\r\n\r\n  public visible(alpha: number = 1): this {\r\n    if (!Number.isFinite(alpha)) {\r\n      throw new Error(\r\n        `Cannot set alpha value on sprite ${this.id}: ${alpha} is not finite. This results in undefined behavior.`,\r\n      );\r\n    }\r\n    if (alpha < 0 || alpha > 1) {\r\n      throw new Error(\r\n        `Cannot set alpha value on sprite ${this.id}: ${alpha} is not within range [0, 1].`,\r\n      );\r\n    }\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (lastKeyFrame && lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(\r\n        `Cannot make sprite visible after an animation repeats. (Did you call repeat before sprite.visible?)`,\r\n      );\r\n    }\r\n\r\n    const kf = lastKeyFrame || this.createKeyFrame();\r\n    kf.alpha = alpha;\r\n\r\n    if (this.keyFrames.length === 0) {\r\n      this.keyFrames.push(kf);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public setZ(z: number): this {\r\n    if (!Number.isFinite(z)) {\r\n      throw new Error(\r\n        `Cannot set Z value on sprite ${this.id}: ${z} is not finite. This results in undefined behavior.`,\r\n      );\r\n    }\r\n    this.z = z;\r\n    return this;\r\n  }\r\n\r\n  public over(timespan: number): this {\r\n    if (!Number.isFinite(timespan)) {\r\n      throw new Error(`Cannot set timespan: Timespan is not finite (received value ${timespan})`);\r\n    }\r\n    if (timespan < 0) {\r\n      throw new Error(`Cannot set timespan: Timespan is not positive (received value ${timespan})`);\r\n    }\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (!lastKeyFrame) {\r\n      throw new Error(`Cannot set timespan: no keyframe exists.`);\r\n    }\r\n\r\n    if (lastKeyFrame && lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(\r\n        `Cannot change sprite animation length after an animation repeats. (Did you call repeat before sprite.over?)`,\r\n      );\r\n    }\r\n    lastKeyFrame.end = lastKeyFrame.start + timespan;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n\r\n    if (!lastKeyFrame) {\r\n      return false;\r\n    }\r\n\r\n    if (lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      return false;\r\n    }\r\n\r\n    this.clearAnimation(now);\r\n    return lastKeyFrame.end > now;\r\n  }\r\n\r\n  public update(): void {\r\n    // No op\r\n  }\r\n  public interpolate(now: number): void {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    this.lastInterpolated = now;\r\n    const firstKeyFrame = this.keyFrames[0];\r\n    now = Math.max(\r\n      firstKeyFrame ? firstKeyFrame.start : 0,\r\n      now,\r\n    );\r\n    for (const kf of this.keyFrames) {\r\n      if (kf.start <= now) {\r\n        const progress = (now - kf.start) / (kf.end - kf.start);\r\n        const ratio = kf.ease(progress);\r\n        use(this.interpolatedPosition)\r\n          .set(\r\n            progress > 1\r\n              ? kf.to\r\n              : [\r\n                kf.from[0] + ratio * (kf.to[0] - kf.from[0]),\r\n                kf.from[1] + ratio * (kf.to[1] - kf.from[1]),\r\n                kf.from[2] + ratio * (kf.to[2] - kf.from[2]),\r\n                kf.from[3] + ratio * (kf.to[3] - kf.from[3]),\r\n                kf.from[4] + ratio * (kf.to[4] - kf.from[4]),\r\n                kf.from[5] + ratio * (kf.to[5] - kf.from[5]),\r\n              ],\r\n          );\r\n        this.interpolatedAlpha = kf.previousAlpha + ratio * (kf.alpha - kf.previousAlpha);\r\n      }\r\n    }\r\n\r\n    copy(this.interpolatedPosition)\r\n      .inverse()\r\n      .setTo(this.inverse);\r\n\r\n    if (this.parent) {\r\n      // assert the parent is properly moved\r\n      this.parent.interpolate(now);\r\n      const parent = this.parent as IPanel;\r\n      copy(parent.inverse)\r\n        .translate(-parent.padding.left, -parent.padding.top)\r\n        .transform(this.inverse)\r\n        .setTo(this.inverse);\r\n    }\r\n  }\r\n\r\n  public setTexture(texture: string): this {\r\n    const oldTexture = this.texture;\r\n    this.texture = texture;\r\n    this.width = this.textures[this.texture].width;\r\n    this.height = this.textures[this.texture].height;\r\n\r\n    if (oldTexture !== this.texture) {\r\n      this.textureChangeEvent.emit({\r\n        eventType: \"ValueChange\",\r\n        previousValue: oldTexture,\r\n        property: \"texture\",\r\n        source: this,\r\n        stage: this.container,\r\n        value: this.texture,\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures[this.texture], 0, 0);\r\n  }\r\n\r\n  public keyDown(event: IKeyDownEvent): void {\r\n    this.keyDownEvent.emit(event);\r\n  }\r\n\r\n  public keyUp(event: IKeyUpEvent): void {\r\n    this.keyUpEvent.emit(event);\r\n  }\r\n\r\n  public keyPress(event: IKeyPressEvent): void {\r\n    this.keyPressEvent.emit(event);\r\n  }\r\n\r\n  public with(ease: eases.EaseFunc): this {\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    if (!lastKeyFrame) {\r\n      throw new Error(\"Cannot use provided ease because no keyFrames have been created.\");\r\n    }\r\n    if (typeof ease !== \"function\") {\r\n      throw new Error(`Cannot set ease: Ease is not a function. (Received: ${ease})`);\r\n    }\r\n    if (lastKeyFrame.type === KeyFrameEntryType.Repeat) {\r\n      throw new Error(\"Cannot set ease function of KeyFrame type 'repeat.'\");\r\n    }\r\n    lastKeyFrame.ease = ease;\r\n    return this;\r\n  }\r\n\r\n  public repeat(): this {\r\n    const kf = this.createKeyFrame();\r\n    kf.type = KeyFrameEntryType.Repeat;\r\n    this.keyFrames.push(kf);\r\n    return this;\r\n  }\r\n\r\n  public clearAnimation(now: number): this {\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n    const alpha = lastKeyFrame\r\n      ? lastKeyFrame.alpha\r\n      : this.interpolatedAlpha;\r\n    this.interpolatedAlpha = alpha;\r\n    this.previousAlpha = alpha;\r\n\r\n    use(this.interpolatedPosition).set(\r\n      lastKeyFrame\r\n        ? lastKeyFrame.to\r\n        : this.interpolatedPosition,\r\n    );\r\n    use(this.previousPosition).set(this.interpolatedPosition);\r\n\r\n    this.lastInterpolated = now;\r\n    this.keyFrames = [];\r\n    return this;\r\n  }\r\n\r\n  public getStage(): IStage {\r\n    if (this.container) {\r\n      return this.container as IStage;\r\n    }\r\n    if (this.parent) {\r\n      return this.parent.getStage();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private async loadTexture(defintion: Promise<ISpriteSheet>, source: Promise<ImageBitmap>): Promise<void> {\r\n    this.textures = await createTextureMap(defintion, source);\r\n    this.loadedEvent.emit({\r\n      definition: await defintion,\r\n      eventType: \"SpriteLoaded\",\r\n      source: this,\r\n      spriteSource: await source,\r\n      stage: this.container,\r\n    });\r\n  }\r\n\r\n  private createKeyFrame(): IKeyFrameEntry {\r\n    const lastKeyFrame = this.getLastKeyFrame();\r\n\r\n    const previousPosition = lastKeyFrame\r\n      ? lastKeyFrame.to\r\n      : this.interpolatedPosition;\r\n    const alpha = lastKeyFrame\r\n      ? lastKeyFrame.alpha\r\n      : this.interpolatedAlpha;\r\n\r\n    const start = lastKeyFrame\r\n      ? lastKeyFrame.end\r\n      : Date.now();\r\n\r\n    return {\r\n      alpha,\r\n      ease: lastKeyFrame ? lastKeyFrame.ease : eases.easeLinear,\r\n      end: start,\r\n      from: copy(previousPosition).value,\r\n      previousAlpha: alpha,\r\n      start,\r\n      to: copy(previousPosition).value,\r\n      type: KeyFrameEntryType.Move,\r\n    };\r\n  }\r\n\r\n  private getLastKeyFrame(): IKeyFrameEntry {\r\n    return this.keyFrames.length > 0 ? this.keyFrames[this.keyFrames.length - 1] : null;\r\n  }\r\n}\r\n","import { Cursor, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IButton extends ISprite {\r\n  selected: boolean;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  text: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface IButtonProps extends ISpriteProps {\r\n  selected?: boolean;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  text?: string;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Button extends Sprite implements IButton {\r\n  public readonly type: SpriteType = SpriteType.Button;\r\n  public selected: boolean = false;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public text: string =  \"\";\r\n  public textAlign: TextAlign = TextAlign.center;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public cursor: Cursor = Cursor.pointer;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props);\r\n    this.selected = props.selected || false;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.text = props.text || this.text;\r\n    this.textAlign = props.textAlign;\r\n    this.textBaseline = props.textBaseline;\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const selected = this.selected ? \"Selected\" : \"Unselected\";\r\n    this.setTexture(`${active}_${hover}_${selected}`);\r\n\r\n    super.update();\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.textures[this.texture].width * 0.5, this.textures[this.texture].height * 0.5);\r\n    ctx.textBaseline = TextBaseline.middle;\r\n    ctx.textAlign = TextAlign.center;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICharacterProps extends ISpriteProps {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport interface ICharacter extends ISprite {\r\n  displayName: string;\r\n  color: string;\r\n}\r\n\r\nexport class Character extends Sprite implements ICharacter {\r\n  public readonly type: SpriteType = SpriteType.Character;\r\n  public name: string = \"\";\r\n  public displayName: string = \"\";\r\n  public color: string = \"\";\r\n  constructor(props: ICharacterProps) {\r\n    super(props);\r\n    this.displayName = props.displayName;\r\n    this.color = props.color;\r\n  }\r\n}\r\n","import { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport {\r\n  Cursor,\r\n  IInteractionPoint,\r\n  SpriteType,\r\n  TextAlign,\r\n  TextBaseline,\r\n} from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ICheckbox extends ISprite {\r\n  checked: boolean;\r\n  text: string;\r\n  font: string;\r\n  fontColor: string;\r\n  fontSize: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>>;\r\n\r\n  setText(text: string): this;\r\n  toggle(): this;\r\n}\r\n\r\nexport interface ICheckboxProps extends ISpriteProps {\r\n  checked?: boolean;\r\n  text?: string;\r\n  font?: string;\r\n  fontColor?: string;\r\n  fontSize?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n}\r\n\r\nexport class Checkbox extends Sprite implements ICheckbox {\r\n  public readonly type: SpriteType = SpriteType.Checkbox;\r\n  public checked: boolean = false;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public fontSize: number = 12;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.middle;\r\n  public checkedChangeEvent: EventEmitter<IValueChangeEvent<boolean>> = new EventEmitter<IValueChangeEvent<boolean>>();\r\n  public cursor: Cursor = Cursor.pointer;\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n    this.checked = Boolean(props.checked) || false;\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n  }\r\n\r\n  public toggle(): this {\r\n    const previousValue = this.checked;\r\n    this.checked = !this.checked;\r\n    this.checkedChangeEvent.emit({\r\n      eventType: \"ValueChange\",\r\n      previousValue,\r\n      property: \"checked\",\r\n      source: this,\r\n      stage: this.container,\r\n      value: this.checked,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public pointClick(point: IInteractionPoint): void {\r\n    this.toggle();\r\n    return super.pointClick(point);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    super.render(ctx);\r\n    ctx.translate(this.width * 1.1, this.height / 2);\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    const checked = this.checked ? \"Checked\" : \"Unchecked\";\r\n    this.setTexture(`${active}_${hover}_${checked}`);\r\n    super.update();\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { Cursor, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface IClose extends ISprite {\r\n\r\n}\r\n\r\nexport interface ICloseProps extends ISpriteProps {\r\n\r\n}\r\n\r\nexport class Close extends Sprite implements IClose {\r\n  public readonly type: SpriteType = SpriteType.Close;\r\n\r\n  constructor(props: ICloseProps) {\r\n    super(props);\r\n  }\r\n  public update(): void {\r\n    const active = this.active ? \"Active\" : \"Inactive\";\r\n    const hover = this.hover ? \"Hover\" : \"NoHover\";\r\n    this.setTexture(`${active}_${hover}`);\r\n\r\n    this.cursor = this.hover ? Cursor.pointer : Cursor.auto;\r\n    super.update();\r\n  }\r\n}\r\n","import { IInteractionPoint, IPlayable } from \"../util\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IContainer {\r\n  sprites: ISprite[];\r\n  playables: IPlayable[];\r\n  points: IInteractionPoint[];\r\n  audioContext: AudioContext;\r\n\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  addPlayable(sprite: IPlayable): this;\r\n  removePlayable(sprite: IPlayable): this;\r\n  addPoint(point: IInteractionPoint): this;\r\n  removePoint(point: IInteractionPoint): this;\r\n  getSpriteByID(id: string): ISprite | null;\r\n  getPlayableByID(id: string): IPlayable | null;\r\n  getPointByID(id: string): IInteractionPoint | null;\r\n}\r\n\r\nexport interface IContainerProps {\r\n  audioContext: AudioContext;\r\n}\r\n\r\nexport class Container implements IContainer {\r\n\r\n  public sprites: ISprite[] = [];\r\n  public playables: IPlayable[] = [];\r\n  public points: IInteractionPoint[] = [];\r\n  public audioContext: AudioContext = null;\r\n\r\n  constructor(props: IContainerProps) {\r\n    this.audioContext = props.audioContext;\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    if (!this.sprites.includes(sprite)) {\r\n      this.sprites.push(sprite);\r\n      sprite.container = this;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.container = null;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPlayable(sprite: IPlayable): this {\r\n    if (!this.playables.includes(sprite)) {\r\n      this.playables.push(sprite);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.connect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePlayable(sprite: IPlayable): this {\r\n    if (this.playables.includes(sprite)) {\r\n      this.playables.splice(this.playables.indexOf(sprite), 1);\r\n      // NOTE: This may be audio specific?\r\n      //      sprite.gain.disconnect(this.audioContext.destination);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public addPoint(point: IInteractionPoint): this {\r\n    if (!this.points.includes(point)) {\r\n      this.points.push(point);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public removePoint(point: IInteractionPoint): this {\r\n    if (this.points.includes(point)) {\r\n      this.points.splice(this.points.indexOf(point), 1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  public getSpriteByID(id: string): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPointByID(id: string): IInteractionPoint {\r\n    for (const sprite of this.points) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public getPlayableByID(id: string): IPlayable {\r\n    for (const sprite of this.playables) {\r\n      if (sprite.id === id) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IKeyDownEvent,\r\n  IKeyPressEvent,\r\n  IKeyUpEvent,\r\n  IMouseDownEvent,\r\n  IMouseMoveEvent,\r\n  IMouseUpEvent,\r\n  IPointDownEvent,\r\n  IPointMoveEvent,\r\n  IPointUpEvent,\r\n  ITouchCancelEvent,\r\n  ITouchEndEvent,\r\n  ITouchMoveEvent,\r\n  ITouchStartEvent,\r\n} from \"../events\";\r\nimport { IInteractionPoint, IKeyable, SpriteType, zSort } from \"../util\";\r\nimport { Container, IContainer, IContainerProps } from \"./Container\";\r\nimport { IPanel } from \"./Panel\";\r\nimport { ISprite, Sprite } from \"./Sprite\";\r\n\r\ninterface IInteractionPointIndex {\r\n  [id: number]: IInteractionPoint;\r\n}\r\n\r\ninterface IKeyIndex {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport interface IInteractionManager extends IContainer {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  mousePoint: IInteractionPoint;\r\n  touchPointIndex: IInteractionPointIndex;\r\n  keyIndex: IKeyIndex;\r\n  insertMode: boolean;\r\n\r\n  pointDownEvent: EventEmitter<IPointDownEvent>;\r\n  pointUpEvent: EventEmitter<IPointUpEvent>;\r\n  pointMoveEvent: EventEmitter<IPointMoveEvent>;\r\n\r\n  mouseDownEvent: EventEmitter<IMouseDownEvent>;\r\n  mouseUpEvent: EventEmitter<IMouseUpEvent>;\r\n  mouseMoveEvent: EventEmitter<IMouseMoveEvent>;\r\n\r\n  touchCancelEvent: EventEmitter<ITouchCancelEvent>;\r\n  touchEndEvent: EventEmitter<ITouchEndEvent>;\r\n  touchMoveEvent: EventEmitter<ITouchMoveEvent>;\r\n  touchStartEvent: EventEmitter<ITouchStartEvent>;\r\n\r\n  keyDownEvent: EventEmitter<IKeyDownEvent>;\r\n  keyUpEvent: EventEmitter<IKeyUpEvent>;\r\n  keyPressEvent: EventEmitter<IKeyPressEvent>;\r\n\r\n  hookEvents(): void;\r\n  dispose(): void;\r\n  createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint;\r\n  addTouchPoint(touch: Touch): IInteractionPoint;\r\n  removeTouchPoint(touch: Touch): void;\r\n  pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n  pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void;\r\n\r\n  // high level events\r\n  mouseDown(event: MouseEvent): void;\r\n  mouseUp(event: MouseEvent): void;\r\n  mouseMove(event: MouseEvent): void;\r\n  touchStart(event: TouchEvent): void;\r\n  touchEnd(event: TouchEvent): void;\r\n  touchMove(event: TouchEvent): void;\r\n  touchCancel(event: TouchEvent): void;\r\n\r\n  keyDown(event: KeyboardEvent | IKeyable): void;\r\n  keyUp(event: KeyboardEvent | IKeyable): void;\r\n  keyPress(event: KeyboardEvent | IKeyable): void;\r\n\r\n  setFocus(target: ISprite): void;\r\n  getFocusedSprite(): void;\r\n}\r\n\r\ninterface IInteractionPointEvent {\r\n  target: HTMLElement | Window;\r\n  event: string;\r\n  listener: (e: MouseEvent | TouchEvent) => void;\r\n}\r\ninterface IKeyboardEvent {\r\n  target: HTMLElement | Window;\r\n  event: string;\r\n  listener: (e: KeyboardEvent) => void;\r\n}\r\n\r\nexport interface IInteractionManagerProps extends IContainerProps {\r\n  canvas: HTMLCanvasElement;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class InteractionManager extends Container implements IInteractionManager {\r\n  public canvas: HTMLCanvasElement = null;\r\n  public ctx: CanvasRenderingContext2D = null;\r\n  public touchPointIndex: IInteractionPointIndex = {};\r\n  public keyIndex: IKeyIndex = {};\r\n  public mousePoint: IInteractionPoint = {\r\n    active: null,\r\n    captured: false,\r\n    clicked: false,\r\n    down: false,\r\n    firstDown: false,\r\n    hover: null,\r\n    id: \"mouse\",\r\n    tx: 0,\r\n    ty: 0,\r\n    type: \"Mouse\",\r\n    x: 0,\r\n    y: 0,\r\n  };\r\n  public insertMode: boolean = false;\r\n\r\n  public pointDownEvent: EventEmitter<IPointDownEvent> = new EventEmitter<IPointDownEvent>();\r\n  public pointUpEvent: EventEmitter<IPointUpEvent> = new EventEmitter<IPointUpEvent>();\r\n  public pointMoveEvent: EventEmitter<IPointMoveEvent> = new EventEmitter<IPointMoveEvent>();\r\n\r\n  public mouseDownEvent: EventEmitter<IMouseDownEvent> = new EventEmitter<IMouseDownEvent>();\r\n  public mouseUpEvent: EventEmitter<IMouseUpEvent> = new EventEmitter<IMouseUpEvent>();\r\n  public mouseMoveEvent: EventEmitter<IMouseMoveEvent> = new EventEmitter<IMouseMoveEvent>();\r\n\r\n  public touchCancelEvent: EventEmitter<ITouchCancelEvent> = new EventEmitter<ITouchCancelEvent>();\r\n  public touchEndEvent: EventEmitter<ITouchEndEvent> = new EventEmitter<ITouchEndEvent>();\r\n  public touchMoveEvent: EventEmitter<ITouchMoveEvent> = new EventEmitter<ITouchMoveEvent>();\r\n  public touchStartEvent: EventEmitter<ITouchStartEvent> = new EventEmitter<ITouchStartEvent>();\r\n\r\n  public keyDownEvent: EventEmitter<IKeyDownEvent> = new EventEmitter<IKeyDownEvent>();\r\n  public keyUpEvent: EventEmitter<IKeyUpEvent> = new EventEmitter<IKeyUpEvent>();\r\n  public keyPressEvent: EventEmitter<IKeyPressEvent> = new EventEmitter<IKeyPressEvent>();\r\n\r\n  private events: IInteractionPointEvent[] = [\r\n    { target: null, event: \"mousedown\", listener: e => this.mouseDown(e as MouseEvent) },\r\n    { target: window, event: \"mouseup\", listener: e => this.mouseUp(e as MouseEvent) },\r\n    { target: null, event: \"mousemove\", listener: e => this.mouseMove(e as MouseEvent) },\r\n    { target: null, event: \"touchstart\", listener: e => this.touchStart(e as TouchEvent) },\r\n    { target: window, event: \"touchend\", listener: e => this.touchEnd(e as TouchEvent) },\r\n    { target: null, event: \"touchmove\", listener: e => this.touchMove(e as TouchEvent) },\r\n    { target: window, event: \"touchcancel\", listener: e => this.touchCancel(e as TouchEvent) },\r\n  ];\r\n  private keyboardEvents: IKeyboardEvent[] = [\r\n    { target: window, event: \"keydown\", listener: e => this.keyDown(e as KeyboardEvent) },\r\n    { target: window, event: \"keypress\", listener: e => this.keyPress(e as KeyboardEvent) },\r\n    { target: window, event: \"keyup\", listener: e => this.keyUp(e as KeyboardEvent) },\r\n  ];\r\n\r\n  constructor(props: IInteractionManagerProps) {\r\n    super(props);\r\n    this.canvas = props.canvas;\r\n    if (!this.canvas) {\r\n      this.canvas = document.createElement(\"canvas\");\r\n      document.body.appendChild(this.canvas);\r\n    }\r\n    this.canvas.width = props.width;\r\n    this.canvas.height = props.height;\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.hookEvents();\r\n    this.addPoint(this.mousePoint);\r\n  }\r\n\r\n  public hookEvents(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n    this.keyboardEvents.forEach(\r\n      event => (event.target || this.canvas)\r\n        .addEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public dispose(): void {\r\n    this.events.forEach(\r\n      event => (event.target || this.canvas)\r\n        .removeEventListener(event.event, event.listener),\r\n    );\r\n  }\r\n\r\n  public mouseDown(event: MouseEvent): void {\r\n    this.mouseDownEvent.emit({\r\n      down: true,\r\n      eventType: \"MouseDown\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n    return this.pointDown(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseUp(event: MouseEvent): void {\r\n    this.mouseUpEvent.emit({\r\n      down: false,\r\n      eventType: \"MouseUp\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n    return this.pointUp(this.mousePoint, event);\r\n  }\r\n\r\n  public mouseMove(event: MouseEvent): void {\r\n    this.mouseMoveEvent.emit({\r\n      down: this.mousePoint.down,\r\n      eventType: \"MouseMove\",\r\n      rawEvent: event,\r\n      source: this,\r\n      stage: this,\r\n      x: event.clientX,\r\n      y: event.clientY,\r\n    });\r\n\r\n    return this.pointMove(this.mousePoint, event);\r\n  }\r\n\r\n  public touchStart(event: TouchEvent): void {\r\n    let touch: Touch;\r\n    let point: IInteractionPoint;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchStartEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchStart\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      point = this.addTouchPoint(touch);\r\n      this.pointDown(point, touch);\r\n    }\r\n  }\r\n\r\n  public touchEnd(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchEndEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchEnd\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n\r\n      if (!this.touchPointIndex[touch.identifier]) {\r\n        point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n        this.pointMove(point, touch);\r\n      } else {\r\n        point = this.touchPointIndex[touch.identifier];\r\n        this.pointUp(point, touch);\r\n        this.removeTouchPoint(touch);\r\n      }\r\n    }\r\n  }\r\n\r\n  public touchCancel(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchCancelEvent.emit({\r\n        down: false,\r\n        eventType: \"TouchCancel\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: null,\r\n        y: null,\r\n      });\r\n      if (this.touchPointIndex[touch.identifier]) {\r\n        point = this.touchPointIndex[touch.identifier];\r\n        this.pointCancel(point, touch);\r\n        this.removeTouchPoint(touch);\r\n      }\r\n    }\r\n  }\r\n\r\n  public touchMove(event: TouchEvent): void {\r\n    let touch: Touch = null;\r\n    let point: IInteractionPoint;\r\n\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < event.changedTouches.length; i++) {\r\n      touch = event.changedTouches[i];\r\n      this.touchMoveEvent.emit({\r\n        down: true,\r\n        eventType: \"TouchMove\",\r\n        rawEvent: event,\r\n        source: this,\r\n        stage: this,\r\n        touch,\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n      });\r\n      if (!this.touchPointIndex[touch.identifier]) {\r\n        point = this.addTouchPoint(touch);\r\n        point.down = true;\r\n      } else {\r\n        point = this.touchPointIndex[touch.identifier];\r\n      }\r\n      this.pointMove(point, touch);\r\n    }\r\n  }\r\n  public pointDown(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const alreadyDown = point.down;\r\n    if (!alreadyDown) {\r\n      point.down = true;\r\n      point.firstDown = true;\r\n    }\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    this.pointMove(point, position);\r\n    if (alreadyDown) {\r\n      return;\r\n    }\r\n    if (point.hover) {\r\n      point.active = point.hover;\r\n      point.active.down = true;\r\n      point.active.active = true;\r\n      this.setFocus(point.hover);\r\n      point.active.pointDownEvent.emit({\r\n        down: true,\r\n        eventType: \"PointDown\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.y,\r\n      });\r\n    } else {\r\n      this.setFocus(null);\r\n    }\r\n    this.pointDownEvent.emit({\r\n      down: true,\r\n      eventType: \"PointDown\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: point.active,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n    point.firstDown = false; // after this point, the point will not be considered \"just recently pressed\"\r\n  }\r\n\r\n  public pointUp(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    let source: ISprite = null;\r\n    this.pointMove(point, position);\r\n    if (!point.down) {\r\n      return;\r\n    }\r\n    point.down = false;\r\n    if (point.active) {\r\n      point.active.down = false;\r\n      point.active.active = false;\r\n      point.active.pointUpEvent.emit({\r\n        down: false,\r\n        eventType: \"PointUp\",\r\n        point,\r\n        previousX,\r\n        previousY,\r\n        source: point.active,\r\n        stage: this,\r\n        x: point.x,\r\n        y: point.x,\r\n      });\r\n\r\n      if (point.hover === point.active) {\r\n        point.active.pointClick(point);\r\n        point.active.pointClickEvent.emit({\r\n          down: false,\r\n          eventType: \"PointClick\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: point.active,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.x,\r\n        });\r\n      }\r\n      source = point.active;\r\n      point.active = null;\r\n    }\r\n\r\n    this.pointUpEvent.emit({\r\n      down: false,\r\n      eventType: \"PointUp\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: source || this,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.x,\r\n    });\r\n}\r\n\r\n  public pointMove(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    const now = Date.now();\r\n    const rect = this.canvas.getBoundingClientRect();\r\n    const previousX = point.x;\r\n    const previousY = point.y;\r\n    point.x = position.clientX - rect.left;\r\n    point.y = position.clientY - rect.top;\r\n\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n    // sprites sorted by ascending z level\r\n    // REASON: Higher z levels are drawn last, so forward-iterating through the\r\n    // array and drawing the sprites will yield the correct result.\r\n    this.sprites.sort(zSort);\r\n\r\n    // find the highest z level sprite the point collides with\r\n    // loop is reversed due to z levels being sorted ascendingly\r\n    let sprite: ISprite;\r\n    let hoveringSprite: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      sprite = this.sprites[i];\r\n      hoveringSprite = sprite.isHovering(point, now);\r\n\r\n      if (hoveringSprite) {\r\n        hoveringSprite.hover = true;\r\n        point.hover = hoveringSprite; // this can later be used by pointDown and pointUp\r\n        hoveringSprite.pointCollision(point);\r\n        hoveringSprite.pointMoveEvent.emit({\r\n          down: point.down,\r\n          eventType: \"PointMove\",\r\n          point,\r\n          previousX,\r\n          previousY,\r\n          source: sprite,\r\n          stage: this,\r\n          x: point.x,\r\n          y: point.y,\r\n        });\r\n        break; // we've found the highest z level sprite the point collides with\r\n      }\r\n    }\r\n    this.pointMoveEvent.emit({\r\n      down: point.down,\r\n      eventType: \"PointMove\",\r\n      point,\r\n      previousX,\r\n      previousY,\r\n      source: sprite,\r\n      stage: this,\r\n      x: point.x,\r\n      y: point.y,\r\n    });\r\n  }\r\n\r\n  public pointCancel(point: IInteractionPoint, position: Touch | MouseEvent): void {\r\n    if (point.active) {\r\n      point.active.active = false;\r\n      point.active = null;\r\n    }\r\n    if (point.hover) {\r\n      point.hover.hover = false;\r\n      point.hover = null;\r\n    }\r\n  }\r\n\r\n  public createInteractionPoint(id: string, type: \"Touch\" | \"Mouse\"): IInteractionPoint {\r\n    const point: IInteractionPoint = {\r\n      active: null,\r\n      captured: false,\r\n      clicked: false,\r\n      down: false,\r\n      firstDown: false,\r\n      hover: null,\r\n      id,\r\n      tx: 0,\r\n      ty: 0,\r\n      type,\r\n      x: 0,\r\n      y: 0,\r\n    };\r\n\r\n    return point;\r\n  }\r\n\r\n  public addTouchPoint(touch: Touch): IInteractionPoint {\r\n    const point = this.createInteractionPoint(touch.identifier.toString(), \"Touch\");\r\n    this.addPoint(point);\r\n    this.touchPointIndex[touch.identifier] = point;\r\n    return point;\r\n  }\r\n\r\n  public removeTouchPoint(touch: Touch): void {\r\n    const point: IInteractionPoint = this.touchPointIndex[touch.identifier];\r\n    delete this.touchPointIndex[touch.identifier];\r\n    this.removePoint(point);\r\n  }\r\n\r\n  public hoverCheck(now: number): void {\r\n    let point: IInteractionPoint;\r\n    let sprite: ISprite;\r\n    this.sprites.sort(zSort);\r\n\r\n    for (point of this.points) {\r\n      if (point.hover) {\r\n        point.hover.hover = false;\r\n        point.hover = null;\r\n      }\r\n\r\n      // TODO: determine z order point capture logic\r\n      // TODO: determine parent collision point capture logic\r\n      let hoveringSprite: ISprite;\r\n      if (point.active) {\r\n        hoveringSprite = point.active.isHovering(point, now);\r\n        if (hoveringSprite) {\r\n          hoveringSprite.pointCollision(point);\r\n          point.hover = hoveringSprite;\r\n          hoveringSprite.hover = true;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n        sprite = this.sprites[i];\r\n        hoveringSprite = sprite.isHovering(point, now);\r\n        if (hoveringSprite) {\r\n          hoveringSprite.pointCollision(point);\r\n          point.hover = hoveringSprite;\r\n          hoveringSprite.hover = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public keyUp(e: KeyboardEvent | IKeyable): void {\r\n    this.keyIndex[e.key] = false;\r\n    const focusedSprite: ISprite = this.getFocusedSprite();\r\n    if (focusedSprite) {\r\n      focusedSprite.keyUp({\r\n        alt: e.altKey,\r\n        ctrl: e.ctrlKey,\r\n        down: false,\r\n        eventType: \"KeyUp\",\r\n        key: e.key,\r\n        shift: e.shiftKey,\r\n        source: focusedSprite,\r\n        stage: this,\r\n      });\r\n    }\r\n    this.keyUpEvent.emit({\r\n      alt: e.altKey,\r\n      ctrl: e.ctrlKey,\r\n      down: false,\r\n      eventType: \"KeyUp\",\r\n      key: e.key,\r\n      shift: e.shiftKey,\r\n      source: focusedSprite || this,\r\n      stage: this,\r\n    });\r\n  }\r\n\r\n  public keyDown(e: KeyboardEvent | IKeyable): void {\r\n    this.keyIndex[e.key] = false;\r\n    if (e.key === \"Insert\") {\r\n      this.insertMode = !this.insertMode;\r\n    }\r\n    const focusedSprite: ISprite = this.getFocusedSprite();\r\n    if (focusedSprite) {\r\n      focusedSprite.keyDown({\r\n        alt: e.altKey,\r\n        ctrl: e.ctrlKey,\r\n        down: true,\r\n        eventType: \"KeyDown\",\r\n        key: e.key,\r\n        shift: e.shiftKey,\r\n        source: focusedSprite,\r\n        stage: this,\r\n      });\r\n    }\r\n    this.keyDownEvent.emit({\r\n      alt: e.altKey,\r\n      ctrl: e.ctrlKey,\r\n      down: true,\r\n      eventType: \"KeyDown\",\r\n      key: e.key,\r\n      shift: e.shiftKey,\r\n      source: focusedSprite || this,\r\n      stage: this,\r\n    });\r\n  }\r\n\r\n  public keyPress(e: KeyboardEvent | IKeyable): void {\r\n    const focusedSprite: ISprite = this.getFocusedSprite();\r\n    if (focusedSprite) {\r\n      focusedSprite.keyPress({\r\n        alt: e.altKey,\r\n        ctrl: e.ctrlKey,\r\n        down: true,\r\n        eventType: \"KeyPress\",\r\n        key: e.key,\r\n        shift: e.shiftKey,\r\n        source: focusedSprite,\r\n        stage: this,\r\n      });\r\n    }\r\n    this.keyPressEvent.emit({\r\n      alt: e.altKey,\r\n      ctrl: e.ctrlKey,\r\n      down: true,\r\n      eventType: \"KeyPress\",\r\n      key: e.key,\r\n      shift: e.shiftKey,\r\n      source: focusedSprite || this,\r\n      stage: this,\r\n    });\r\n  }\r\n\r\n  public setFocus(target: ISprite): void {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getFocusedSprite(): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      const s: ISprite = sprite.isFocused();\r\n      if (s) {\r\n        return s;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ILabel extends ISprite {\r\n  text: string;\r\n  font: string;\r\n  fontSize: number;\r\n  fontColor: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n  setText(text: string): this;\r\n}\r\n\r\nexport interface ILabelProps extends ISpriteProps {\r\n  text?: string;\r\n  font?: string;\r\n  fontSize?: number;\r\n  fontColor?: string;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport class Label extends Sprite implements ILabel {\r\n  public readonly type: SpriteType = SpriteType.Label;\r\n  public text: string = \"\";\r\n  public font: string = \"monospace\";\r\n  public fontSize: number = 12;\r\n  public fontColor: string = \"black\";\r\n  public textAlign: TextAlign = TextAlign.start;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n\r\n  constructor(props: ILabelProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.font = props.font || this.font;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.textBaseline = props.textBaseline || this.textBaseline;\r\n    this.textAlign = props.textAlign || this.textAlign;\r\n  }\r\n\r\n  public update(): void {\r\n    this.height = this.fontSize;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n    this.width = tempctx.measureText(this.text).width;\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.textBaseline = this.textBaseline;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.fillText(this.text, 0, 0);\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    this.text = text;\r\n    return this;\r\n  }\r\n}\r\n","import { transformPoint } from \"../matrix\";\r\nimport { IInteractionPoint, IPadding, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst sortZ = (a: ISprite, b: ISprite): number => a.z - b.z;\r\nconst tmpctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface IPanel extends ISprite {\r\n  padding: IPadding;\r\n  addSprite(sprite: ISprite): this;\r\n  removeSprite(sprite: ISprite): this;\r\n  focus(sprite: ISprite): void;\r\n}\r\n\r\nexport interface IPanelProps extends ISpriteProps {\r\n  padding?: IPadding;\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport class Panel extends Sprite implements IPanel {\r\n  public readonly type: SpriteType = SpriteType.Panel;\r\n  public padding: IPadding = {\r\n    bottom: 4,\r\n    left: 4,\r\n    right: 4,\r\n    top: 4,\r\n  };\r\n  private sprites: ISprite[] = [];\r\n  private bottomCenterPattern: CanvasPattern = null;\r\n  private topCenterPattern: CanvasPattern = null;\r\n  private middleLeftPattern: CanvasPattern = null;\r\n  private middleRightPattern: CanvasPattern = null;\r\n  private middleCenterPattern: CanvasPattern = null;\r\n\r\n  constructor(props: IPanelProps) {\r\n    super(props);\r\n    this.width = props.width;\r\n    this.height = props.height;\r\n    this.padding = props.padding || this.padding;\r\n  }\r\n\r\n  public addSprite(sprite: ISprite): this {\r\n    sprite.parent = this;\r\n    this.sprites.push(sprite);\r\n    return this;\r\n  }\r\n\r\n  public interpolate(now: number) {\r\n    if (now <= this.lastInterpolated) {\r\n      return;\r\n    }\r\n    super.interpolate(now);\r\n    for (const sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n  }\r\n\r\n  public isHovering(point: IInteractionPoint, now: number): ISprite {\r\n    const isHovering = super.isHovering(point, now);\r\n    if (!isHovering) {\r\n      return null;\r\n    }\r\n    this.sprites.sort(sortZ);\r\n    for (const sprite of this.sprites) {\r\n      sprite.down = false;\r\n      sprite.hover = false;\r\n    }\r\n    let hovering: ISprite;\r\n    for (let i = this.sprites.length - 1; i >= 0; i--) {\r\n      hovering = this.sprites[i].isHovering(point, now);\r\n      if (hovering) {\r\n        return hovering;\r\n      }\r\n    }\r\n    return isHovering;\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (\r\n      point.tx >= this.padding.left\r\n      && point.tx <= (this.width - this.padding.right)\r\n      && point.ty >= this.padding.top\r\n      && point.ty <= (this.height - this.padding.bottom)\r\n    ) {\r\n      return this;\r\n    }\r\n  }\r\n\r\n  public removeSprite(sprite: ISprite): this {\r\n    if (this.sprites.includes(sprite)) {\r\n      this.sprites.splice(this.sprites.indexOf(sprite), 1);\r\n      sprite.parent = null;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  public update(): void {\r\n    this.hover = false;\r\n    if (!this.bottomCenterPattern && this.textures.Bottom_Center) {\r\n      this.bottomCenterPattern = tmpctx.createPattern(this.textures.Bottom_Center as any, \"repeat-x\");\r\n    }\r\n    if (!this.topCenterPattern && this.textures.Top_Center) {\r\n      this.topCenterPattern = tmpctx.createPattern(this.textures.Top_Center as any, \"repeat-x\");\r\n    }\r\n    if (!this.middleLeftPattern && this.textures.Middle_Left) {\r\n      this.middleLeftPattern = tmpctx.createPattern(this.textures.Middle_Left as any, \"repeat-y\");\r\n    }\r\n    if (!this.middleRightPattern && this.textures.Middle_Right) {\r\n      this.middleRightPattern = tmpctx.createPattern(this.textures.Middle_Right as any, \"repeat-y\");\r\n    }\r\n    if (!this.middleCenterPattern && this.textures.Middle_Center) {\r\n      this.middleCenterPattern = tmpctx.createPattern(this.textures.Middle_Center as any, \"repeat\");\r\n    }\r\n    if (\r\n      this.textures.Top_Left\r\n      && this.textures.Top_Right\r\n      && this.textures.Bottom_Left\r\n      && this.textures.Bottom_Right\r\n    ) {\r\n      this.width = Math.max(\r\n        this.width,\r\n        this.textures.Bottom_Left.width + this.textures.Bottom_Right.width,\r\n        this.textures.Top_Left.width + this.textures.Top_Right.width,\r\n      );\r\n      this.height = Math.max(\r\n        this.height,\r\n        this.textures.Bottom_Left.width + this.textures.Top_Left.width,\r\n        this.textures.Bottom_Right.width + this.textures.Top_Right.width,\r\n      );\r\n    }\r\n    for (const sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    if (this.textures.Top_Left) {\r\n      ctx.drawImage(this.textures.Top_Left, 0, 0);\r\n    }\r\n    if (this.textures.Top_Right) {\r\n      ctx.drawImage(this.textures.Top_Right, this.width - this.textures.Top_Right.width, 0);\r\n    }\r\n    if (this.textures.Bottom_Left) {\r\n      ctx.drawImage(this.textures.Bottom_Left, 0, this.height - this.textures.Bottom_Left.width);\r\n    }\r\n    if (this.textures.Bottom_Right) {\r\n      ctx.drawImage(\r\n        this.textures.Bottom_Right,\r\n        this.width - this.textures.Bottom_Right.width,\r\n        this.height - this.textures.Bottom_Right.height,\r\n      );\r\n    }\r\n    if (this.topCenterPattern) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.topCenterPattern;\r\n      ctx.fillRect(\r\n        this.textures.Top_Left.width,\r\n        0,\r\n        this.width - this.textures.Top_Left.width - this.textures.Top_Right.width,\r\n        this.textures.Top_Center.height,\r\n      );\r\n    }\r\n    if (this.bottomCenterPattern) {\r\n      const bottomCenterY = this.height - this.textures.Bottom_Center.height;\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.bottomCenterPattern;\r\n      ctx.translate(0, bottomCenterY);\r\n      ctx.fillRect(\r\n        this.textures.Bottom_Left.width,\r\n        0,\r\n        this.width - this.textures.Bottom_Left.width - this.textures.Bottom_Right.width,\r\n        this.textures.Bottom_Center.height,\r\n      );\r\n      ctx.translate(0, -bottomCenterY);\r\n    }\r\n    if (this.middleLeftPattern) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.middleLeftPattern;\r\n      ctx.fillRect(\r\n        0,\r\n        this.textures.Top_Left.height,\r\n        this.textures.Middle_Left.width,\r\n        this.height - this.textures.Top_Left.height - this.textures.Bottom_Left.height,\r\n      );\r\n    }\r\n    if (this.middleRightPattern) {\r\n      const middleRightX = this.width - this.textures.Top_Right.width;\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.middleRightPattern;\r\n      ctx.translate(middleRightX, 0);\r\n      ctx.fillRect(\r\n        0,\r\n        this.textures.Top_Right.height,\r\n        this.textures.Middle_Right.width,\r\n        this.height - this.textures.Top_Right.height - this.textures.Bottom_Right.height,\r\n      );\r\n      ctx.translate(-middleRightX, 0);\r\n    }\r\n    if (this.middleCenterPattern) {\r\n      ctx.beginPath();\r\n      ctx.fillStyle = this.middleCenterPattern;\r\n      ctx.fillRect(\r\n        this.textures.Top_Left.width,\r\n        this.textures.Top_Right.height,\r\n        this.width - this.textures.Bottom_Right.width - this.textures.Bottom_Left.width,\r\n        this.height - this.textures.Top_Right.height - this.textures.Bottom_Right.height,\r\n      );\r\n    }\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.top,\r\n      this.width - this.padding.left - this.padding.right,\r\n      this.height - this.padding.top - this.padding.bottom,\r\n    );\r\n    ctx.clip();\r\n    ctx.translate(this.padding.left, this.padding.top);\r\n    for (const sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.transform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha *= sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n  }\r\n\r\n  public focus(target: ISprite) {\r\n    for (const sprite of this.sprites) {\r\n      sprite.focused = sprite === target;\r\n      if (sprite.type === SpriteType.Panel) {\r\n        const panel = sprite as IPanel;\r\n        panel.focus(target);\r\n      }\r\n    }\r\n  }\r\n\r\n  public isFocused(): ISprite {\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.isFocused()) {\r\n        return sprite;\r\n      }\r\n    }\r\n    return super.isFocused();\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    let result: boolean = super.skipAnimation(now);\r\n    for (const sprite of this.sprites) {\r\n      result = sprite.skipAnimation(now) || result;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","import { IAudio, IAudioProps, ISoundSpriteSheet, PlayState } from \"../util\";\r\n\r\nexport interface ISFX extends IAudio {\r\n  loop: false; // it will always be false\r\n}\r\n\r\nexport interface ISFXProps extends IAudioProps {\r\n}\r\n\r\nexport interface ILoadSFXProps {\r\n  name: string;\r\n  texture: string;\r\n}\r\n\r\nexport class SFXSprite implements ISFX {\r\n  public id: string = \"\";\r\n  // fields from IPlayable\r\n  public started: number = 0;\r\n  public length: number = 0;\r\n  public start: number = 0;\r\n  public end: number = 0;\r\n  public loop: false = false;\r\n  public state: PlayState = PlayState.Stopped; // unused\r\n  public loaded: Promise<void>;\r\n\r\n  // fields from IAudio\r\n  public gain: GainNode;\r\n  public source: AudioBuffer;\r\n  public destination: AudioNode;\r\n  public definition: ISoundSpriteSheet;\r\n  public context: AudioContext;\r\n  /**\r\n   * 1. sets all relevant metadata properties from spritesheet\r\n   * 2. creates gain node from context\r\n   * 3. set this.loaded to result of createSource(props.source, props.context);\r\n   * 4. set this.destination\r\n   */\r\n  constructor(props: ISFXProps) {\r\n    this.id = props.id;\r\n    // TODO: 1\r\n    this.context = props.context;\r\n    this.definition = props.definition;\r\n    this.start = this.definition.spritemap[props.texture].start;\r\n    this.end = this.definition.spritemap[props.texture].end;\r\n    this.length = this.end - this.start;\r\n    this.gain = props.context.createGain();\r\n    this.loaded = this.createSource(props.source, props.context);\r\n    this.destination = props.context.destination;\r\n  }\r\n\r\n  // calls this.loaded.then(e => this.createPlayInstance());\r\n  public play(): this {\r\n    this.loaded.then(e => this.createPlayInstance());\r\n    return this;\r\n  }\r\n\r\n  // no ops\r\n  public stop(): this {\r\n    return this;\r\n  }\r\n  public pause(): this {\r\n    return this;\r\n  }\r\n\r\n  // sets the gainNode.gain.value property\r\n  // accepts [0..1]\r\n  public setVolume(volume: number): this {\r\n    if (volume < 0 || volume > 1) {\r\n      throw new Error(`setVolume() accepts a number between 0 and 1; got ${volume}.`);\r\n    }\r\n    this.gain.gain.value = volume;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 1. resolves response to arrayBuffer\r\n   * 2. creates audioBuffer\r\n   * 3. creates AudioBufferSourceNode\r\n   * 4. sets source property\r\n   */\r\n  private async createSource(res: Promise<Response>, context: AudioContext): Promise<void> {\r\n    const resp: Response = await res;\r\n    const buffer = await resp.arrayBuffer();\r\n    this.source = await context.decodeAudioData(buffer);\r\n  }\r\n\r\n  /**\r\n   * 1. creates new AudioBufferSourceNode\r\n   * 2. set node.buffer = this.source\r\n   * 3. set source metadata\r\n   * 4. connect node to destination\r\n   * 5. call start(0, offset, duration)\r\n   * 6. listen to ended event (look up the event)\r\n   * 7. clean up audio source node and disconnect it from the destination\r\n   */\r\n  private createPlayInstance(): void {\r\n    const node = this.context.createBufferSource();\r\n    node.buffer = this.source;\r\n    node.loop = this.loop; // false\r\n    // TODO: 3\r\n    node.connect(this.gain);\r\n\r\n    const now = Date.now();\r\n    node.start(0, this.start, this.length);\r\n\r\n    const gain = this.gain; // must be accessed inside of named function\r\n    node.addEventListener(\"ended\", function callback(e) {\r\n      node.disconnect(gain);\r\n      node.removeEventListener(\"ended\", callback);\r\n    });\r\n  }\r\n}\r\n","import { EventEmitter, IValueChangeEvent } from \"../events\";\r\nimport { transformPoint } from \"../matrix\";\r\nimport { Cursor, IInteractionPoint, SpriteType } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nexport interface ISlider extends ISprite {\r\n  value: number;\r\n  max: number;\r\n  min: number;\r\n  width: number;\r\n\r\n  valueChangeEvent: EventEmitter<IValueChangeEvent<number>>;\r\n}\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ISliderProps extends ISpriteProps {\r\n  value?: number;\r\n  max?: number;\r\n  min?: number;\r\n  width: number;\r\n}\r\n\r\nexport class Slider extends Sprite implements ISlider {\r\n  public readonly type: SpriteType = SpriteType.Slider;\r\n  public value: number = 0;\r\n  public max: number = 1;\r\n  public min: number = 0;\r\n  public width: number = 100;\r\n  public height: number = 0;\r\n  public parentHoverCheck: boolean = false;\r\n  public valueChangeEvent: EventEmitter<IValueChangeEvent<number>> = new EventEmitter<IValueChangeEvent<number>>();\r\n  public cursor: Cursor = Cursor.pointer;\r\n\r\n  private sliderPattern: CanvasPattern = null;\r\n  private pillTexture: ImageBitmap = null;\r\n\r\n  constructor(props: ISliderProps) {\r\n    super(props);\r\n\r\n    this.width = props.width;\r\n    this.max = props.max || this.max;\r\n    this.min = props.min || this.min;\r\n    this.value = props.value || this.value;\r\n  }\r\n\r\n  public broadPhase(point: IInteractionPoint): boolean {\r\n    if (this.active) {\r\n      return true;\r\n    }\r\n    return super.broadPhase(point);\r\n  }\r\n\r\n  public narrowPhase(point: IInteractionPoint): ISprite {\r\n    if (this.active || point.firstDown) {\r\n      return this;\r\n    }\r\n\r\n    if (this.pointInPill(point)) {\r\n      return this;\r\n    }\r\n  }\r\n\r\n  public pointInPill(point: IInteractionPoint): boolean {\r\n    /*\r\n     * NOTE: this checks if the cursor is strictly hovering over the pill\r\n     */\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n    return point.ty <= this.textures.Pill_Hover.height\r\n      && point.ty >= 0\r\n      && point.tx >= valueX\r\n      && point.tx <= valueX + this.textures.Pill_Hover.width;\r\n  }\r\n\r\n  public pointCollision(point: IInteractionPoint): boolean {\r\n    super.pointCollision(point);\r\n\r\n    if (this.active && point.active === this) {\r\n      const previousValue = this.value;\r\n      const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n      const trueTX = point.tx - this.textures.Pill_Hover.width * 0.5;\r\n      const clampedTX = Math.max(0, Math.min(trueTX, sliderDistance));\r\n      const range = this.max - this.min;\r\n\r\n      this.value = this.min + range * clampedTX / sliderDistance;\r\n      if (this.value !== previousValue) {\r\n        this.valueChangeEvent.emit({\r\n          eventType: \"ValueChange\",\r\n          previousValue,\r\n          property: \"value\",\r\n          source: this,\r\n          stage: this.container,\r\n          value: this.value,\r\n        });\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public update(): void {\r\n    if (this.textures.Pill_Hover) {\r\n      this.height = this.textures.Pill_Hover.height;\r\n    }\r\n    if (!this.sliderPattern && this.textures.Line) {\r\n      // createPattern does not accept ImageBitmap in typescript just yet\r\n      this.sliderPattern = tempctx.createPattern(this.textures.Line as any, \"repeat-x\");\r\n    }\r\n    this.pillTexture = this.active\r\n      ? this.textures.Pill_Active\r\n      : (this.hover ? this.textures.Pill_Hover : this.textures.Pill);\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.textures.Line_Cap_Left, 0, 0);\r\n    ctx.drawImage(\r\n      this.textures.Line_Cap_Right,\r\n      this.width - this.textures.Line_Cap_Right.width,\r\n      0,\r\n    );\r\n    ctx.fillStyle = this.sliderPattern;\r\n    ctx.fillRect(\r\n      this.textures.Line_Cap_Left.width,\r\n      0,\r\n      this.width - this.textures.Line_Cap_Left.width - this.textures.Line_Cap_Right.width,\r\n      this.textures.Line.height,\r\n    );\r\n    const sliderDistance = this.width - this.textures.Pill_Hover.width;\r\n    const sliderValuePercent = (this.value - this.min) / (this.max - this.min);\r\n    const valueX = sliderDistance * sliderValuePercent;\r\n\r\n    ctx.drawImage(this.pillTexture, valueX, 0);\r\n  }\r\n}\r\n","import {\r\n  EventEmitter,\r\n  IPostHoverCheckEvent,\r\n  IPostInterpolateEvent,\r\n  IPostRenderEvent,\r\n  IPostUpdateEvent,\r\n  IPreHoverCheckEvent,\r\n  IPreInterpolateEvent,\r\n  IPreRenderEvent,\r\n  IPreUpdateEvent,\r\n} from \"../events\";\r\nimport { Cursor } from \"../util\";\r\nimport { IInteractionManager, IInteractionManagerProps, InteractionManager } from \"./InteractionManager\";\r\nimport { ISprite } from \"./Sprite\";\r\n\r\nexport interface IStageProps extends IInteractionManagerProps {\r\n\r\n}\r\n\r\nexport interface IStage extends IInteractionManager {\r\n  postInterpolateEvent: EventEmitter<IPostInterpolateEvent>;\r\n  preInterpolateEvent: EventEmitter<IPreInterpolateEvent>;\r\n  preUpdateEvent: EventEmitter<IPreUpdateEvent>;\r\n  postUpdateEvent: EventEmitter<IPostUpdateEvent>;\r\n  preRenderEvent: EventEmitter<IPreRenderEvent>;\r\n  postRenderEvent: EventEmitter<IPostRenderEvent>;\r\n  update(): this;\r\n  render(): this;\r\n  skipAnimations(): boolean;\r\n}\r\n\r\nexport class Stage extends InteractionManager implements IStage {\r\n  public postInterpolateEvent: EventEmitter<IPostInterpolateEvent> = new EventEmitter<IPostInterpolateEvent>();\r\n  public preInterpolateEvent: EventEmitter<IPreInterpolateEvent> = new EventEmitter<IPreInterpolateEvent>();\r\n  public preHoverCheckEvent: EventEmitter<IPreHoverCheckEvent> = new EventEmitter<IPreHoverCheckEvent>();\r\n  public postHoverCheckEvent: EventEmitter<IPostHoverCheckEvent> = new EventEmitter<IPostHoverCheckEvent>();\r\n  public preUpdateEvent: EventEmitter<IPreUpdateEvent> = new EventEmitter<IPreUpdateEvent>();\r\n  public postUpdateEvent: EventEmitter<IPostUpdateEvent> = new EventEmitter<IPostUpdateEvent>();\r\n  public preRenderEvent: EventEmitter<IPreRenderEvent> = new EventEmitter<IPreRenderEvent>();\r\n  public postRenderEvent: EventEmitter<IPostRenderEvent> = new EventEmitter<IPostRenderEvent>();\r\n\r\n  constructor(props: IStageProps) {\r\n    super(props);\r\n  }\r\n  public update(): this {\r\n    const now = Date.now();\r\n    let sprite: ISprite;\r\n\r\n    this.preInterpolateEvent.emit({\r\n      eventType: \"PreInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    for (sprite of this.sprites) {\r\n      sprite.interpolate(now);\r\n    }\r\n    this.postInterpolateEvent.emit({\r\n      eventType: \"PostInterpolate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preHoverCheckEvent.emit({\r\n      eventType: \"PreHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    this.hoverCheck(now);\r\n    this.postHoverCheckEvent.emit({\r\n      eventType: \"PostHoverCheck\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    this.preUpdateEvent.emit({\r\n      eventType: \"PreUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    for (sprite of this.sprites) {\r\n      sprite.update();\r\n    }\r\n\r\n    this.postUpdateEvent.emit({\r\n      eventType: \"PostUpdate\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  public render(): this {\r\n    this.preRenderEvent.emit({\r\n      eventType: \"PreRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n\r\n    let sprite: ISprite;\r\n    const ctx = this.ctx;\r\n\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    for (sprite of this.sprites) {\r\n      ctx.save();\r\n      ctx.setTransform(\r\n        sprite.interpolatedPosition[0],\r\n        sprite.interpolatedPosition[1],\r\n        sprite.interpolatedPosition[2],\r\n        sprite.interpolatedPosition[3],\r\n        sprite.interpolatedPosition[4],\r\n        sprite.interpolatedPosition[5],\r\n      );\r\n      ctx.globalAlpha = sprite.interpolatedAlpha;\r\n      sprite.render(ctx);\r\n      ctx.restore();\r\n    }\r\n    this.canvas.style.cursor = Cursor.auto;\r\n    for (const point of this.points) {\r\n      if (point.hover) {\r\n        this.canvas.style.cursor = point.hover.cursor;\r\n      }\r\n    }\r\n\r\n    this.postRenderEvent.emit({\r\n      eventType: \"PostRender\",\r\n      source: this,\r\n      stage: this,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public skipAnimations(): boolean {\r\n    const now = Date.now();\r\n    let result = false;\r\n    for (const sprite of this.sprites) {\r\n      if (sprite.skipAnimation(now)) {\r\n        result = true;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","\r\nimport { IPadding, SpriteType, TextAlign, TextBaseline } from \"../util\";\r\nimport { ISprite, ISpriteProps, Sprite } from \"./Sprite\";\r\n\r\nconst tempctx = document.createElement(\"canvas\").getContext(\"2d\");\r\n\r\nexport interface ITextbox extends ISprite {\r\n  text: string;\r\n  textSpeed: number;\r\n  textIndex: number;\r\n  padding: IPadding;\r\n  fontSize: number;\r\n  font: string;\r\n  fontColor: string;\r\n  lineHeight: number;\r\n  textAlign: TextAlign;\r\n  textBaseline: TextBaseline;\r\n\r\n  setText(text: string): this;\r\n  appendText(text: string): this;\r\n}\r\n\r\nexport interface ITextboxProps extends ISpriteProps {\r\n  text?: string;\r\n  textSpeed?: number;\r\n  textIndex?: number;\r\n  textAlign?: TextAlign;\r\n  textBaseline?: TextBaseline;\r\n  padding?: IPadding;\r\n  fontSize?: number;\r\n  font?: string;\r\n  fontColor?: string;\r\n  lineHeight?: number;\r\n}\r\n\r\nexport class Textbox extends Sprite implements ITextbox {\r\n  private static regex: RegExp = /\\r\\n|\\r|\\n|[^\\t ]*[\\t ]?/g;\r\n  public readonly type: SpriteType = SpriteType.Textbox;\r\n\r\n  public text: string = \"\";\r\n  public textSpeed: number = 1;\r\n  public textIndex: number = 0;\r\n  public padding: IPadding = {\r\n    bottom: 5,\r\n    left: 5,\r\n    right: 5,\r\n    top: 5,\r\n  };\r\n  public fontSize: number = 12;\r\n  public font: string = \"monospace\";\r\n  public fontColor: string = \"black\";\r\n  public lineHeight: number = 16;\r\n  public textAlign: TextAlign = TextAlign.left;\r\n  public textBaseline: TextBaseline = TextBaseline.hanging;\r\n  private interpolatedText: string[] = [\"\"];\r\n\r\n  constructor(props: ITextboxProps) {\r\n    super(props);\r\n    this.text = props.text || this.text;\r\n    this.textSpeed = props.textSpeed || this.textSpeed;\r\n    if (props.hasOwnProperty(\"textIndex\")) {\r\n      this.textIndex = props.textIndex;\r\n    }\r\n    this.padding = props.padding || this.padding;\r\n    this.fontSize = props.fontSize || this.fontSize;\r\n    this.font = props.font || this.font;\r\n    this.fontColor = props.fontColor || this.fontColor;\r\n    this.lineHeight = props.lineHeight || this.lineHeight;\r\n\r\n    this.setTexture(\"Texture\");\r\n  }\r\n\r\n  public update() {\r\n    const maxWidth = this.textures[this.texture].width - this.padding.left - this.padding.right;\r\n    this.textIndex = Math.min(this.text.length, this.textIndex + this.textSpeed);\r\n    const words = this.text.match(Textbox.regex);\r\n    this.interpolatedText = [\"\"];\r\n    const maxLines = (this.textures[this.texture].height - this.padding.top - this.padding.bottom) / this.lineHeight;\r\n    let line: string = \"\";\r\n    let lineIndex: number = 0;\r\n    let measurement: TextMetrics;\r\n    let leftOver: number = this.textIndex;\r\n    tempctx.font = `${this.fontSize}px ${this.font}`;\r\n\r\n    for (const word of words) {\r\n\r\n      // If the next character is a newline, push a new line\r\n      if (word === \"\\n\" || word === \"\\r\\n\" || word === \"\\r\") {\r\n        this.interpolatedText.push(\"\");\r\n        leftOver -= word.length;\r\n        lineIndex += 1;\r\n        continue;\r\n      }\r\n\r\n      line = this.interpolatedText[lineIndex];\r\n\r\n      // If there are no more characters to push, break\r\n      if (leftOver === 0) {\r\n        break;\r\n      }\r\n\r\n      // If the line count is greater than the maximum number of lines, break\r\n      if ((lineIndex + 1) > maxLines) {\r\n        break;\r\n      }\r\n\r\n      // Test the word length\r\n      line += word;\r\n      measurement = tempctx.measureText(line);\r\n\r\n      // If the line overflows\r\n      if (measurement.width > maxWidth) {\r\n        lineIndex = this.interpolatedText.push(\"\") - 1;\r\n      }\r\n\r\n      this.interpolatedText[lineIndex] += word;\r\n      // Add the text to the screen\r\n\r\n      leftOver -= word.length;\r\n\r\n      if (leftOver < 0) {\r\n        this.interpolatedText[lineIndex] = this.interpolatedText[lineIndex].slice(0, leftOver);\r\n        break;\r\n      }\r\n      // Check to see if the word overFlows the animation\r\n    }\r\n  }\r\n\r\n  public render(ctx: CanvasRenderingContext2D) {\r\n    super.render(ctx);\r\n    const maxHeight = this.textures[this.texture].height - this.padding.top;\r\n    let currentHeight = this.padding.top;\r\n\r\n    ctx.font = `${this.fontSize}px ${this.font}`;\r\n    ctx.fillStyle = this.fontColor;\r\n    ctx.textAlign = this.textAlign;\r\n    ctx.textBaseline = this.textBaseline;\r\n\r\n    ctx.beginPath();\r\n    ctx.rect(\r\n      this.padding.left,\r\n      this.padding.bottom,\r\n      this.width - this.padding.right,\r\n      this.height - this.padding.top,\r\n    );\r\n    ctx.clip();\r\n    for (const line of this.interpolatedText) {\r\n      if (currentHeight + this.fontSize > maxHeight) {\r\n        break;\r\n      }\r\n\r\n      ctx.fillText(line, this.padding.left, currentHeight);\r\n      currentHeight += this.lineHeight;\r\n    }\r\n  }\r\n\r\n  public setText(text: string): this {\r\n    if (text.startsWith(this.text)) {\r\n      this.text = text;\r\n      return this;\r\n    }\r\n\r\n    this.text = text;\r\n    this.interpolatedText = [\"\"];\r\n    this.textIndex = 0;\r\n    return this;\r\n  }\r\n\r\n  public appendText(text: string): this {\r\n    this.text += text;\r\n    return this;\r\n  }\r\n\r\n  public skipAnimation(now: number): boolean {\r\n    const result: boolean = super.skipAnimation(now) && this.textIndex < this.text.length;\r\n    this.textIndex = this.text.length;\r\n    return result;\r\n  }\r\n}\r\n"],"names":["PI","Math","TAU","inFunc","ratio","outFunc","inverse","easeLinear","easeInQuad","pow","easeOutQuad","easeInOutQuad","inOut","easeInCub","easeOutCub","easeInOutCub","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeOutSin","sin","easeInSin","easeInOutSin","easeOutElastic","p","easeInElastic","easeInOutElastic","input","this","value","CanvasMatrix2DTransformAPI","x","y","radians","cos","a","b","c","d","tan","e","f","det","props","pa","pb","pc","pd","pe","pf","ma","mb","mc","md","me","mf","target","point","transformPoint","Identity","use","matrix","tx","ty","radFactor","StagePosition","degFactor","PI_2","factor","SpriteSheetKind","degrees","normalize","sprite","position","container","Error","stage","widthFactor","BottomCenterLeft","CenterLeft","TopCenterLeft","BottomCenter","Center","TopCenter","BottomCenterRight","CenterRight","TopCenterRight","BottomRight","Right","TopRight","heightFactor","Left","BottomLeft","copy","translate","canvas","width","height","url","opts","fetch","_a","json","createSpriteSheet","definition","result","Array","isArray","kind","JSON","frames","JSON_TP_Array","meta","JSON_TP_Hash","definitionPromise","imgPromise","textures","_q","img","spritesheet","jsonKind","jsonKind_1","tslib_1.__values","_e","_f","frame","name","createImageBitmap","spritesheetArrayKind","_g","_j","_k","arrayFrame","filename","w","h","spritesheetHashKind","_l","Object","keys","spriteFrame","_o","_p","blob","TextAlign","TextBaseline","PlayState","Cursor","SpriteType","KeyFrameEntryType","left","right","z","SelectionState","EventEmitter","callbacks","callback","push","dispose","_this","includes","splice","indexOf","Promise","resolve","reject","disposer","listen","event","events","_b","slice","Sprite","auto","id","setTo","previousPosition","interpolatedPosition","hasOwnProperty","previousAlpha","interpolatedAlpha","alpha","source","loadTexture","now","interpolate","parentHoverCheck","parent_1","parent","broadPhase","narrowPhase","focused","length","Number","isFinite","lastKeyFrame","getLastKeyFrame","type","Repeat","kf","createKeyFrame","Wait","end","start","keyFrames","sx","s","sy","to","i","timespan","clearAnimation","lastInterpolated","firstKeyFrame","max","progress","ease","set","from","parent_2","padding","top","transform","texture","oldTexture","textureChangeEvent","emit","eventType","previousValue","property","ctx","drawImage","keyDownEvent","keyUpEvent","keyPressEvent","getStage","defintion","createTextureMap","_c","loadedEvent","_d","Date","eases.easeLinear","Move","_super","Button","center","middle","pointer","selected","font","fontColor","fontSize","text","textAlign","textBaseline","tslib_1.__extends","setTexture","active","hover","update","render","fillStyle","fillText","Character","displayName","color","Checkbox","checked","Boolean","checkedChangeEvent","toggle","pointClick","Close","cursor","audioContext","Container","sprites","playables","points","captured","clicked","down","firstDown","listener","mouseDown","window","mouseUp","mouseMove","touchStart","touchEnd","touchMove","touchCancel","keyDown","keyPress","keyUp","document","createElement","body","appendChild","getContext","hookEvents","addPoint","mousePoint","InteractionManager","forEach","addEventListener","keyboardEvents","removeEventListener","mouseDownEvent","rawEvent","clientX","clientY","pointDown","mouseUpEvent","pointUp","mouseMoveEvent","pointMove","touch","changedTouches","touchStartEvent","addTouchPoint","touchEndEvent","touchPointIndex","identifier","removeTouchPoint","createInteractionPoint","toString","touchCancelEvent","pointCancel","touchMoveEvent","alreadyDown","previousX","previousY","setFocus","pointDownEvent","pointUpEvent","pointClickEvent","hoveringSprite","rect","getBoundingClientRect","sort","zSort","isHovering","pointCollision","pointMoveEvent","removePoint","keyIndex","key","focusedSprite","getFocusedSprite","alt","altKey","ctrl","ctrlKey","shift","shiftKey","insertMode","Panel","focus","isFocused","tempctx","Label","hanging","measureText","sortZ","tmpctx","bottom","hovering","bottomCenterPattern","Bottom_Center","createPattern","topCenterPattern","Top_Center","middleLeftPattern","Middle_Left","middleRightPattern","Middle_Right","middleCenterPattern","Middle_Center","Top_Left","Top_Right","Bottom_Left","Bottom_Right","beginPath","fillRect","bottomCenterY","middleRightX","clip","save","globalAlpha","restore","skipAnimation","Stopped","context","spritemap","gain","createGain","loaded","createSource","destination","SFXSprite","then","createPlayInstance","volume","res","arrayBuffer","buffer","decodeAudioData","node","createBufferSource","loop","connect","disconnect","Slider","min","pointInPill","valueX","Pill_Hover","sliderDistance","clampedTX","valueChangeEvent","sliderPattern","Line","pillTexture","Pill_Active","Pill","Line_Cap_Left","Line_Cap_Right","Stage","preInterpolateEvent","postInterpolateEvent","preHoverCheckEvent","hoverCheck","postHoverCheckEvent","preUpdateEvent","postUpdateEvent","preRenderEvent","clearRect","setTransform","style","postRenderEvent","Textbox","textSpeed","textIndex","lineHeight","maxWidth","words","match","regex","interpolatedText","maxLines","line","lineIndex","leftOver","words_1","word","maxHeight","currentHeight","startsWith","unicodeCharacterTest","TextInput","Caret","split","selectedFontBackgroundColor","selectedFontColor","selectionState","focusedMidPattern","Focused_Mid","unfocusedMidPattern","Unfocused_Mid","Focused_Left","frameCount","showCaret","caretX","caretIndex","join","selectionStart","selectionEnd","relativeCaretX","textScroll","fullTextWidth","visibleTextWidth","targetCharacter","charWidth","Unfocused_Left","Focused_Right","Unfocused_Right","pattern","Selection","renderSelection","renderCaretInsert","renderCaret","keyDownSelection","keyDownCaretInsert","keyDownCaret","keyPressSelection","keyPressCaretInsert","keyPressCaret","begin","floor","getCaretIndex","idx","select","test","moveCaretRight","moveCaretLeft","moveTo","lineTo","stroke","firstText","secondText","thirdText","firstMeasure","secondMeasure","midline","relativeX","str"],"mappings":"AAAO,IAAMA,EAAKC,KAAKD,GACVE,EAAM,EAAIF,ECMvB,WAAiBG,GACf,OAAO,SAAiBC,GACtB,OAAO,EAAID,EAAO,EAAIC,IAI1B,WAAeD,GACb,IAAME,EAAUC,EAAQH,GACxB,OAAO,SAACC,GAA0B,OAAAA,EAAQ,GACtC,GAAMD,EAAe,EAARC,GACb,GAAM,GAAMC,EAAQ,EAAID,EAAQ,IAG/B,IAAMG,EAAuB,SAAgBH,GAClD,OAAOA,GAGII,EAAuB,SAACJ,GAA0B,OAAAH,KAAKQ,IAAIL,EAAO,IAClEM,EAAwBJ,EAAQE,GAChCG,EAA0BC,EAAMJ,GAEhCK,EAAsB,SAACT,GAA0B,OAAAH,KAAKQ,IAAIL,EAAO,IACjEU,EAAuBR,EAAQO,GAC/BE,EAAyBH,EAAMC,GAE/BG,EACX,SAACZ,GAA0B,OAAAH,KAAKQ,IAAIL,EAAO,IAChCa,EAAyBX,EAAQU,GACjCE,EAA2BN,EAAMI,GAEjCG,EACX,SAACf,GAA0B,OAAAH,KAAKQ,IAAIL,EAAO,IAChCgB,EAAyBd,EAAQa,GACjCE,EAA2BT,EAAMO,GAEjCG,EACX,SAAClB,GAA0B,OAAAH,KAAKsB,IAAInB,EAAQJ,EAAK,KACtCwB,EAAsBlB,EAAQgB,GAC9BG,EAAyBb,EAAMY,GAG/BE,EACX,SAACtB,GAA0B,OAAAH,KAAKQ,IAAI,GAAI,GAAKL,GAASH,KAAKsB,KAAKnB,EAAQuB,MAASzB,EAFzE,IAEoF,GACjF0B,EAA0BtB,EAAQoB,GAClCG,EAA6BjB,EAAMgB,4SC3C9C,WAAYE,GADLC,WAAwB,KAE7BA,KAAKC,MAAQF,EA6HjB,OA1HSG,sBAAP,SAAiBC,EAAWC,GAG1B,OAFAJ,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKE,EAAIH,KAAKC,MAAM,GAAKG,EACrDJ,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKE,EAAIH,KAAKC,MAAM,GAAKG,EAC9CJ,MAGFE,kBAAP,SAAaC,EAAWC,GAKtB,OAJAJ,KAAKC,MAAM,IAAME,EACjBH,KAAKC,MAAM,IAAME,EACjBH,KAAKC,MAAM,IAAMG,EACjBJ,KAAKC,MAAM,IAAMG,EACVJ,MAGFE,mBAAP,SAAcG,GACZ,IAAMC,EAAcpC,KAAKoC,IAAID,GACvBb,EAActB,KAAKsB,IAAIa,GACvBE,EAAYP,KAAKC,MAAM,GACvBO,EAAYR,KAAKC,MAAM,GACvBQ,EAAYT,KAAKC,MAAM,GACvBS,EAAYV,KAAKC,MAAM,GAO7B,OALAD,KAAKC,MAAM,GAAKM,EAAID,EAAMG,EAAIjB,EAC9BQ,KAAKC,MAAM,GAAKO,EAAIF,EAAMI,EAAIlB,EAC9BQ,KAAKC,MAAM,GAAKQ,EAAIH,EAAMC,EAAIf,EAC9BQ,KAAKC,MAAM,GAAKS,EAAIJ,EAAME,EAAIhB,EAEvBQ,MAGFE,kBAAP,SAAaG,GACX,IAAMM,EAAMzC,KAAKyC,IAAIN,GAGrB,OAFAL,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKU,EACjCX,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKU,EAC1BX,MAGFE,kBAAP,SAAaG,GACX,IAAMM,EAAMzC,KAAKyC,IAAIN,GAGrB,OAFAL,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKU,EACjCX,KAAKC,MAAM,IAAMD,KAAKC,MAAM,GAAKU,EAC1BX,MAGFE,oBAAP,WACE,IAAMK,EAAYP,KAAKC,MAAM,GACvBO,EAAYR,KAAKC,MAAM,GACvBQ,EAAYT,KAAKC,MAAM,GACvBS,EAAYV,KAAKC,MAAM,GACvBW,EAAYZ,KAAKC,MAAM,GACvBY,EAAYb,KAAKC,MAAM,GACvBa,EAAc,GAAKP,EAAIG,EAAID,EAAID,GAQrC,OANAR,KAAKC,MAAM,GAAKS,EAAII,EACpBd,KAAKC,MAAM,IAAMO,EAAIM,EACrBd,KAAKC,MAAM,IAAMQ,EAAIK,EACrBd,KAAKC,MAAM,GAAKM,EAAIO,EACpBd,KAAKC,MAAM,IAAMQ,EAAII,EAAID,EAAIF,GAAKI,EAClCd,KAAKC,MAAM,IAAMW,EAAIJ,EAAID,EAAIM,GAAKC,EAC3Bd,MAGFE,sBAAP,SAAiBa,GAEf,IAAMC,EAAaD,EAAM,GACnBE,EAAaF,EAAM,GACnBG,EAAaH,EAAM,GACnBI,EAAaJ,EAAM,GACnBK,EAAaL,EAAM,GACnBM,EAAaN,EAAM,GAGnBO,EAAatB,KAAKC,MAAM,GACxBsB,EAAavB,KAAKC,MAAM,GACxBuB,EAAaxB,KAAKC,MAAM,GACxBwB,EAAazB,KAAKC,MAAM,GACxByB,EAAa1B,KAAKC,MAAM,GACxB0B,EAAa3B,KAAKC,MAAM,GAQ9B,OANAD,KAAKC,MAAM,GAAKqB,EAAKN,EAAKQ,EAAKP,EAC/BjB,KAAKC,MAAM,GAAKsB,EAAKP,EAAKS,EAAKR,EAC/BjB,KAAKC,MAAM,GAAKqB,EAAKJ,EAAKM,EAAKL,EAC/BnB,KAAKC,MAAM,GAAKsB,EAAKL,EAAKO,EAAKN,EAC/BnB,KAAKC,MAAM,GAAKqB,EAAKF,EAAKI,EAAKH,EAAKK,EACpC1B,KAAKC,MAAM,GAAKsB,EAAKH,EAAKK,EAAKJ,EAAKM,EAC7B3B,MAGFE,kBAAP,WAOE,OANAF,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAM,GAAK,EAChBD,KAAKC,MAAM,GAAK,EACTD,MAGFE,gBAAP,SAAWa,GAOT,OANAf,KAAKC,MAAM,GAAKc,EAAM,GACtBf,KAAKC,MAAM,GAAKc,EAAM,GACtBf,KAAKC,MAAM,GAAKc,EAAM,GACtBf,KAAKC,MAAM,GAAKc,EAAM,GACtBf,KAAKC,MAAM,GAAKc,EAAM,GACtBf,KAAKC,MAAM,GAAKc,EAAM,GACff,MAGFE,kBAAP,SAAa0B,GAOX,OANAA,EAAO,GAAK5B,KAAKC,MAAM,GACvB2B,EAAO,GAAK5B,KAAKC,MAAM,GACvB2B,EAAO,GAAK5B,KAAKC,MAAM,GACvB2B,EAAO,GAAK5B,KAAKC,MAAM,GACvB2B,EAAO,GAAK5B,KAAKC,MAAM,GACvB2B,EAAO,GAAK5B,KAAKC,MAAM,GAChBD,MAGFE,2BAAP,SAAsB2B,GAEpB,OADAC,EAAeD,EAAO7B,KAAKC,OACpBD,WAIE+B,GAA4B,EAAG,EAAG,EAAG,EAAG,EAAG,cAEnChC,GACnB,OAAOiC,GACLjC,EAAM,GACNA,EAAM,GACNA,EAAM,GACNA,EAAM,GACNA,EAAM,GACNA,EAAM,gBAIUA,GAClB,OAAO,IAAIG,EAA2BH,cAGT8B,EAA0BI,GACvDJ,EAAMK,GAAKD,EAAO,GAAKJ,EAAM1B,EAAI8B,EAAO,GAAKJ,EAAMzB,EAAI6B,EAAO,GAC9DJ,EAAMM,GAAKF,EAAO,GAAKJ,EAAM1B,EAAI8B,EAAO,GAAKJ,EAAMzB,EAAI6B,EAAO,GAGhE,IAAMG,EAAoBlE,KAAKD,GAAK,IAMpC,IAUYoE,EAVNC,EAAoB,EAAIF,EACxBG,EAAyB,EAAVrE,KAAKD,GAK1B,WAAmB8B,EAAeyC,GAChC,OAASzC,EAAQyC,EAAUA,GAAUA,YAG3BH,GACVA,mCACAA,2CACAA,6CACAA,+BACAA,iCACAA,+BACAA,uBACAA,iCACAA,mBACAA,qBACAA,8BACAA,sCACAA,wCACAA,0BACAA,6BAfUA,IAAAA,WC1KAI,yFD2JSC,GAEnB,OADmBC,EAAUD,EAAS,KAClBN,iBAKD/B,GACnB,OAAOsC,EAAUtC,EAASkC,GAAQD,gDAyBdM,EAAiBC,GACrC,IAAKD,EAAOE,UACV,MAAM,IAAIC,MAAM,iEAGlB,IAAMC,EAAgBJ,EAAOE,UAEzBG,EAAc,EAClB,OAAQJ,GACN,KAAKR,EAAca,iBACnB,KAAKb,EAAcc,WACnB,KAAKd,EAAce,cACjBH,EAAc,IACd,MACF,KAAKZ,EAAcgB,aACnB,KAAKhB,EAAciB,OACnB,KAAKjB,EAAckB,UACjBN,EAAc,GACd,MACF,KAAKZ,EAAcmB,kBACnB,KAAKnB,EAAcoB,YACnB,KAAKpB,EAAcqB,eACjBT,EAAc,IACd,MACF,KAAKZ,EAAcsB,YACnB,KAAKtB,EAAcuB,MACnB,KAAKvB,EAAcwB,SACjBZ,EAAc,EAIlB,IAAIa,EAAe,EACnB,OAAQjB,GACN,KAAKR,EAAciB,OACnB,KAAKjB,EAAcc,WACnB,KAAKd,EAAcoB,YACnB,KAAKpB,EAAc0B,KACnB,KAAK1B,EAAcuB,MACjBE,EAAe,GACf,MACF,KAAKzB,EAAcgB,aACnB,KAAKhB,EAAca,iBACnB,KAAKb,EAAcmB,kBACnB,KAAKnB,EAAc2B,WACnB,KAAK3B,EAAcsB,YACjBG,EAAe,EAInB,OAAOG,EAAKlC,GACTmC,UAAUlB,EAAMmB,OAAOC,MAAQnB,EAAaD,EAAMmB,OAAOE,OAASP,GAClEI,WAAWtB,EAAOwB,MAAQnB,GAAcL,EAAOyB,OAASP,mxDC9KvBQ,EAAuBC,2FAC9C,SAAMC,MAAMF,EAAKC,WACX,SADNE,SACiBC,eAC9B,SAAOC,EADYF,2BAIaG,GAE9B,IAeMC,EAhBR,GAAIC,MAAMC,QAAQH,GAGhB,OAFMC,EAA2BD,GAC1BI,KAAOvC,EAAgBwC,KACvBJ,EAET,IAAKD,EAAWM,OACd,MAAM,IAAInC,MAAM,+BAElB,OACQ8B,EADJC,MAAMC,QAAQH,EAAWM,SAEzBA,OAAQN,EAAWM,OACnBF,KAAMvC,EAAgB0C,cACtBC,KAAMR,EAAWQ,OAKjBF,OAAQN,EAAWM,OACnBF,KAAMvC,EAAgB4C,aACtBD,KAAMR,EAAWQ,iBAUgBE,EAA0CC,6JAE5D,OADbC,QACmBF,UACb,OADNV,EAAaa,YACDF,UACE,OADdG,EAAMD,YACcd,EAAkBC,kBAAtCe,EAAcF,SACZE,EAAYX,WACbvC,EAAgBwC,KAAhB,iBAYAxC,EAAgB0C,cAAhB,kBAYA1C,EAAgB4C,aAAhB,iCAvBGO,EAA6BhB,6CACfiB,EAAAC,EAAAF,oDAClBG,EAAAP,EAASQ,GADAC,WACMC,QAAcC,kBAC3BT,EACAO,EAAM9F,EACN8F,EAAM7F,EACN6F,EAAM7B,MACN6B,EAAM5B,iBALR0B,KAAuBN,gNAQzB,qBAEMW,EAA8CxB,gDAC3ByB,EAAAP,EAAAM,EAAqBlB,4DAC5CoB,EAAAd,EAASe,GADAC,WACWC,YAAkBN,kBACpCT,EACAc,EAAWP,MAAM9F,EACjBqG,EAAWP,MAAM7F,EACjBoG,EAAWP,MAAMS,EACjBF,EAAWP,MAAMU,aALnBL,KAAgCb,oNAQlC,qBAEMmB,EAA4ChC,gDAC9BiC,EAAAf,EAAAgB,OAAOC,KAAKH,EAAoB1B,6DAC5C8B,EAAcJ,EAAoB1B,OAD/Be,WAETgB,EAAAzB,EAAS0B,EAAAjB,KAAeE,kBACtBT,EACAsB,EAAYf,MAAM9F,EAClB6G,EAAYf,MAAM7F,EAClB4G,EAAYf,MAAMS,EAClBM,EAAYf,MAAMU,aALpBM,KAAkBxB,oNAQpB,qBAEJ,SAAOD,mBAGuBlB,EAAuBC,iGACzC,SAAMC,MAAMF,EAAKC,WAChB,SADDE,SACW0C,eACvB,OADMA,EAAO1C,YACN0B,kBAAkBgB,mBAvJf1E,GACVA,mBACAA,mCACAA,sCAHUA,IAAAA,WCmHA2E,EAQAC,EASAC,EAMAC,EAkDAC,EAoBAC,sHAjGUC,EAAeC,GACnC,OAAOD,EAAKE,EAAID,EAAMC,YAGZR,GACVA,cACAA,gBACAA,kBACAA,gBACAA,aALUA,IAAAA,gBAQAC,GACVA,YACAA,oBACAA,kBACAA,0BACAA,4BACAA,mBANUA,IAAAA,gBASAC,GACVA,yBACEA,uBACAA,0BAHQA,IAAAA,gBAMAC,GACVA,cACDA,oBACCA,cACAA,iCACAA,cACAA,oBACAA,sBACAA,cACAA,cACAA,wBACAA,cACAA,mCACAA,gBACAA,cACAA,cACAA,uBACAA,+BACAA,yBACAA,yBACAA,2BACAA,2BACAA,yBACAA,2BACAA,2BACAA,yBACAA,2BACAA,2BACAA,+BACAA,+BACAA,6BACAA,6BACAA,6BACAA,uBACAA,yBACAA,cACAA,uBApCUA,IAAAA,gBAkDAC,GACVA,uBACAA,6BACAA,2BACAA,qBACAA,qBACAA,qBACAA,uBACAA,yBACAA,6BACAA,wBAVUA,IAAAA,gBAoBAC,GACVA,mBACAA,mBACAA,wBAHUA,IAAAA,WC7MAI,kMCgBZ,aACS7H,kBAsCT,OArCS8H,kBAAP,WACE9H,KAAK+H,cAEAD,mBAAP,SAAcE,GAAd,WAEE,OADAhI,KAAK+H,UAAUE,KAAKD,IAElBE,QAAS,WACHC,EAAKJ,UAAUK,SAASJ,IAC1BG,EAAKJ,UAAUM,OACbF,EAAKJ,UAAUO,QAAQN,GACvB,MAMHF,oBAAP,WAAA,WACE,OAAO,IAAIS,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAWP,EAAKQ,OAAO,SAACC,GAC5BF,EAASR,UACTM,EAAQI,QAIPd,iBAAP,SAAYE,GACV,IAAMU,EAAW1I,KAAK2I,OAAO,SAACE,GAC5Bb,EAASa,GACTH,EAASR,YAEX,OAAOQ,GAGFZ,iBAAP,SAAYe,eACV,IAAuB,IAAAC,EAAAhD,EAAA9F,KAAK+H,UAAUgB,uCAAS,EAC7Cf,WAASa,0HC0Fb,WAAY9H,GAlCLf,QAAa,GACbA,UAAmBwH,EAAWwB,OAC9BhJ,sBAAmC+B,EAASgH,QAC5C/I,0BAAuC+B,EAASgH,QAChD/I,aAA0B+B,EAASgH,QACnC/I,uBAA4B,EAC5BA,mBAAwB,EACxBA,OAAY,EACZA,YAAkB,KAClBA,eAAwB,KACxBA,sBAA2B,EAC3BA,YAAiBuH,EAAO0B,KACxBjJ,aAAkB,EAClBA,YAAiB,EACjBA,WAAgB,EAChBA,iBAEAA,YAAwB,KACxBA,cAAmB,EACnBA,cAAmB,EACnBA,WAAgB,EAChBA,YAAiB,EACjBA,uBAA4B,EAC5BA,oBAAgD,IAAI8H,GACpD9H,kBAA4C,IAAI8H,GAChD9H,oBAAgD,IAAI8H,GACpD9H,qBAAkD,IAAI8H,GACtD9H,kBAA4C,IAAI8H,GAChD9H,gBAAwC,IAAI8H,GAC5C9H,mBAA8C,IAAI8H,GAClD9H,iBAAgD,IAAI8H,GACpD9H,wBAA8D,IAAI8H,GAClE9H,kBAGLA,KAAKkJ,GAAKnI,EAAMmI,GAChB,IAAMrG,EAA2B9B,EAAM8B,UAAYd,EAASgH,QAC5D/I,KAAKwF,SAAWzE,EAAMyE,SAAWzE,EAAMyE,SAAWxF,KAAKwF,SACvDxD,EAAIa,GACDsG,MAAMnJ,KAAKoJ,kBACXD,MAAMnJ,KAAKqJ,sBAEVtI,EAAMuI,eAAe,WACvBtJ,KAAKuJ,cAAgBvJ,KAAKwJ,kBAAoBzI,EAAM0I,OAElD1I,EAAMuI,eAAe,OACvBtJ,KAAK4H,EAAI7G,EAAM6G,GAEb7G,EAAM2I,QAAU3I,EAAM6D,YACxB5E,KAAK2J,YACH5I,EAAM6D,WACN7D,EAAM2I,QAiWd,OA5VSV,uBAAP,SAAkBnH,GAChB,OAAOA,EAAMK,IAAM,GAAKL,EAAMK,IAAMlC,KAAKoE,OAASvC,EAAMM,IAAM,GAAKN,EAAMM,IAAMnC,KAAKqE,QAG/E2E,wBAAP,SAAmBnH,GACjB,OAAO7B,MAGFgJ,2BAAP,SAAsBnH,GACpB,OAAO,GAGFmH,uBAAP,SAAkBnH,KAIXmH,uBAAP,SAAkBnH,EAA0B+H,GAE1C,GADA5J,KAAK6J,YAAYD,GACb5J,KAAK8J,iBAEP,IADA,IAAIC,EAAkB/J,KAAKgK,OACpBD,GAAQ,CAEb,GADAjI,EAAeD,EAAOkI,EAAOxL,UACzBwL,EAAOE,WAAWpI,KAAUkI,EAAOG,YAAYrI,GAGjD,OAAO,KAFPkI,EAASA,EAAOC,OAOtB,GADAlI,EAAeD,EAAO7B,KAAKzB,SACvByB,KAAKiK,WAAWpI,GAClB,OAAO7B,KAAKkK,YAAYrI,IAIrBmH,sBAAP,WACE,OAAOhJ,KAAKmK,QAAUnK,KAAO,MAGxBgJ,iBAAP,SAAYoB,GACV,IAAKC,OAAOC,SAASF,GACnB,MAAM,IAAIrH,MAAM,mEAAmEqH,OAErF,GAAIA,EAAS,EACX,MAAM,IAAIrH,MAAM,qEAAqEqH,OAEvF,IAAMG,EAAevK,KAAKwK,kBAC1B,GAAID,GAAgBA,EAAaE,OAAShD,EAAkBiD,OAC1D,MAAM,IAAI3H,MAAM,4FAElB,IAAM4H,EAAK3K,KAAK4K,iBAIhB,OAHAD,EAAGF,KAAOhD,EAAkBoD,KAC5BF,EAAGG,IAAMH,EAAGI,MAAQX,EACpBpK,KAAKgL,UAAU/C,KAAK0C,GACb3K,MAEFgJ,yBAAP,SAAoBnG,GAClB,IAAM0H,EAAevK,KAAKwK,kBAC1B,GAAID,GAAgBA,EAAaE,OAAShD,EAAkBiD,OAC1D,MAAM,IAAI3H,MACR,oGAIJ,IAAMkI,EAAKpI,EAASoI,IAAsB,IAAhBpI,EAASoI,GAAWpI,EAASoI,GAAKpI,EAASqI,EAC/DC,EAAKtI,EAASsI,IAAsB,IAAhBtI,EAASsI,GAAWtI,EAASsI,GAAKtI,EAASqI,EAC/DP,EAAK3K,KAAK4K,iBAER3K,2HAQR,OAHA0K,EAAGS,GAAKnL,EAERD,KAAKgL,UAAU/C,KAAK0C,GACb3K,MAGFgJ,iBAAP,SAAYnG,GACV,IAAK,IAAIwI,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAKhB,OAAOC,SAASzH,EAASwI,IAC5B,MAAM,IAAItI,MAAM,oCAAoC/C,KAAKkJ,iBAAgBmC,6BAI7E,IAAMd,EAAevK,KAAKwK,kBAC1B,GAAID,GAAgBA,EAAaE,OAAShD,EAAkBiD,OAC1D,MAAM,IAAI3H,MAAM,4FAGlB,IAAM4H,EAAK3K,KAAK4K,iBAIhB,OAHAD,EAAGS,GAAKnH,EAAKpB,GAAU5C,MACvBD,KAAKgL,UAAU/C,KAAK0C,GAEb3K,MAGFgJ,oBAAP,SAAeS,GACb,gBADaA,MACRY,OAAOC,SAASb,GACnB,MAAM,IAAI1G,MACR,oCAAoC/C,KAAKkJ,QAAOO,yDAGpD,GAAIA,EAAQ,GAAKA,EAAQ,EACvB,MAAM,IAAI1G,MACR,oCAAoC/C,KAAKkJ,QAAOO,kCAGpD,IAAMc,EAAevK,KAAKwK,kBAC1B,GAAID,GAAgBA,EAAaE,OAAShD,EAAkBiD,OAC1D,MAAM,IAAI3H,MACR,uGAIJ,IAAM4H,EAAKJ,GAAgBvK,KAAK4K,iBAMhC,OALAD,EAAGlB,MAAQA,EAEmB,IAA1BzJ,KAAKgL,UAAUZ,QACjBpK,KAAKgL,UAAU/C,KAAK0C,GAEf3K,MAGFgJ,iBAAP,SAAYpB,GACV,IAAKyC,OAAOC,SAAS1C,GACnB,MAAM,IAAI7E,MACR,gCAAgC/C,KAAKkJ,QAAOtB,yDAIhD,OADA5H,KAAK4H,EAAIA,EACF5H,MAGFgJ,iBAAP,SAAYsC,GACV,IAAKjB,OAAOC,SAASgB,GACnB,MAAM,IAAIvI,MAAM,+DAA+DuI,OAEjF,GAAIA,EAAW,EACb,MAAM,IAAIvI,MAAM,iEAAiEuI,OAEnF,IAAMf,EAAevK,KAAKwK,kBAC1B,IAAKD,EACH,MAAM,IAAIxH,MAAM,4CAGlB,GAAIwH,GAAgBA,EAAaE,OAAShD,EAAkBiD,OAC1D,MAAM,IAAI3H,MACR,+GAIJ,OADAwH,EAAaO,IAAMP,EAAaQ,MAAQO,EACjCtL,MAGFgJ,0BAAP,SAAqBY,GACnB,IAAMW,EAAevK,KAAKwK,kBAE1B,QAAKD,IAIDA,EAAaE,OAAShD,EAAkBiD,SAI5C1K,KAAKuL,eAAe3B,GACbW,EAAaO,IAAMlB,KAGrBZ,mBAAP,aAGOA,wBAAP,SAAmBY,WACjB,KAAIA,GAAO5J,KAAKwL,kBAAhB,CAGAxL,KAAKwL,iBAAmB5B,EACxB,IAAM6B,EAAgBzL,KAAKgL,UAAU,GACrCpB,EAAM1L,KAAKwN,IACTD,EAAgBA,EAAcV,MAAQ,EACtCnB,OAEF,IAAiB,IAAAd,EAAAhD,EAAA9F,KAAKgL,yCAAW,CAA5B,IAAML,UACT,GAAIA,EAAGI,OAASnB,EAAK,CACnB,IAAM+B,GAAY/B,EAAMe,EAAGI,QAAUJ,EAAGG,IAAMH,EAAGI,OAC3C1M,EAAQsM,EAAGiB,KAAKD,GACtB3J,EAAIhC,KAAKqJ,sBACNwC,IACCF,EAAW,EACPhB,EAAGS,IAEHT,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,IACzCnB,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,IACzCnB,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,IACzCnB,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,IACzCnB,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,IACzCnB,EAAGmB,KAAK,GAAKzN,GAASsM,EAAGS,GAAG,GAAKT,EAAGmB,KAAK,MAGjD9L,KAAKwJ,kBAAoBmB,EAAGpB,cAAgBlL,GAASsM,EAAGlB,MAAQkB,EAAGpB,kHAQvE,GAJAtF,EAAKjE,KAAKqJ,sBACP9K,UACA4K,MAAMnJ,KAAKzB,SAEVyB,KAAKgK,OAAQ,CAEfhK,KAAKgK,OAAOH,YAAYD,GACxB,IAAMmC,EAAS/L,KAAKgK,OACpB/F,EAAK8H,EAAOxN,SACT2F,WAAW6H,EAAOC,QAAQtE,MAAOqE,EAAOC,QAAQC,KAChDC,UAAUlM,KAAKzB,SACf4K,MAAMnJ,KAAKzB,YAIXyK,uBAAP,SAAkBmD,GAChB,IAAMC,EAAapM,KAAKmM,QAgBxB,OAfAnM,KAAKmM,QAAUA,EACfnM,KAAKoE,MAAQpE,KAAKwF,SAASxF,KAAKmM,SAAS/H,MACzCpE,KAAKqE,OAASrE,KAAKwF,SAASxF,KAAKmM,SAAS9H,OAEtC+H,IAAepM,KAAKmM,SACtBnM,KAAKqM,mBAAmBC,MACtBC,UAAW,cACXC,cAAeJ,EACfK,SAAU,UACV/C,OAAQ1J,KACRgD,MAAOhD,KAAK8C,UACZ7C,MAAOD,KAAKmM,UAITnM,MAGFgJ,mBAAP,SAAc0D,GACZA,EAAIC,UAAU3M,KAAKwF,SAASxF,KAAKmM,SAAU,EAAG,IAGzCnD,oBAAP,SAAeJ,GACb5I,KAAK4M,aAAaN,KAAK1D,IAGlBI,kBAAP,SAAaJ,GACX5I,KAAK6M,WAAWP,KAAK1D,IAGhBI,qBAAP,SAAgBJ,GACd5I,KAAK8M,cAAcR,KAAK1D,IAGnBI,iBAAP,SAAY4C,GACV,IAAMrB,EAAevK,KAAKwK,kBAC1B,IAAKD,EACH,MAAM,IAAIxH,MAAM,oEAElB,GAAoB,mBAAT6I,EACT,MAAM,IAAI7I,MAAM,uDAAuD6I,OAEzE,GAAIrB,EAAaE,OAAShD,EAAkBiD,OAC1C,MAAM,IAAI3H,MAAM,uDAGlB,OADAwH,EAAaqB,KAAOA,EACb5L,MAGFgJ,mBAAP,WACE,IAAM2B,EAAK3K,KAAK4K,iBAGhB,OAFAD,EAAGF,KAAOhD,EAAkBiD,OAC5B1K,KAAKgL,UAAU/C,KAAK0C,GACb3K,MAGFgJ,2BAAP,SAAsBY,GACpB,IAAMW,EAAevK,KAAKwK,kBACpBf,EAAQc,EACVA,EAAad,MACbzJ,KAAKwJ,kBAaT,OAZAxJ,KAAKwJ,kBAAoBC,EACzBzJ,KAAKuJ,cAAgBE,EAErBzH,EAAIhC,KAAKqJ,sBAAsBwC,IAC7BtB,EACIA,EAAaa,GACbpL,KAAKqJ,sBAEXrH,EAAIhC,KAAKoJ,kBAAkByC,IAAI7L,KAAKqJ,sBAEpCrJ,KAAKwL,iBAAmB5B,EACxB5J,KAAKgL,aACEhL,MAGFgJ,qBAAP,WACE,OAAIhJ,KAAK8C,UACA9C,KAAK8C,UAEV9C,KAAKgK,OACAhK,KAAKgK,OAAO+C,WAEd,MAGK/D,wBAAd,SAA0BgE,EAAkCtD,uGAC1C,OAAhBjF,EAAAzE,QAAsBiN,EAAiBD,EAAWtD,WAEpC,OAFdjF,EAAKe,SAAWO,SAChBmH,GAAApE,EAAA9I,KAAKmN,aAAYb,aACGU,UAGJ,OAHdI,aAAYrH,SACZqH,YAAW,eACXA,SAAQpN,QACY0J,iBAJtBwD,YAIEE,eAAcrH,SACdqH,QAAOpN,KAAK8C,yBAIRkG,2BAAR,WACE,IAAMuB,EAAevK,KAAKwK,kBAEpBpB,EAAmBmB,EACrBA,EAAaa,GACbpL,KAAKqJ,qBACHI,EAAQc,EACVA,EAAad,MACbzJ,KAAKwJ,kBAEHuB,EAAQR,EACVA,EAAaO,IACbuC,KAAKzD,MAET,OACEH,QACAmC,KAAMrB,EAAeA,EAAaqB,KAAO0B,EACzCxC,IAAKC,EACLe,KAAM7H,EAAKmF,GAAkBnJ,MAC7BsJ,cAAeE,EACfsB,QACAK,GAAInH,EAAKmF,GAAkBnJ,MAC3BwK,KAAMhD,EAAkB8F,OAIpBvE,4BAAR,WACE,OAAOhJ,KAAKgL,UAAUZ,OAAS,EAAIpK,KAAKgL,UAAUhL,KAAKgL,UAAUZ,OAAS,GAAK,0BClejF,WAAYrJ,GAAZ,MACEyM,YAAMzM,gBAXQoH,OAAmBX,EAAWiG,OACvCtF,YAAoB,EACpBA,OAAe,YACfA,YAAoB,QACpBA,WAAmB,GACnBA,OAAgB,GAChBA,YAAuBf,EAAUsG,OACjCvF,eAA6Bd,EAAasG,OAC1CxF,SAAiBZ,EAAOqG,QAI7BzF,EAAK0F,SAAW9M,EAAM8M,WAAY,EAClC1F,EAAK2F,KAAO/M,EAAM+M,MAAQ3F,EAAK2F,KAC/B3F,EAAK4F,UAAYhN,EAAMgN,WAAa5F,EAAK4F,UACzC5F,EAAK6F,SAAWjN,EAAMiN,UAAY7F,EAAK6F,SACvC7F,EAAK8F,KAAOlN,EAAMkN,MAAQ9F,EAAK8F,KAC/B9F,EAAK+F,UAAYnN,EAAMmN,UACvB/F,EAAKgG,aAAepN,EAAMoN,eA0B9B,OA7C4BC,OAsBnBX,mBAAP,WAIEzN,KAAKqO,YAHUrO,KAAKsO,OAAS,SAAW,iBAC1BtO,KAAKuO,MAAQ,QAAU,gBACpBvO,KAAK6N,SAAW,WAAa,eAG9CL,YAAMgB,mBAGDf,mBAAP,SAAcf,GACZc,YAAMiB,iBAAO/B,GACbA,EAAIxI,UAA8C,GAApClE,KAAKwF,SAASxF,KAAKmM,SAAS/H,MAAkD,GAArCpE,KAAKwF,SAASxF,KAAKmM,SAAS9H,QACnFqI,EAAIyB,aAAe9G,EAAasG,OAChCjB,EAAIwB,UAAY9G,EAAUsG,OAC1BhB,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtCpB,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAAS3O,KAAKiO,KAAM,EAAG,IAGtBR,oBAAP,SAAeQ,GAEb,OADAjO,KAAKiO,KAAOA,EACLjO,SA3CiBgJ,mBCN1B,WAAYjI,GAAZ,MACEyM,YAAMzM,gBALQoH,OAAmBX,EAAWoH,UACvCzG,OAAe,GACfA,cAAsB,GACtBA,QAAgB,GAGrBA,EAAK0G,YAAc9N,EAAM8N,YACzB1G,EAAK2G,MAAQ/N,EAAM+N,QAEvB,OAV+BV,UAAApF,mBCkC7B,WAAYjI,GAAZ,MACEyM,YAAMzM,gBAZQoH,OAAmBX,EAAWuH,SACvC5G,WAAmB,EACnBA,OAAe,GACfA,OAAe,YACfA,YAAoB,QACpBA,WAAmB,GACnBA,YAAuBf,EAAUM,KACjCS,eAA6Bd,EAAasG,OAC1CxF,qBAA+D,IAAIL,GACnEK,SAAiBZ,EAAOqG,QAI7BzF,EAAK6G,QAAUC,QAAQlO,EAAMiO,WAAY,EACzC7G,EAAK8F,KAAOlN,EAAMkN,MAAQ9F,EAAK8F,KAC/B9F,EAAK2F,KAAO/M,EAAM+M,MAAQ3F,EAAK2F,KAC/B3F,EAAK4F,UAAYhN,EAAMgN,WAAa5F,EAAK4F,UACzC5F,EAAK+F,UAAYnN,EAAMmN,WAAa/F,EAAK+F,UACzC/F,EAAKgG,aAAepN,EAAMoN,cAAgBhG,EAAKgG,eA4CnD,OA/D8BC,OAsBrBW,mBAAP,WACE,IAAMvC,EAAgBxM,KAAKgP,QAU3B,OATAhP,KAAKgP,SAAWhP,KAAKgP,QACrBhP,KAAKkP,mBAAmB5C,MACtBC,UAAW,cACXC,gBACAC,SAAU,UACV/C,OAAQ1J,KACRgD,MAAOhD,KAAK8C,UACZ7C,MAAOD,KAAKgP,UAEPhP,MAGF+O,uBAAP,SAAkBlN,GAEhB,OADA7B,KAAKmP,SACE3B,YAAM4B,qBAAWvN,IAGnBkN,mBAAP,SAAcrC,GACZc,YAAMiB,iBAAO/B,GACbA,EAAIxI,UAAuB,IAAblE,KAAKoE,MAAapE,KAAKqE,OAAS,GAC9CqI,EAAIwB,UAAYlO,KAAKkO,UACrBxB,EAAIyB,aAAenO,KAAKmO,aACxBzB,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtCpB,EAAIiC,SAAS3O,KAAKiO,KAAM,EAAG,IAGtBc,mBAAP,WAIE/O,KAAKqO,YAHUrO,KAAKsO,OAAS,SAAW,iBAC1BtO,KAAKuO,MAAQ,QAAU,gBACrBvO,KAAKgP,QAAU,UAAY,cAE3CxB,YAAMgB,mBAGDO,oBAAP,SAAed,GAEb,OADAjO,KAAKiO,KAAOA,EACLjO,SA7DmBgJ,mBCrB5B,WAAYjI,GAAZ,MACEyM,YAAMzM,gBAHQoH,OAAmBX,EAAW6H,QAahD,OAd2BjB,OAMlBiB,mBAAP,WAGErP,KAAKqO,YAFUrO,KAAKsO,OAAS,SAAW,iBAC1BtO,KAAKuO,MAAQ,QAAU,YAGrCvO,KAAKsP,OAAStP,KAAKuO,MAAQhH,EAAOqG,QAAUrG,EAAO0B,KACnDuE,YAAMgB,sBAZiBxF,kBCoBzB,WAAYjI,GALLf,gBACAA,kBACAA,eACAA,kBAA6B,KAGlCA,KAAKuP,aAAexO,EAAMwO,aA6E9B,OA1ESC,sBAAP,SAAiB5M,GAKf,OAJK5C,KAAKyP,QAAQrH,SAASxF,KACzB5C,KAAKyP,QAAQxH,KAAKrF,GAClBA,EAAOE,UAAY9C,MAEdA,MAGFwP,yBAAP,SAAoB5M,GAKlB,OAJI5C,KAAKyP,QAAQrH,SAASxF,KACxB5C,KAAKyP,QAAQpH,OAAOrI,KAAKyP,QAAQnH,QAAQ1F,GAAS,GAClDA,EAAOE,UAAY,MAEd9C,MAGFwP,wBAAP,SAAmB5M,GAMjB,OALK5C,KAAK0P,UAAUtH,SAASxF,IAC3B5C,KAAK0P,UAAUzH,KAAKrF,GAIf5C,MAGFwP,2BAAP,SAAsB5M,GAMpB,OALI5C,KAAK0P,UAAUtH,SAASxF,IAC1B5C,KAAK0P,UAAUrH,OAAOrI,KAAK0P,UAAUpH,QAAQ1F,GAAS,GAIjD5C,MAGFwP,qBAAP,SAAgB3N,GAId,OAHK7B,KAAK2P,OAAOvH,SAASvG,IACxB7B,KAAK2P,OAAO1H,KAAKpG,GAEZ7B,MAGFwP,wBAAP,SAAmB3N,GAIjB,OAHI7B,KAAK2P,OAAOvH,SAASvG,IACvB7B,KAAK2P,OAAOtH,OAAOrI,KAAK2P,OAAOrH,QAAQzG,GAAQ,GAE1C7B,MAGFwP,0BAAP,SAAqBtG,eACnB,IAAqB,IAAAJ,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UACT,GAAIA,EAAOsG,KAAOA,EAChB,OAAOtG,oGAGX,OAAO,MAGF4M,yBAAP,SAAoBtG,eAClB,IAAqB,IAAAJ,EAAAhD,EAAA9F,KAAK2P,sCAAQ,CAA7B,IAAM/M,UACT,GAAIA,EAAOsG,KAAOA,EAChB,OAAOtG,oGAGX,OAAO,MAGF4M,4BAAP,SAAuBtG,eACrB,IAAqB,IAAAJ,EAAAhD,EAAA9F,KAAK0P,yCAAW,CAAhC,IAAM9M,UACT,GAAIA,EAAOsG,KAAOA,EAChB,OAAOtG,oGAGX,OAAO,0BC4CT,WAAY7B,GAAZ,MACEyM,YAAMzM,gBArDDoH,SAA4B,KAC5BA,MAAgC,KAChCA,qBACAA,cACAA,cACLmG,OAAQ,KACRsB,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXxB,MAAO,KACPrF,GAAI,QACJhH,GAAI,EACJC,GAAI,EACJsI,KAAM,QACNtK,EAAG,EACHC,EAAG,GAEE+H,cAAsB,EAEtBA,iBAAgD,IAAIL,GACpDK,eAA4C,IAAIL,GAChDK,iBAAgD,IAAIL,GAEpDK,iBAAgD,IAAIL,GACpDK,eAA4C,IAAIL,GAChDK,iBAAgD,IAAIL,GAEpDK,mBAAoD,IAAIL,GACxDK,gBAA8C,IAAIL,GAClDK,iBAAgD,IAAIL,GACpDK,kBAAkD,IAAIL,GAEtDK,eAA4C,IAAIL,GAChDK,aAAwC,IAAIL,GAC5CK,gBAA8C,IAAIL,GAEjDK,WACJvG,OAAQ,KAAMgH,MAAO,YAAaoH,SAAU,SAAApP,GAAK,OAAAuH,EAAK8H,UAAUrP,MAChEgB,OAAQsO,OAAQtH,MAAO,UAAWoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKgI,QAAQvP,MAC9DgB,OAAQ,KAAMgH,MAAO,YAAaoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKiI,UAAUxP,MAChEgB,OAAQ,KAAMgH,MAAO,aAAcoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKkI,WAAWzP,MAClEgB,OAAQsO,OAAQtH,MAAO,WAAYoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKmI,SAAS1P,MAChEgB,OAAQ,KAAMgH,MAAO,YAAaoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKoI,UAAU3P,MAChEgB,OAAQsO,OAAQtH,MAAO,cAAeoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKqI,YAAY5P,MAElEuH,mBACJvG,OAAQsO,OAAQtH,MAAO,UAAWoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKsI,QAAQ7P,MAC9DgB,OAAQsO,OAAQtH,MAAO,WAAYoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKuI,SAAS9P,MAChEgB,OAAQsO,OAAQtH,MAAO,QAASoH,SAAU,SAAApP,GAAK,OAAAuH,EAAKwI,MAAM/P,MAK5DuH,EAAKhE,OAASpD,EAAMoD,OACfgE,EAAKhE,SACRgE,EAAKhE,OAASyM,SAASC,cAAc,UACrCD,SAASE,KAAKC,YAAY5I,EAAKhE,SAEjCgE,EAAKhE,OAAOC,MAAQrD,EAAMqD,MAC1B+D,EAAKhE,OAAOE,OAAStD,EAAMsD,OAC3B8D,EAAKuE,IAAMvE,EAAKhE,OAAO6M,WAAW,MAClC7I,EAAK8I,aACL9I,EAAK+I,SAAS/I,EAAKgJ,cAmfvB,OAnjBwC/C,OAmE/BgD,uBAAP,WAAA,WACEpR,KAAK6I,OAAOwI,QACV,SAAAzI,GAAS,OAACA,EAAMhH,QAAUuG,EAAKhE,QAC5BmN,iBAAiB1I,EAAMA,MAAOA,EAAMoH,YAEzChQ,KAAKuR,eAAeF,QAClB,SAAAzI,GAAS,OAACA,EAAMhH,QAAUuG,EAAKhE,QAC5BmN,iBAAiB1I,EAAMA,MAAOA,EAAMoH,aAIpCoB,oBAAP,WAAA,WACEpR,KAAK6I,OAAOwI,QACV,SAAAzI,GAAS,OAACA,EAAMhH,QAAUuG,EAAKhE,QAC5BqN,oBAAoB5I,EAAMA,MAAOA,EAAMoH,aAIvCoB,sBAAP,SAAiBxI,GAUf,OATA5I,KAAKyR,eAAenF,MAClBwD,MAAM,EACNvD,UAAW,YACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPG,EAAGyI,EAAM+I,QACTvR,EAAGwI,EAAMgJ,UAEJ5R,KAAK6R,UAAU7R,KAAKmR,WAAYvI,IAGlCwI,oBAAP,SAAexI,GAUb,OATA5I,KAAK8R,aAAaxF,MAChBwD,MAAM,EACNvD,UAAW,UACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPG,EAAGyI,EAAM+I,QACTvR,EAAGwI,EAAMgJ,UAEJ5R,KAAK+R,QAAQ/R,KAAKmR,WAAYvI,IAGhCwI,sBAAP,SAAiBxI,GAWf,OAVA5I,KAAKgS,eAAe1F,MAClBwD,KAAM9P,KAAKmR,WAAWrB,KACtBvD,UAAW,YACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPG,EAAGyI,EAAM+I,QACTvR,EAAGwI,EAAMgJ,UAGJ5R,KAAKiS,UAAUjS,KAAKmR,WAAYvI,IAGlCwI,uBAAP,SAAkBxI,GAIhB,IAHA,IAAIsJ,EACArQ,EAEKwJ,EAAI,EAAGA,EAAIzC,EAAMuJ,eAAe/H,OAAQiB,IAE/CrL,KAAKoS,gBAAgB9F,MACnBwD,MAAM,EACNvD,UAAW,aACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPkS,MAPFA,EAAQtJ,EAAMuJ,eAAe9G,GAQ3BlL,EAAG+R,EAAMP,QACTvR,EAAG8R,EAAMN,UAEX/P,EAAQ7B,KAAKqS,cAAcH,GAC3BlS,KAAK6R,UAAUhQ,EAAOqQ,IAInBd,qBAAP,SAAgBxI,GAKd,IAJA,IACI/G,EADAqQ,EAAe,KAIV7G,EAAI,EAAGA,EAAIzC,EAAMuJ,eAAe/H,OAAQiB,IAE/CrL,KAAKsS,cAAchG,MACjBwD,MAAM,EACNvD,UAAW,WACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPkS,MAPFA,EAAQtJ,EAAMuJ,eAAe9G,GAQ3BlL,EAAG+R,EAAMP,QACTvR,EAAG8R,EAAMN,UAGN5R,KAAKuS,gBAAgBL,EAAMM,aAK9BxS,KAAK+R,QADLlQ,EAAQ7B,KAAKuS,gBAAgBL,EAAMM,YACfN,GACpBlS,KAAKyS,iBAAiBP,KALtBrQ,EAAQ7B,KAAK0S,uBAAuBR,EAAMM,WAAWG,WAAY,SACjE3S,KAAKiS,UAAUpQ,EAAOqQ,KASrBd,wBAAP,SAAmBxI,GAKjB,IAJA,IAAIsJ,EAAe,KAIV7G,EAAI,EAAGA,EAAIzC,EAAMuJ,eAAe/H,OAAQiB,IAE/CrL,KAAK4S,iBAAiBtG,MACpBwD,MAAM,EACNvD,UAAW,cACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPkS,MAPFA,EAAQtJ,EAAMuJ,eAAe9G,GAQ3BlL,EAAG,KACHC,EAAG,OAEDJ,KAAKuS,gBAAgBL,EAAMM,cAE7BxS,KAAK6S,YADG7S,KAAKuS,gBAAgBL,EAAMM,YACXN,GACxBlS,KAAKyS,iBAAiBP,KAKrBd,sBAAP,SAAiBxI,GAKf,IAJA,IACI/G,EADAqQ,EAAe,KAIV7G,EAAI,EAAGA,EAAIzC,EAAMuJ,eAAe/H,OAAQiB,IAE/CrL,KAAK8S,eAAexG,MAClBwD,MAAM,EACNvD,UAAW,YACXmF,SAAU9I,EACVc,OAAQ1J,KACRgD,MAAOhD,KACPkS,MAPFA,EAAQtJ,EAAMuJ,eAAe9G,GAQ3BlL,EAAG+R,EAAMP,QACTvR,EAAG8R,EAAMN,UAEN5R,KAAKuS,gBAAgBL,EAAMM,YAI9B3Q,EAAQ7B,KAAKuS,gBAAgBL,EAAMM,aAHnC3Q,EAAQ7B,KAAKqS,cAAcH,IACrBpC,MAAO,EAIf9P,KAAKiS,UAAUpQ,EAAOqQ,IAGnBd,sBAAP,SAAiBvP,EAA0BgB,GACzC,IAAMkQ,EAAclR,EAAMiO,KACrBiD,IACHlR,EAAMiO,MAAO,EACbjO,EAAMkO,WAAY,GAEpB,IAAMiD,EAAYnR,EAAM1B,EAClB8S,EAAYpR,EAAMzB,EACxBJ,KAAKiS,UAAUpQ,EAAOgB,GAClBkQ,IAGAlR,EAAM0M,OACR1M,EAAMyM,OAASzM,EAAM0M,MACrB1M,EAAMyM,OAAOwB,MAAO,EACpBjO,EAAMyM,OAAOA,QAAS,EACtBtO,KAAKkT,SAASrR,EAAM0M,OACpB1M,EAAMyM,OAAO6E,eAAe7G,MAC1BwD,MAAM,EACNvD,UAAW,YACX1K,QACAmR,YACAC,YACAvJ,OAAQ7H,EAAMyM,OACdtL,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAMzB,KAGXJ,KAAKkT,SAAS,MAEhBlT,KAAKmT,eAAe7G,MAClBwD,MAAM,EACNvD,UAAW,YACX1K,QACAmR,YACAC,YACAvJ,OAAQ7H,EAAMyM,OACdtL,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAMzB,IAEXyB,EAAMkO,WAAY,IAGbqB,oBAAP,SAAevP,EAA0BgB,GACvC,IAAMmQ,EAAYnR,EAAM1B,EAClB8S,EAAYpR,EAAMzB,EACpBsJ,EAAkB,KACtB1J,KAAKiS,UAAUpQ,EAAOgB,GACjBhB,EAAMiO,OAGXjO,EAAMiO,MAAO,EACTjO,EAAMyM,SACRzM,EAAMyM,OAAOwB,MAAO,EACpBjO,EAAMyM,OAAOA,QAAS,EACtBzM,EAAMyM,OAAO8E,aAAa9G,MACxBwD,MAAM,EACNvD,UAAW,UACX1K,QACAmR,YACAC,YACAvJ,OAAQ7H,EAAMyM,OACdtL,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAM1B,IAGP0B,EAAM0M,QAAU1M,EAAMyM,SACxBzM,EAAMyM,OAAOc,WAAWvN,GACxBA,EAAMyM,OAAO+E,gBAAgB/G,MAC3BwD,MAAM,EACNvD,UAAW,aACX1K,QACAmR,YACAC,YACAvJ,OAAQ7H,EAAMyM,OACdtL,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAM1B,KAGbuJ,EAAS7H,EAAMyM,OACfzM,EAAMyM,OAAS,MAGjBtO,KAAKoT,aAAa9G,MAChBwD,MAAM,EACNvD,UAAW,UACX1K,QACAmR,YACAC,YACAvJ,OAAQA,GAAU1J,KAClBgD,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAM1B,MAINiR,sBAAP,SAAiBvP,EAA0BgB,GACzC,IAkBID,EACA0Q,EAnBE1J,EAAMyD,KAAKzD,MACX2J,EAAOvT,KAAKmE,OAAOqP,wBACnBR,EAAYnR,EAAM1B,EAClB8S,EAAYpR,EAAMzB,EACxByB,EAAM1B,EAAI0C,EAAS8O,QAAU4B,EAAK7L,KAClC7F,EAAMzB,EAAIyC,EAAS+O,QAAU2B,EAAKtH,IAE9BpK,EAAM0M,QACR1M,EAAM0M,MAAMA,OAAQ,EACpB1M,EAAM0M,MAAQ,MAKhBvO,KAAKyP,QAAQgE,KAAKC,GAMlB,IAAK,IAAIrI,EAAIrL,KAAKyP,QAAQrF,OAAS,EAAGiB,GAAK,EAAGA,IAI5C,GAFAiI,GADA1Q,EAAS5C,KAAKyP,QAAQpE,IACEsI,WAAW9R,EAAO+H,GAEtB,CAClB0J,EAAe/E,OAAQ,EACvB1M,EAAM0M,MAAQ+E,EACdA,EAAeM,eAAe/R,GAC9ByR,EAAeO,eAAevH,MAC5BwD,KAAMjO,EAAMiO,KACZvD,UAAW,YACX1K,QACAmR,YACAC,YACAvJ,OAAQ9G,EACRI,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAMzB,IAEX,MAGJJ,KAAK6T,eAAevH,MAClBwD,KAAMjO,EAAMiO,KACZvD,UAAW,YACX1K,QACAmR,YACAC,YACAvJ,OAAQ9G,EACRI,MAAOhD,KACPG,EAAG0B,EAAM1B,EACTC,EAAGyB,EAAMzB,KAINgR,wBAAP,SAAmBvP,EAA0BgB,GACvChB,EAAMyM,SACRzM,EAAMyM,OAAOA,QAAS,EACtBzM,EAAMyM,OAAS,MAEbzM,EAAM0M,QACR1M,EAAM0M,MAAMA,OAAQ,EACpB1M,EAAM0M,MAAQ,OAIX6C,mCAAP,SAA8BlI,EAAYuB,GAgBxC,OAdE6D,OAAQ,KACRsB,UAAU,EACVC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXxB,MAAO,KACPrF,KACAhH,GAAI,EACJC,GAAI,EACJsI,OACAtK,EAAG,EACHC,EAAG,IAMAgR,0BAAP,SAAqBc,GACnB,IAAMrQ,EAAQ7B,KAAK0S,uBAAuBR,EAAMM,WAAWG,WAAY,SAGvE,OAFA3S,KAAKkR,SAASrP,GACd7B,KAAKuS,gBAAgBL,EAAMM,YAAc3Q,EAClCA,GAGFuP,6BAAP,SAAwBc,GACtB,IAAMrQ,EAA2B7B,KAAKuS,gBAAgBL,EAAMM,mBACrDxS,KAAKuS,gBAAgBL,EAAMM,YAClCxS,KAAK8T,YAAYjS,IAGZuP,uBAAP,SAAkBxH,WACZ/H,EAEJ7B,KAAKyP,QAAQgE,KAAKC,OAElB,IAAc,IAAA5K,EAAAhD,EAAA9F,KAAK2P,sCAAQ,EAAtB9N,WACO0M,QACR1M,EAAM0M,MAAMA,OAAQ,EACpB1M,EAAM0M,MAAQ,MAKhB,IAAI+E,SACJ,GAAIzR,EAAMyM,SACRgF,EAAiBzR,EAAMyM,OAAOqF,WAAW9R,EAAO+H,IAE9C0J,EAAeM,eAAe/R,GAC9BA,EAAM0M,MAAQ+E,EACdA,EAAe/E,OAAQ,OAK3B,IAAK,IAAIlD,EAAIrL,KAAKyP,QAAQrF,OAAS,EAAGiB,GAAK,EAAGA,IAG5C,GADAiI,EADStT,KAAKyP,QAAQpE,GACEsI,WAAW9R,EAAO+H,GACtB,CAClB0J,EAAeM,eAAe/R,GAC9BA,EAAM0M,MAAQ+E,EACdA,EAAe/E,OAAQ,EACvB,2GAMD6C,kBAAP,SAAaxQ,GACXZ,KAAK+T,SAASnT,EAAEoT,MAAO,EACvB,IAAMC,EAAyBjU,KAAKkU,mBAChCD,GACFA,EAActD,OACZwD,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,QACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,EACRjR,MAAOhD,OAGXA,KAAK6M,WAAWP,MACd6H,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,QACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,GAAiBjU,KACzBgD,MAAOhD,QAIJoR,oBAAP,SAAexQ,GACbZ,KAAK+T,SAASnT,EAAEoT,MAAO,EACT,WAAVpT,EAAEoT,MACJhU,KAAKyU,YAAczU,KAAKyU,YAE1B,IAAMR,EAAyBjU,KAAKkU,mBAChCD,GACFA,EAAcxD,SACZ0D,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,UACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,EACRjR,MAAOhD,OAGXA,KAAK4M,aAAaN,MAChB6H,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,UACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,GAAiBjU,KACzBgD,MAAOhD,QAIJoR,qBAAP,SAAgBxQ,GACd,IAAMqT,EAAyBjU,KAAKkU,mBAChCD,GACFA,EAAcvD,UACZyD,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,WACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,EACRjR,MAAOhD,OAGXA,KAAK8M,cAAcR,MACjB6H,IAAKvT,EAAEwT,OACPC,KAAMzT,EAAE0T,QACRxE,MAAM,EACNvD,UAAW,WACXyH,IAAKpT,EAAEoT,IACPO,MAAO3T,EAAE4T,SACT9K,OAAQuK,GAAiBjU,KACzBgD,MAAOhD,QAIJoR,qBAAP,SAAgBxP,eACd,IAAqB,IAAAkH,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UAET,GADAA,EAAOuH,QAAUvH,IAAWhB,EACxBgB,EAAO6H,OAASjD,EAAWkN,MACf9R,EACR+R,MAAM/S,uGAKXwP,6BAAP,uBACE,IAAqB,IAAAtI,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IACGvE,UAAoB0J,YAC1B,GAAI1J,EACF,OAAOA,yGA/iByBsE,IC5ElCqF,GAAUjE,SAASC,cAAc,UAAUG,WAAW,qBAW1D,WAAYjQ,GAAZ,MACEyM,YAAMzM,gBATQoH,OAAmBX,EAAWsN,MACvC3M,OAAe,GACfA,OAAe,YACfA,WAAmB,GACnBA,YAAoB,QACpBA,YAAuBf,EAAU2D,MACjC5C,eAA6Bd,EAAa0N,QAI/C5M,EAAK8F,KAAOlN,EAAMkN,MAAQ9F,EAAK8F,KAC/B9F,EAAK2F,KAAO/M,EAAM+M,MAAQ3F,EAAK2F,KAC/B3F,EAAK6F,SAAWjN,EAAMiN,UAAY7F,EAAK6F,SACvC7F,EAAK4F,UAAYhN,EAAMgN,WAAa5F,EAAK4F,UACzC5F,EAAKgG,aAAepN,EAAMoN,cAAgBhG,EAAKgG,aAC/ChG,EAAK+F,UAAYnN,EAAMmN,WAAa/F,EAAK+F,YAqB7C,OArC2BE,OAmBlB0G,mBAAP,WACE9U,KAAKqE,OAASrE,KAAKgO,SACnB6G,GAAQ/G,KAAU9N,KAAKgO,eAAchO,KAAK8N,KAC1C9N,KAAKoE,MAAQyQ,GAAQG,YAAYhV,KAAKiO,MAAM7J,OAGvC0Q,mBAAP,SAAcpI,GACZA,EAAIyB,aAAenO,KAAKmO,aACxBzB,EAAIwB,UAAYlO,KAAKkO,UACrBxB,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtCpB,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAAS3O,KAAKiO,KAAM,EAAG,IAGtB6G,oBAAP,SAAe7G,GAEb,OADAjO,KAAKiO,KAAOA,EACLjO,SAnCgBgJ,ICpBrBiM,GAAQ,SAAC1U,EAAYC,GAAuB,OAAAD,EAAEqH,EAAIpH,EAAEoH,GACpDsN,GAAStE,SAASC,cAAc,UAAUG,WAAW,qBA8BzD,WAAYjQ,GAAZ,MACEyM,YAAMzM,gBAfQoH,OAAmBX,EAAWkN,MACvCvM,WACLgN,OAAQ,EACRzN,KAAM,EACNC,MAAO,EACPsE,IAAK,GAEC9D,aACAA,sBAAqC,KACrCA,mBAAkC,KAClCA,oBAAmC,KACnCA,qBAAoC,KACpCA,sBAAqC,KAI3CA,EAAK/D,MAAQrD,EAAMqD,MACnB+D,EAAK9D,OAAStD,EAAMsD,OACpB8D,EAAK6D,QAAUjL,EAAMiL,SAAW7D,EAAK6D,UA+NzC,OAlP2BoC,OAsBlBsG,sBAAP,SAAiB9R,GAGf,OAFAA,EAAOoH,OAAShK,KAChBA,KAAKyP,QAAQxH,KAAKrF,GACX5C,MAGF0U,wBAAP,SAAmB9K,WACjB,KAAIA,GAAO5J,KAAKwL,kBAAhB,CAGAgC,YAAM3D,sBAAYD,OAClB,IAAqB,IAAAd,EAAAhD,EAAA9F,KAAKyP,uCAAS,SAC1B5F,YAAYD,wGAIhB8K,uBAAP,SAAkB7S,EAA0B+H,WAUtCwL,EATEzB,EAAanG,YAAMmG,qBAAW9R,EAAO+H,GAC3C,IAAK+J,EACH,OAAO,KAET3T,KAAKyP,QAAQgE,KAAKwB,QAClB,IAAqB,IAAAnM,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UACTA,EAAOkN,MAAO,EACdlN,EAAO2L,OAAQ,oGAGjB,IAAK,IAAIlD,EAAIrL,KAAKyP,QAAQrF,OAAS,EAAGiB,GAAK,EAAGA,IAE5C,GADA+J,EAAWpV,KAAKyP,QAAQpE,GAAGsI,WAAW9R,EAAO+H,GAE3C,OAAOwL,EAGX,OAAOzB,GAGFe,wBAAP,SAAmB7S,GACjB,GACEA,EAAMK,IAAMlC,KAAKgM,QAAQtE,MACtB7F,EAAMK,IAAOlC,KAAKoE,MAAQpE,KAAKgM,QAAQrE,OACvC9F,EAAMM,IAAMnC,KAAKgM,QAAQC,KACzBpK,EAAMM,IAAOnC,KAAKqE,OAASrE,KAAKgM,QAAQmJ,OAE3C,OAAOnV,MAIJ0U,yBAAP,SAAoB9R,GAMlB,OALI5C,KAAKyP,QAAQrH,SAASxF,KACxB5C,KAAKyP,QAAQpH,OAAOrI,KAAKyP,QAAQnH,QAAQ1F,GAAS,GAClDA,EAAOoH,OAAS,MAGXhK,MAGF0U,mBAAP,mBACE1U,KAAKuO,OAAQ,GACRvO,KAAKqV,qBAAuBrV,KAAKwF,SAAS8P,gBAC7CtV,KAAKqV,oBAAsBH,GAAOK,cAAcvV,KAAKwF,SAAS8P,cAAsB,cAEjFtV,KAAKwV,kBAAoBxV,KAAKwF,SAASiQ,aAC1CzV,KAAKwV,iBAAmBN,GAAOK,cAAcvV,KAAKwF,SAASiQ,WAAmB,cAE3EzV,KAAK0V,mBAAqB1V,KAAKwF,SAASmQ,cAC3C3V,KAAK0V,kBAAoBR,GAAOK,cAAcvV,KAAKwF,SAASmQ,YAAoB,cAE7E3V,KAAK4V,oBAAsB5V,KAAKwF,SAASqQ,eAC5C7V,KAAK4V,mBAAqBV,GAAOK,cAAcvV,KAAKwF,SAASqQ,aAAqB,cAE/E7V,KAAK8V,qBAAuB9V,KAAKwF,SAASuQ,gBAC7C/V,KAAK8V,oBAAsBZ,GAAOK,cAAcvV,KAAKwF,SAASuQ,cAAsB,WAGpF/V,KAAKwF,SAASwQ,UACXhW,KAAKwF,SAASyQ,WACdjW,KAAKwF,SAAS0Q,aACdlW,KAAKwF,SAAS2Q,eAEjBnW,KAAKoE,MAAQlG,KAAKwN,IAChB1L,KAAKoE,MACLpE,KAAKwF,SAAS0Q,YAAY9R,MAAQpE,KAAKwF,SAAS2Q,aAAa/R,MAC7DpE,KAAKwF,SAASwQ,SAAS5R,MAAQpE,KAAKwF,SAASyQ,UAAU7R,OAEzDpE,KAAKqE,OAASnG,KAAKwN,IACjB1L,KAAKqE,OACLrE,KAAKwF,SAAS0Q,YAAY9R,MAAQpE,KAAKwF,SAASwQ,SAAS5R,MACzDpE,KAAKwF,SAAS2Q,aAAa/R,MAAQpE,KAAKwF,SAASyQ,UAAU7R,YAG/D,IAAqB,IAAA0E,EAAAhD,EAAA9F,KAAKyP,uCAAS,SAC1BjB,6GAIJkG,mBAAP,SAAchI,WA2BZ,GA1BI1M,KAAKwF,SAASwQ,UAChBtJ,EAAIC,UAAU3M,KAAKwF,SAASwQ,SAAU,EAAG,GAEvChW,KAAKwF,SAASyQ,WAChBvJ,EAAIC,UAAU3M,KAAKwF,SAASyQ,UAAWjW,KAAKoE,MAAQpE,KAAKwF,SAASyQ,UAAU7R,MAAO,GAEjFpE,KAAKwF,SAAS0Q,aAChBxJ,EAAIC,UAAU3M,KAAKwF,SAAS0Q,YAAa,EAAGlW,KAAKqE,OAASrE,KAAKwF,SAAS0Q,YAAY9R,OAElFpE,KAAKwF,SAAS2Q,cAChBzJ,EAAIC,UACF3M,KAAKwF,SAAS2Q,aACdnW,KAAKoE,MAAQpE,KAAKwF,SAAS2Q,aAAa/R,MACxCpE,KAAKqE,OAASrE,KAAKwF,SAAS2Q,aAAa9R,QAGzCrE,KAAKwV,mBACP9I,EAAI0J,YACJ1J,EAAIgC,UAAY1O,KAAKwV,iBACrB9I,EAAI2J,SACFrW,KAAKwF,SAASwQ,SAAS5R,MACvB,EACApE,KAAKoE,MAAQpE,KAAKwF,SAASwQ,SAAS5R,MAAQpE,KAAKwF,SAASyQ,UAAU7R,MACpEpE,KAAKwF,SAASiQ,WAAWpR,SAGzBrE,KAAKqV,oBAAqB,CAC5B,IAAMiB,EAAgBtW,KAAKqE,OAASrE,KAAKwF,SAAS8P,cAAcjR,OAChEqI,EAAI0J,YACJ1J,EAAIgC,UAAY1O,KAAKqV,oBACrB3I,EAAIxI,UAAU,EAAGoS,GACjB5J,EAAI2J,SACFrW,KAAKwF,SAAS0Q,YAAY9R,MAC1B,EACApE,KAAKoE,MAAQpE,KAAKwF,SAAS0Q,YAAY9R,MAAQpE,KAAKwF,SAAS2Q,aAAa/R,MAC1EpE,KAAKwF,SAAS8P,cAAcjR,QAE9BqI,EAAIxI,UAAU,GAAIoS,GAYpB,GAVItW,KAAK0V,oBACPhJ,EAAI0J,YACJ1J,EAAIgC,UAAY1O,KAAK0V,kBACrBhJ,EAAI2J,SACF,EACArW,KAAKwF,SAASwQ,SAAS3R,OACvBrE,KAAKwF,SAASmQ,YAAYvR,MAC1BpE,KAAKqE,OAASrE,KAAKwF,SAASwQ,SAAS3R,OAASrE,KAAKwF,SAAS0Q,YAAY7R,SAGxErE,KAAK4V,mBAAoB,CAC3B,IAAMW,EAAevW,KAAKoE,MAAQpE,KAAKwF,SAASyQ,UAAU7R,MAC1DsI,EAAI0J,YACJ1J,EAAIgC,UAAY1O,KAAK4V,mBACrBlJ,EAAIxI,UAAUqS,EAAc,GAC5B7J,EAAI2J,SACF,EACArW,KAAKwF,SAASyQ,UAAU5R,OACxBrE,KAAKwF,SAASqQ,aAAazR,MAC3BpE,KAAKqE,OAASrE,KAAKwF,SAASyQ,UAAU5R,OAASrE,KAAKwF,SAAS2Q,aAAa9R,QAE5EqI,EAAIxI,WAAWqS,EAAc,GAE3BvW,KAAK8V,sBACPpJ,EAAI0J,YACJ1J,EAAIgC,UAAY1O,KAAK8V,oBACrBpJ,EAAI2J,SACFrW,KAAKwF,SAASwQ,SAAS5R,MACvBpE,KAAKwF,SAASyQ,UAAU5R,OACxBrE,KAAKoE,MAAQpE,KAAKwF,SAAS2Q,aAAa/R,MAAQpE,KAAKwF,SAAS0Q,YAAY9R,MAC1EpE,KAAKqE,OAASrE,KAAKwF,SAASyQ,UAAU5R,OAASrE,KAAKwF,SAAS2Q,aAAa9R,SAI9EqI,EAAI0J,YACJ1J,EAAI6G,KACFvT,KAAKgM,QAAQtE,KACb1H,KAAKgM,QAAQC,IACbjM,KAAKoE,MAAQpE,KAAKgM,QAAQtE,KAAO1H,KAAKgM,QAAQrE,MAC9C3H,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QAEhDzI,EAAI8J,OACJ9J,EAAIxI,UAAUlE,KAAKgM,QAAQtE,KAAM1H,KAAKgM,QAAQC,SAC9C,IAAqB,IAAAnD,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UACT8J,EAAI+J,OACJ/J,EAAIR,UACFtJ,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,IAE9BqD,EAAIgK,aAAe9T,EAAO4G,kBAC1B5G,EAAO6L,OAAO/B,GACdA,EAAIiK,8GAIDjC,kBAAP,SAAa9S,eACX,IAAqB,IAAAkH,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UAET,GADAA,EAAOuH,QAAUvH,IAAWhB,EACxBgB,EAAO6H,OAASjD,EAAWkN,MACf9R,EACR+R,MAAM/S,uGAKX8S,sBAAP,uBACE,IAAqB,IAAA5L,EAAAhD,EAAA9F,KAAKyP,uCAAS,CAA9B,IAAM7M,UACT,GAAIA,EAAOgS,YACT,OAAOhS,oGAGX,OAAO4K,YAAMoH,sBAGRF,0BAAP,SAAqB9K,WACf/E,EAAkB2I,YAAMoJ,wBAAchN,OAC1C,IAAqB,IAAAd,EAAAhD,EAAA9F,KAAKyP,uCAAS,CACjC5K,UAAgB+R,cAAchN,IAAQ/E,oGAExC,OAAOA,MAhPgBmE,kBCiBzB,WAAYjI,GAtBLf,QAAa,GAEbA,aAAkB,EAClBA,YAAiB,EACjBA,WAAgB,EAChBA,SAAc,EACdA,WAAc,EACdA,WAAmBsH,EAAUuP,QAgBlC7W,KAAKkJ,GAAKnI,EAAMmI,GAEhBlJ,KAAK8W,QAAU/V,EAAM+V,QACrB9W,KAAK4E,WAAa7D,EAAM6D,WACxB5E,KAAK+K,MAAQ/K,KAAK4E,WAAWmS,UAAUhW,EAAMoL,SAASpB,MACtD/K,KAAK8K,IAAM9K,KAAK4E,WAAWmS,UAAUhW,EAAMoL,SAASrB,IACpD9K,KAAKoK,OAASpK,KAAK8K,IAAM9K,KAAK+K,MAC9B/K,KAAKgX,KAAOjW,EAAM+V,QAAQG,aAC1BjX,KAAKkX,OAASlX,KAAKmX,aAAapW,EAAM2I,OAAQ3I,EAAM+V,SACpD9W,KAAKoX,YAAcrW,EAAM+V,QAAQM,YAgErC,OA5DSC,iBAAP,WAAA,WAEE,OADArX,KAAKkX,OAAOI,KAAK,SAAA1W,GAAK,OAAAuH,EAAKoP,uBACpBvX,MAIFqX,iBAAP,WACE,OAAOrX,MAEFqX,kBAAP,WACE,OAAOrX,MAKFqX,sBAAP,SAAiBG,GACf,GAAIA,EAAS,GAAKA,EAAS,EACzB,MAAM,IAAIzU,MAAM,qDAAqDyU,OAGvE,OADAxX,KAAKgX,KAAKA,KAAK/W,MAAQuX,EAChBxX,MASKqX,yBAAd,SAA2BI,EAAwBX,mGAC1B,SAAMW,UACd,SADQ3O,SACG4O,sBACZ,OADRC,EAAS7O,SACfrE,EAAAzE,QAAoB8W,EAAQc,gBAAgBD,kBAA5ClT,EAAKiF,OAASZ,mBAYRuO,+BAAR,WACE,IAAMQ,EAAO7X,KAAK8W,QAAQgB,qBAC1BD,EAAKF,OAAS3X,KAAK0J,OACnBmO,EAAKE,KAAO/X,KAAK+X,KAEjBF,EAAKG,QAAQhY,KAAKgX,MAGlBa,EAAK9M,MAAM,EAAG/K,KAAK+K,MAAO/K,KAAKoK,QAE/B,IAAM4M,EAAOhX,KAAKgX,KAClBa,EAAKvG,iBAAiB,QAAS,WAAkB1Q,GAC/CiX,EAAKI,WAAWjB,GAChBa,EAAKrG,oBAAoB,QAASxJ,WC9FlC6M,GAAUjE,SAASC,cAAc,UAAUG,WAAW,qBAuB1D,WAAYjQ,GAAZ,MACEyM,YAAMzM,gBAdQoH,OAAmBX,EAAW0Q,OACvC/P,QAAgB,EAChBA,MAAc,EACdA,MAAc,EACdA,QAAgB,IAChBA,SAAiB,EACjBA,oBAA4B,EAC5BA,mBAA4D,IAAIL,GAChEK,SAAiBZ,EAAOqG,QAEvBzF,gBAA+B,KAC/BA,cAA2B,KAKjCA,EAAK/D,MAAQrD,EAAMqD,MACnB+D,EAAKuD,IAAM3K,EAAM2K,KAAOvD,EAAKuD,IAC7BvD,EAAKgQ,IAAMpX,EAAMoX,KAAOhQ,EAAKgQ,IAC7BhQ,EAAKlI,MAAQc,EAAMd,OAASkI,EAAKlI,QA4FrC,OAhH4BmO,OAuBnB8J,uBAAP,SAAkBrW,GAChB,QAAI7B,KAAKsO,QAGFd,YAAMvD,qBAAWpI,IAGnBqW,wBAAP,SAAmBrW,GACjB,OAAI7B,KAAKsO,QAAUzM,EAAMkO,UAChB/P,KAGLA,KAAKoY,YAAYvW,GACZ7B,UADT,GAKKkY,wBAAP,SAAmBrW,GAIjB,IAEMwW,GAFiBrY,KAAKoE,MAAQpE,KAAKwF,SAAS8S,WAAWlU,SACjCpE,KAAKC,MAAQD,KAAKmY,MAAQnY,KAAK0L,IAAM1L,KAAKmY,MAEtE,OAAOtW,EAAMM,IAAMnC,KAAKwF,SAAS8S,WAAWjU,QACvCxC,EAAMM,IAAM,GACZN,EAAMK,IAAMmW,GACZxW,EAAMK,IAAMmW,EAASrY,KAAKwF,SAAS8S,WAAWlU,OAG9C8T,2BAAP,SAAsBrW,GAGpB,GAFA2L,YAAMoG,yBAAe/R,GAEjB7B,KAAKsO,QAAUzM,EAAMyM,SAAWtO,KAAM,CACxC,IAAMwM,EAAgBxM,KAAKC,MACrBsY,EAAiBvY,KAAKoE,MAAQpE,KAAKwF,SAAS8S,WAAWlU,MAEvDoU,EAAYta,KAAKwN,IAAI,EAAGxN,KAAKia,IADpBtW,EAAMK,GAAsC,GAAjClC,KAAKwF,SAAS8S,WAAWlU,MACJmU,IAG/CvY,KAAKC,MAAQD,KAAKmY,KAFJnY,KAAK0L,IAAM1L,KAAKmY,KAEEK,EAAYD,EACxCvY,KAAKC,QAAUuM,GACjBxM,KAAKyY,iBAAiBnM,MACpBC,UAAW,cACXC,gBACAC,SAAU,QACV/C,OAAQ1J,KACRgD,MAAOhD,KAAK8C,UACZ7C,MAAOD,KAAKC,QAKlB,OAAO,GAGFiY,mBAAP,WACMlY,KAAKwF,SAAS8S,aAChBtY,KAAKqE,OAASrE,KAAKwF,SAAS8S,WAAWjU,SAEpCrE,KAAK0Y,eAAiB1Y,KAAKwF,SAASmT,OAEvC3Y,KAAK0Y,cAAgB7D,GAAQU,cAAcvV,KAAKwF,SAASmT,KAAa,aAExE3Y,KAAK4Y,YAAc5Y,KAAKsO,OACpBtO,KAAKwF,SAASqT,YACb7Y,KAAKuO,MAAQvO,KAAKwF,SAAS8S,WAAatY,KAAKwF,SAASsT,MAGtDZ,mBAAP,SAAcxL,GACZA,EAAIC,UAAU3M,KAAKwF,SAASuT,cAAe,EAAG,GAC9CrM,EAAIC,UACF3M,KAAKwF,SAASwT,eACdhZ,KAAKoE,MAAQpE,KAAKwF,SAASwT,eAAe5U,MAC1C,GAEFsI,EAAIgC,UAAY1O,KAAK0Y,cACrBhM,EAAI2J,SACFrW,KAAKwF,SAASuT,cAAc3U,MAC5B,EACApE,KAAKoE,MAAQpE,KAAKwF,SAASuT,cAAc3U,MAAQpE,KAAKwF,SAASwT,eAAe5U,MAC9EpE,KAAKwF,SAASmT,KAAKtU,QAMrBqI,EAAIC,UAAU3M,KAAK4Y,aAJI5Y,KAAKoE,MAAQpE,KAAKwF,SAAS8S,WAAWlU,SACjCpE,KAAKC,MAAQD,KAAKmY,MAAQnY,KAAK0L,IAAM1L,KAAKmY,MAG9B,OA9GhBnP,mBCkB1B,WAAYjI,GAAZ,MACEyM,YAAMzM,gBAVDoH,uBAA4D,IAAIL,GAChEK,sBAA0D,IAAIL,GAC9DK,qBAAwD,IAAIL,GAC5DK,sBAA0D,IAAIL,GAC9DK,iBAAgD,IAAIL,GACpDK,kBAAkD,IAAIL,GACtDK,iBAAgD,IAAIL,GACpDK,kBAAkD,IAAIL,KAyG/D,OAjH2BsG,OAalB6K,mBAAP,uBACQrP,EAAMyD,KAAKzD,MAGjB5J,KAAKkZ,oBAAoB5M,MACvBC,UAAW,iBACX7C,OAAQ1J,KACRgD,MAAOhD,WAET,IAAe,IAAAkN,EAAApH,EAAA9F,KAAKyP,+CACX5F,YAAYD,oGAErB5J,KAAKmZ,qBAAqB7M,MACxBC,UAAW,kBACX7C,OAAQ1J,KACRgD,MAAOhD,OAGTA,KAAKoZ,mBAAmB9M,MACtBC,UAAW,gBACX7C,OAAQ1J,KACRgD,MAAOhD,OAETA,KAAKqZ,WAAWzP,GAChB5J,KAAKsZ,oBAAoBhN,MACvBC,UAAW,iBACX7C,OAAQ1J,KACRgD,MAAOhD,OAGTA,KAAKuZ,eAAejN,MAClBC,UAAW,YACX7C,OAAQ1J,KACRgD,MAAOhD,WAGT,IAAe,IAAA+F,EAAAD,EAAA9F,KAAKyP,+CACXjB,0GAST,OANAxO,KAAKwZ,gBAAgBlN,MACnBC,UAAW,aACX7C,OAAQ1J,KACRgD,MAAOhD,OAGFA,MAGFiZ,mBAAP,uBAOMrW,EANJ5C,KAAKyZ,eAAenN,MAClBC,UAAW,YACX7C,OAAQ1J,KACRgD,MAAOhD,OAIT,IAAM0M,EAAM1M,KAAK0M,IAEjBA,EAAIgN,UAAU,EAAG,EAAG1Z,KAAKmE,OAAOC,MAAOpE,KAAKmE,OAAOE,YAEnD,IAAe,IAAA6I,EAAApH,EAAA9F,KAAKyP,uCAAf7M,UACH8J,EAAI+J,OACJ/J,EAAIiN,aACF/W,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,GAC5BzG,EAAOyG,qBAAqB,IAE9BqD,EAAIgK,YAAc9T,EAAO4G,kBACzB5G,EAAO6L,OAAO/B,GACdA,EAAIiK,2GAEN3W,KAAKmE,OAAOyV,MAAMtK,OAAS/H,EAAO0B,SAClC,IAAoB,IAAAlD,EAAAD,EAAA9F,KAAK2P,sCAAQ,CAA5B,IAAM9N,UACLA,EAAM0M,QACRvO,KAAKmE,OAAOyV,MAAMtK,OAASzN,EAAM0M,MAAMe,0GAS3C,OALAtP,KAAK6Z,gBAAgBvN,MACnBC,UAAW,aACX7C,OAAQ1J,KACRgD,MAAOhD,OAEFA,MAGFiZ,2BAAP,mBACQrP,EAAMyD,KAAKzD,MACb/E,GAAS,MACb,IAAqB,IAAAiE,EAAAhD,EAAA9F,KAAKyP,uCAAS,SACtBmH,cAAchN,KACvB/E,GAAS,qGAGb,OAAOA,MA/GgBuM,IC3BrByD,GAAUjE,SAASC,cAAc,UAAUG,WAAW,qBAoD1D,WAAYjQ,GAAZ,MACEyM,YAAMzM,gBApBQoH,OAAmBX,EAAWsS,QAEvC3R,OAAe,GACfA,YAAoB,EACpBA,YAAoB,EACpBA,WACLgN,OAAQ,EACRzN,KAAM,EACNC,MAAO,EACPsE,IAAK,GAEA9D,WAAmB,GACnBA,OAAe,YACfA,YAAoB,QACpBA,aAAqB,GACrBA,YAAuBf,EAAUM,KACjCS,eAA6Bd,EAAa0N,QACzC5M,oBAA8B,IAIpCA,EAAK8F,KAAOlN,EAAMkN,MAAQ9F,EAAK8F,KAC/B9F,EAAK4R,UAAYhZ,EAAMgZ,WAAa5R,EAAK4R,UACrChZ,EAAMuI,eAAe,eACvBnB,EAAK6R,UAAYjZ,EAAMiZ,WAEzB7R,EAAK6D,QAAUjL,EAAMiL,SAAW7D,EAAK6D,QACrC7D,EAAK6F,SAAWjN,EAAMiN,UAAY7F,EAAK6F,SACvC7F,EAAK2F,KAAO/M,EAAM+M,MAAQ3F,EAAK2F,KAC/B3F,EAAK4F,UAAYhN,EAAMgN,WAAa5F,EAAK4F,UACzC5F,EAAK8R,WAAalZ,EAAMkZ,YAAc9R,EAAK8R,WAE3C9R,EAAKkG,WAAW,aA6GpB,OA/I6BD,OAqCpB0L,mBAAP,mBACQI,EAAWla,KAAKwF,SAASxF,KAAKmM,SAAS/H,MAAQpE,KAAKgM,QAAQtE,KAAO1H,KAAKgM,QAAQrE,MACtF3H,KAAKga,UAAY9b,KAAKia,IAAInY,KAAKiO,KAAK7D,OAAQpK,KAAKga,UAAYha,KAAK+Z,WAClE,IAAMI,EAAQna,KAAKiO,KAAKmM,MAAMN,EAAQO,OACtCra,KAAKsa,kBAAoB,IACzB,IAAMC,GAAYva,KAAKwF,SAASxF,KAAKmM,SAAS9H,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QAAUnV,KAAKia,WAClGO,EAAe,GACfC,EAAoB,EAEpBC,EAAmB1a,KAAKga,UAC5BnF,GAAQ/G,KAAU9N,KAAKgO,eAAchO,KAAK8N,SAE1C,IAAmB,IAAA6M,EAAA7U,EAAAqU,iCAAO,CAArB,IAAMS,UAGT,GAAa,OAATA,GAA0B,SAATA,GAA4B,OAATA,EAAxC,CAUA,GAHAJ,EAAOxa,KAAKsa,iBAAiBG,GAGZ,IAAbC,EACF,MAIF,GAAKD,EAAY,EAAKF,EACpB,MAiBF,GAZc1F,GAAQG,YADtBwF,GAAQI,GAIQxW,MAAQ8V,IACtBO,EAAYza,KAAKsa,iBAAiBrS,KAAK,IAAM,GAG/CjI,KAAKsa,iBAAiBG,IAAcG,GAGpCF,GAAYE,EAAKxQ,QAEF,EAAG,CAChBpK,KAAKsa,iBAAiBG,GAAaza,KAAKsa,iBAAiBG,GAAW1R,MAAM,EAAG2R,GAC7E,YAlCA1a,KAAKsa,iBAAiBrS,KAAK,IAC3ByS,GAAYE,EAAKxQ,OACjBqQ,GAAa,sGAsCZX,mBAAP,SAAcpN,WACZc,YAAMiB,iBAAO/B,GACb,IAAMmO,EAAY7a,KAAKwF,SAASxF,KAAKmM,SAAS9H,OAASrE,KAAKgM,QAAQC,IAChE6O,EAAgB9a,KAAKgM,QAAQC,IAEjCS,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtCpB,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIwB,UAAYlO,KAAKkO,UACrBxB,EAAIyB,aAAenO,KAAKmO,aAExBzB,EAAI0J,YACJ1J,EAAI6G,KACFvT,KAAKgM,QAAQtE,KACb1H,KAAKgM,QAAQmJ,OACbnV,KAAKoE,MAAQpE,KAAKgM,QAAQrE,MAC1B3H,KAAKqE,OAASrE,KAAKgM,QAAQC,KAE7BS,EAAI8J,WACJ,IAAmB,IAAA1N,EAAAhD,EAAA9F,KAAKsa,gDAAkB,CACxC,GAAIQ,EAAgB9a,KAAKgO,SAAW6M,EAClC,MAGFnO,EAAIiC,iBAAe3O,KAAKgM,QAAQtE,KAAMoT,GACtCA,GAAiB9a,KAAKia,+GAInBH,oBAAP,SAAe7L,GACb,OAAIA,EAAK8M,WAAW/a,KAAKiO,OACvBjO,KAAKiO,KAAOA,EACLjO,OAGTA,KAAKiO,KAAOA,EACZjO,KAAKsa,kBAAoB,IACzBta,KAAKga,UAAY,EACVha,OAGF8Z,uBAAP,SAAkB7L,GAEhB,OADAjO,KAAKiO,MAAQA,EACNjO,MAGF8Z,0BAAP,SAAqBlQ,GACnB,IAAM/E,EAAkB2I,YAAMoJ,wBAAchN,IAAQ5J,KAAKga,UAAYha,KAAKiO,KAAK7D,OAE/E,OADApK,KAAKga,UAAYha,KAAKiO,KAAK7D,OACpBvF,GA5IMiV,QAAgB,+BADJ9Q,Id7BvBgS,GAAuB,iBACjBnT,GACVA,6BACAA,sBAFUA,IAAAA,OAmCZ,IAAMgN,GAAUjE,SAASC,cAAc,UAAUG,WAAW,qBA6B1D,WAAYjQ,GAAZ,MACEyM,YAAMzM,gBA3BQoH,OAAmBX,EAAWyT,UACvC9S,UACAA,OAAe,YACfA,WAAmB,GACnBA,YAAoB,QACpBA,oBAAoB,QACpBA,8BAA8B,OAC9BA,aAAqB,EACrBA,SAAiB,EACjBA,aAAqB,EACrBA,iBAAiCN,EAAeqT,MAChD/S,WACLgN,OAAQ,EACRzN,KAAM,EACNC,MAAO,EACPsE,IAAK,GAEA9D,gBAAwB,EACxBA,kBAA0B,EAC1BA,aAAqB,EACrBA,SAAiBZ,EAAO0G,KACxB9F,oBAA4B,EAC5BA,aAAqB,EACpBA,oBAAmC,KACnCA,sBAAqC,KAI3CA,EAAK8F,KAAOlN,EAAMkN,KAAOlN,EAAMkN,KAAKkN,MAAM,IAAMhT,EAAK8F,KACrD9F,EAAK2F,KAAO/M,EAAM+M,MAAQ3F,EAAK2F,KAC/B3F,EAAK6F,SAAWjN,EAAMiN,UAAY7F,EAAK6F,SACvC7F,EAAK4F,UAAYhN,EAAMgN,WAAa5F,EAAK4F,UACzC5F,EAAKiT,4BAA8Bra,EAAMqa,6BAA+BjT,EAAKiT,4BAC7EjT,EAAKkT,kBAAoBta,EAAMsa,mBAAqBlT,EAAKkT,kBACzDlT,EAAK/D,MAAQrD,EAAMqD,OAAS+D,EAAK/D,QAkgBrC,OAriB+BgK,OAsCtB6M,uBAAP,SAAkBpZ,GAChB,QAAI7B,KAAKsO,QAGFd,YAAMvD,qBAAWpI,IAGnBoZ,wBAAP,SAAmBpZ,GACjB,OAAI7B,KAAKsO,OACAtO,KAEF6B,EAAMK,GAAKlC,KAAKgM,QAAQtE,MAC1B7F,EAAMM,GAAKnC,KAAKgM,QAAQC,KACxBpK,EAAMK,GAAMlC,KAAKoE,MAAQpE,KAAKgM,QAAQrE,OACtC9F,EAAMM,GAAMnC,KAAKqE,OAASrE,KAAKgM,QAAQmJ,OACxCnV,KACA,MAGCib,mBAAP,YACOjb,KAAKmK,UACRnK,KAAKsb,eAAiBzT,EAAeqT,QAGlClb,KAAKub,mBAAqBvb,KAAKwF,SAASgW,cAC3Cxb,KAAKub,kBAAoB1G,GAAQU,cAAcvV,KAAKwF,SAASgW,YAAoB,cAG9Exb,KAAKyb,qBAAuBzb,KAAKwF,SAASkW,gBAC7C1b,KAAKyb,oBAAsB5G,GAAQU,cAAcvV,KAAKwF,SAASkW,cAAsB,aAGvF1b,KAAKqE,OAASrE,KAAKwF,SAASmW,aAAatX,OAEzCrE,KAAK4b,YAAc,EACf5b,KAAK4b,YAAc,KACrB5b,KAAK6b,WAAa7b,KAAK6b,UACvB7b,KAAK4b,YAAc,IAIrB/G,GAAQ/G,KAAU9N,KAAKgO,eAAchO,KAAK8N,KAEtC9N,KAAKsb,iBAAmBzT,EAAeqT,OACzClb,KAAK8b,OAASjH,GAAQG,YAAYhV,KAAKiO,KAAKlF,MAAM,EAAG/I,KAAK+b,YAAYC,KAAK,KAAK5X,MAKhFpE,KAAK8b,OAASjH,GAAQG,YAAYhV,KAAKiO,KAAKlF,MAAM,EAH1B/I,KAAK+b,aAAe/b,KAAKic,eAC7Cjc,KAAKkc,aACLlc,KAAKic,gBAC6DD,KAAK,KAAK5X,MAIlF,IAAM+X,EAAiBnc,KAAKoc,WAAapc,KAAK8b,OACxCO,EAAgBxH,GAAQG,YAAYhV,KAAKiO,KAAK+N,KAAK,KAAK5X,MACxDkY,EAAmBtc,KAAKoE,MAAQpE,KAAKgM,QAAQtE,KAAO1H,KAAKgM,QAAQrE,MACjE4U,EAAkBvc,KAAKsb,iBAAmBzT,EAAeqT,MAC3Dlb,KAAK+b,WACJ/b,KAAKkc,eAAiBlc,KAAK+b,WAAa/b,KAAKic,eAAiBjc,KAAKkc,aACxE,GAAIG,EAAgBC,EAClBtc,KAAKoc,WAAa,OACb,GAAID,EAAiBG,EAAmB,EAAG,CAChD,IAAME,EAAYD,GAAmBvc,KAAKiO,KAAK7D,OAC3C,EACAyK,GAAQG,YAAYhV,KAAKiO,KAAKsO,IAAkBnY,MACpDpE,KAAKoc,WAAaE,EAAmBtc,KAAK8b,OAASU,OAC9C,GAAIL,EAAiB,EAAG,CACvBK,EAAYD,GAAmB,EACjC,EACA1H,GAAQG,YAAYhV,KAAKiO,KAAKsO,EAAkB,IAAInY,MACxDpE,KAAKoc,YAAcpc,KAAK8b,OAASU,IAI9BvB,mBAAP,SAAcvO,GACZ,IAAM1J,EAAQhD,KAAK+M,WACbrF,EAAO1H,KAAKmK,QAAUnK,KAAKwF,SAASmW,aAAe3b,KAAKwF,SAASiX,eACjE9U,EAAQ3H,KAAKmK,QAAUnK,KAAKwF,SAASkX,cAAgB1c,KAAKwF,SAASmX,gBACnEC,EAAU5c,KAAKmK,QAAUnK,KAAKwF,SAASgW,YAAcxb,KAAKwF,SAASkW,cACzEhP,EAAIC,UAAUjF,EAAM,EAAG,GACvBgF,EAAIC,UAAUhF,EAAO3H,KAAKoE,MAAQuD,EAAMvD,MAAO,GAC/CsI,EAAIgC,UAAY1O,KAAKmK,QAAUnK,KAAKub,kBAAoBvb,KAAKyb,oBAC7D/O,EAAI2J,SACF3O,EAAKtD,MACL,EACApE,KAAKoE,MAAQsD,EAAKtD,MAAQuD,EAAMvD,MAChCwY,EAAQvY,QAIVqI,EAAI0J,YACJ1J,EAAI6G,KACFvT,KAAKgM,QAAQtE,KACb1H,KAAKgM,QAAQC,IACbjM,KAAKoE,MAAQpE,KAAKgM,QAAQrE,MAAQ3H,KAAKgM,QAAQtE,KAC/C1H,KAAKqE,OAASrE,KAAKgM,QAAQmJ,OAASnV,KAAKgM,QAAQC,KAEnDS,EAAI8J,OAEAxW,KAAKsb,iBAAmBzT,EAAegV,UACzC7c,KAAK8c,gBAAgBpQ,GACZ1M,KAAKsb,iBAAmBzT,EAAeqT,OAASlY,EAAMyR,WAC/DzU,KAAK+c,kBAAkBrQ,GACd1M,KAAKsb,iBAAmBzT,EAAeqT,OAChDlb,KAAKgd,YAAYtQ,IAIduO,oBAAP,SAAehN,GAEb,OADAjO,KAAKiO,KAAOA,EAAKkN,MAAM,IAChBnb,MAGFib,oBAAP,SAAera,GACb,IAAMoC,EAAQhD,KAAK+M,WASnB,OARI/M,KAAKsb,iBAAmBzT,EAAegV,UACzC7c,KAAKid,iBAAiBrc,GACboC,GAASA,EAAMyR,YAAczU,KAAKsb,iBAAmBzT,EAAeqT,MAC7Elb,KAAKkd,mBAAmBtc,GACfZ,KAAKsb,iBAAmBzT,EAAeqT,OAChDlb,KAAKmd,aAAavc,GAGb4M,YAAMiD,kBAAQ7P,IAGhBqa,qBAAP,SAAgBra,GACd,IAAMoC,EAAQhD,KAAK+M,WASnB,OARI/M,KAAKsb,iBAAmBzT,EAAegV,UACzC7c,KAAKod,kBAAkBxc,GACdoC,GAASA,EAAMyR,YAAczU,KAAKsb,iBAAmBzT,EAAeqT,MAC7Elb,KAAKqd,oBAAoBzc,GAChBZ,KAAKsb,iBAAmBzT,EAAeqT,OAChDlb,KAAKsd,cAAc1c,GAGd4M,YAAMkD,mBAAS9P,IAEjBqa,mBAAP,SAAcsC,EAAezS,GAC3B,IAAKT,OAAOC,SAASiT,GACnB,MAAM,IAAIxa,MAAM,gCAAgC/C,KAAKkJ,4BAEvD,IAAKmB,OAAOC,SAASQ,GACnB,MAAM,IAAI/H,MAAM,gCAAgC/C,KAAKkJ,0BAGvD,GADAqU,EAAQrf,KAAKsf,MAAMD,GACfvd,KAAKiO,KAAK7D,OAASmT,GAASA,EAAQ,EACtC,MAAM,IAAIxa,MAAM,gCAAgC/C,KAAKkJ,8BAGvD,GADA4B,EAAM5M,KAAKsf,MAAM1S,GACb9K,KAAKiO,KAAK7D,OAASmT,GAASA,EAAQ,EACtC,MAAM,IAAIxa,MAAM,gCAAgC/C,KAAKkJ,4BAEvD,GAAIqU,EAAQzS,EACV,MAAM,IAAI/H,MAAM,gCAAgC/C,KAAKkJ,kCAOvD,OAJAlJ,KAAKsb,eAAiBzT,EAAegV,UACrC7c,KAAKic,eAAiBsB,EACtBvd,KAAKkc,aAAepR,EACpB9K,KAAK+b,WAAa7d,KAAKia,IAAIja,KAAKwN,IAAI6R,EAAOvd,KAAK+b,YAAajR,GACtD9K,MAGFib,2BAAP,SAAsBpZ,GAEpB,GAAIA,EAAMkO,UACR/P,KAAK+b,WAAa/b,KAAKyd,cAAc5b,EAAMK,SACtC,GAAIlC,KAAKsO,OAAQ,CACtB,IAAMoP,EAAM1d,KAAKyd,cAAc5b,EAAMK,IACjCwb,IAAQ1d,KAAK+b,WACf/b,KAAK2d,OACHzf,KAAKia,IAAIuF,EAAK1d,KAAK+b,YACnB7d,KAAKwN,IAAIgS,EAAK1d,KAAK+b,aAGrB/b,KAAKsb,eAAiBzT,EAAeqT,MAGzC,OAAO1N,YAAMoG,yBAAe/R,IAGtBoZ,0BAAR,SAAsBra,GACpB,GAAIoa,GAAqB4C,KAAKhd,EAAEoT,KAG9B,OAFAhU,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAY,EAAGnb,EAAEoT,UACvChU,KAAK6d,kBAID5C,yBAAR,SAAqBra,GACnB,OAAQA,EAAEoT,KACR,IAAK,YACHhU,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAa,EAAG,GACtC/b,KAAK8d,gBACL,MACF,IAAK,SACH9d,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAY,GAClC,MACF,IAAK,YACH,GAAInb,EAAE2T,MAAO,CAEX,IADMzJ,EAAM9K,KAAK+b,WAAa,GACpB,EACR,MAEF/b,KAAK2d,OAAO7S,EAAK9K,KAAK+b,YACtB,MAEF/b,KAAK8d,gBACL,MACF,IAAK,aACH,GAAIld,EAAE2T,MAAO,CAEX,IADMzJ,EAAM9K,KAAK+b,WAAa,GACpB/b,KAAKiO,KAAK7D,OAClB,MAEFpK,KAAK2d,OAAO3d,KAAK+b,WAAYjR,GAC7B,MAEF9K,KAAK6d,iBACL,MACF,IAAK,MACH,GAAIjd,EAAE2T,MAAO,CACX,IAAMzJ,GAAAA,EAAM9K,KAAKiO,KAAK7D,UACVpK,KAAK+b,YACf/b,KAAK2d,OAAO3d,KAAK+b,WAAYjR,GAE/B,MAEF9K,KAAK+b,WAAa/b,KAAKiO,KAAK7D,OAC5B,MACF,IAAK,OACH,GAAIxJ,EAAE2T,MAAO,CACa,IAApBvU,KAAK+b,YACP/b,KAAK2d,OAAO,EAAG3d,KAAK+b,YAEtB,MAEF/b,KAAK+b,WAAa,IAKhBd,gCAAR,SAA4Bra,GAC1B,GAAIoa,GAAqB4C,KAAKhd,EAAEoT,KAG9B,OAFAhU,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAY,EAAGnb,EAAEoT,UACvChU,KAAK6d,kBAID5C,+BAAR,SAA2Bra,GACzB,OAAQA,EAAEoT,KACR,IAAK,YACHhU,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAa,EAAG,GACtC/b,KAAK8d,gBACL,MACF,IAAK,SACH9d,KAAKiO,KAAK5F,OAAOrI,KAAK+b,WAAY,GAClC,MACF,IAAK,YACH,GAAInb,EAAE2T,MAAO,CAEX,IADMzJ,EAAM9K,KAAK+b,WAAa,GACpB,EACR,MAEF/b,KAAK2d,OAAO7S,EAAK9K,KAAK+b,YACtB,MAEF/b,KAAK8d,gBACL,MACF,IAAK,aACH,GAAIld,EAAE2T,MAAO,CAEX,IADMzJ,EAAM9K,KAAK+b,WAAa,GACpB/b,KAAKiO,KAAK7D,OAClB,MAEFpK,KAAK2d,OAAO3d,KAAK+b,WAAYjR,GAC7B,MAEF9K,KAAK6d,iBACL,MACF,IAAK,MACH,GAAIjd,EAAE2T,MAAO,CACX,IAAMzJ,GAAAA,EAAM9K,KAAKiO,KAAK7D,UACVpK,KAAK+b,YACf/b,KAAK2d,OAAO3d,KAAK+b,WAAYjR,GAE/B,MAEF9K,KAAK+b,WAAa/b,KAAKiO,KAAK7D,OAC5B,MACF,IAAK,OACH,GAAIxJ,EAAE2T,MAAO,CACa,IAApBvU,KAAK+b,YACP/b,KAAK2d,OAAO,EAAG3d,KAAK+b,YAEtB,MAEF/b,KAAK+b,WAAa,IAIhBd,8BAAR,SAA0Bra,GACxB,GAAIoa,GAAqB4C,KAAKhd,EAAEoT,KAM9B,OALAhU,KAAKiO,KAAK5F,OAAOrI,KAAKic,eAAgBjc,KAAKkc,aAAelc,KAAKic,eAAgBrb,EAAEoT,KACjFhU,KAAK+b,WAAa/b,KAAKic,eAAiB,EACxCjc,KAAKsb,eAAiBzT,EAAeqT,MACrClb,KAAKic,gBAAkB,OACvBjc,KAAKkc,cAAgB,IAIjBjB,6BAAR,SAAyBra,GAEvB,OAAQA,EAAEoT,KACR,IAAK,SACL,IAAK,YACHhU,KAAKiO,KAAK5F,OAAOrI,KAAKic,eAAgBjc,KAAKkc,aAAelc,KAAKic,gBAC/Djc,KAAK+b,WAAa/b,KAAKic,eACvBjc,KAAKsb,eAAiBzT,EAAeqT,MACrC,MACF,IAAK,YACH,GAAIta,EAAE2T,MAAO,CACX,IAAMxJ,EAAQ/K,KAAK+b,WAEnB,IADMjR,GAAO9K,KAAKic,iBAAmBjc,KAAK+b,WAAa/b,KAAKkc,aAAelc,KAAKic,gBAAkB,GACxF,EACR,MAEF,GAAIlR,IAAUD,EAAK,CACjB9K,KAAKsb,eAAiBzT,EAAeqT,MACrC,MAEFlb,KAAK2d,OACHzf,KAAKia,IAAIpN,EAAOD,GAChB5M,KAAKwN,IAAIX,EAAOD,IAElB,MAEF9K,KAAK+b,WAAa/b,KAAKic,eACvBjc,KAAKsb,eAAiBzT,EAAeqT,MACrC,MACF,IAAK,aACH,GAAIta,EAAE2T,MAAO,CACLxJ,EAAQ/K,KAAK+b,WAEnB,IADMjR,GAAO9K,KAAKic,iBAAmBjc,KAAK+b,WAAa/b,KAAKkc,aAAelc,KAAKic,gBAAkB,GACxFjc,KAAKiO,KAAK7D,OAClB,MAEF,GAAIW,IAAUD,EAAK,CACjB9K,KAAKsb,eAAiBzT,EAAeqT,MACrC,MAEFlb,KAAK2d,OACHzf,KAAKia,IAAIpN,EAAOD,GAChB5M,KAAKwN,IAAIX,EAAOD,IAElB,MAEF9K,KAAK+b,WAAa/b,KAAKkc,aACvBlc,KAAKsb,eAAiBzT,EAAeqT,MACrC,MACA,IAAK,MACL,GAAIta,EAAE2T,MAAO,CACX,IAAMzJ,GAAAA,EAAM9K,KAAKiO,KAAK7D,UACVpK,KAAK+b,YACf/b,KAAK2d,OAAO3d,KAAK+b,WAAYjR,GAE/B,MAEF9K,KAAK+b,WAAa/b,KAAKiO,KAAK7D,OAC5BpK,KAAKsb,eAAiBzT,EAAeqT,MACrC,MACF,IAAK,OACH,GAAIta,EAAE2T,MAAO,CACa,IAApBvU,KAAK+b,YACP/b,KAAK2d,OAAO,EAAG3d,KAAK+b,YAEtB,MAEF/b,KAAK+b,WAAa,EAClB/b,KAAKsb,eAAiBzT,EAAeqT,QAKnCD,wBAAR,SAAoBvO,GAClB,IAAMuB,EAAOjO,KAAKiO,KAAK+N,KAAK,IAE5BtP,EAAIxI,UACFlE,KAAKgM,QAAQtE,KAAO1H,KAAKoc,WACzBpc,KAAKgM,QAAQC,KAEfS,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtCpB,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIyB,aAAe9G,EAAasG,OAEhCjB,EAAIiC,SAASV,EAAM,EADsD,IAAxDjO,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,SAG3DnV,KAAK6b,WAAa7b,KAAKmK,UACzBuC,EAAI0J,YACJ1J,EAAIqR,OAAO/d,KAAK8b,OAAQ,GACxBpP,EAAIsR,OAAOhe,KAAK8b,OAAQ9b,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QACtEzI,EAAIuR,WAIAhD,4BAAR,SAAwBvO,GACtBA,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtC,IAAMoQ,EAAYle,KAAKiO,KAAKlF,MAAM,EAAG/I,KAAKic,gBAAgBD,KAAK,IACzDmC,EAAane,KAAKiO,KAAKlF,MAAM/I,KAAKic,eAAgBjc,KAAKkc,cAAcF,KAAK,IAC1EoC,EAAYpe,KAAKiO,KAAKlF,MAAM/I,KAAKkc,cAAcF,KAAK,IACpDqC,EAAe3R,EAAIsI,YAAYkJ,GAAW9Z,MAC1Cka,EAAgB5R,EAAIsI,YAAYmJ,GAAY/Z,MAGlDsI,EAAIyB,aAAe9G,EAAasG,OAChC,IAAM4Q,EAAmE,IAAxDve,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QAC/DzI,EAAIxI,UACFlE,KAAKgM,QAAQtE,KAAO1H,KAAKoc,WACzBpc,KAAKgM,QAAQC,IAAMsS,GAErB7R,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAASuP,EAAW,EAAG,GAG3BxR,EAAIxI,UAAUma,EAAc,GAC5B3R,EAAIgC,UAAY1O,KAAKob,4BACrB1O,EAAI2J,SAAS,GAAIkI,EAASD,EAAete,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QACvFzI,EAAIgC,UAAY1O,KAAKqb,kBACrB3O,EAAIiC,SAASwP,EAAY,EAAG,GAG5BzR,EAAIxI,UAAUoa,EAAe,GAC7B5R,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAASyP,EAAW,EAAG,IAGrBnD,8BAAR,SAA0BvO,GACxBA,EAAIoB,KAAU9N,KAAKgO,eAAchO,KAAK8N,KACtC,IAAMoQ,EAAYle,KAAKiO,KAAKlF,MAAM,EAAG/I,KAAK+b,YAAYC,KAAK,IACrDmC,EAAane,KAAKiO,KAAKjO,KAAK+b,YAC5BqC,EAAYpe,KAAKiO,KAAKlF,MAAM/I,KAAK+b,WAAa,GAAGC,KAAK,IACtDqC,EAAe3R,EAAIsI,YAAYkJ,GAAW9Z,MAC1Cka,EAAgB5R,EAAIsI,YAAYmJ,GAAY/Z,MAGlDsI,EAAIyB,aAAe9G,EAAasG,OAChC,IAAM4Q,EAAmE,IAAxDve,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QAC/DzI,EAAIxI,UACFlE,KAAKgM,QAAQtE,KAAO1H,KAAKoc,WACzBpc,KAAKgM,QAAQC,IAAMsS,GAErB7R,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAASuP,EAAW,EAAG,GAEtBC,GAULzR,EAAIxI,UAAUma,EAAc,GAC5B3R,EAAIgC,UAAY1O,KAAKob,4BACrB1O,EAAI2J,SAAS,GAAIkI,EAASD,EAAete,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,QACvFzI,EAAIgC,UAAY1O,KAAKqb,kBACrB3O,EAAIiC,SAASwP,EAAY,EAAG,GAEvBC,IAIL1R,EAAIxI,UAAUoa,EAAe,GAC7B5R,EAAIgC,UAAY1O,KAAK+N,UACrBrB,EAAIiC,SAASyP,EAAW,EAAG,KArBrBpe,KAAK6b,WAAa7b,KAAKmK,UACzBuC,EAAI0J,YACJ1J,EAAIqR,OAAO/d,KAAK8b,QAASyC,GACzB7R,EAAIsR,OAAOhe,KAAK8b,OAAQ9b,KAAKqE,OAASrE,KAAKgM,QAAQC,IAAMjM,KAAKgM,QAAQmJ,OAASoJ,GAC/E7R,EAAIuR,WAoBFhD,0BAAR,WACEjb,KAAK+b,YAAc,EACnB/b,KAAK4b,WAAa,EAClB5b,KAAK6b,WAAY,EACb7b,KAAK+b,WAAa,IACpB/b,KAAK+b,WAAa,IAIdd,2BAAR,WACEjb,KAAK+b,YAAc,EACnB/b,KAAK4b,WAAa,EAClB5b,KAAK6b,WAAY,EACb7b,KAAK+b,WAAa/b,KAAKiO,KAAK7D,SAC9BpK,KAAK+b,WAAa/b,KAAKiO,KAAK7D,SAIxB6Q,0BAAR,SAAsBuD,GACpB3J,GAAQ/G,KAAU9N,KAAKgO,eAAchO,KAAK8N,KAI1C,IAHA,IAAI4P,EAAM,EACNe,EAAM,GAEDpT,EAAI,EAAGA,EAAIrL,KAAKiO,KAAK7D,OAAQiB,IAAK,CAEzC,GAAKwJ,GAAQG,YADbyJ,GAAOze,KAAKiO,KAAK5C,IACajH,MAAQpE,KAAKoc,WAAcoC,EACvD,OAAOd,EAETA,GAAO,EAET,OAAO1d,KAAKiO,KAAK7D,WAniBUpB"}